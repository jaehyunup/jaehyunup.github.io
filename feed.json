[{"title":"Class in Java","permalink":"https://jaehyunup.github.io/live-study-5.html","link":"https://jaehyunup.github.io/live-study-5.html","date":"2020-12-12T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p><img src=\"https://github.com/jaehyunup/java_study/raw/master/20.11-ing/img/studyhalle.jpg?raw=true\" alt=\"스터디사진\" />\n<br /></p>\n\n<h3 id=\"q1-클래스-정의하는-방법\">Q1. 클래스 정의하는 방법</h3>\n<p>클래스는 class 키워드를통해 정의할 수 있으며, 멤버필드와 메서드로 구성됩니다.\n멤버필드를 private으로 접근제한한다면, getter와 setter를 이용해서 내부값에 접근할 수 있습니다.\n또, 생성자와 같은 메서드를 통해 내부값의 변경을 도모할수 있습니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyClass</span><span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">long</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printMyName</span><span class=\"o\">(){</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">MyClass</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">demo</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n        <span class=\"nc\">MyClass</span> <span class=\"n\">mc</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">MyClass</span><span class=\"o\">(</span><span class=\"s\">\"재현\"</span><span class=\"o\">);</span>\n        <span class=\"n\">mc</span><span class=\"o\">.</span><span class=\"na\">printMyName</span><span class=\"o\">();</span>\n        <span class=\"n\">mc</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"s\">\"재현아니다\"</span><span class=\"o\">);</span>\n        <span class=\"n\">mc</span><span class=\"o\">.</span><span class=\"na\">printMyName</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h4 id=\"-결과\">🧨 결과</h4>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>재현\n재현아니다\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3 id=\"q2-객체-만드는-방법-new-키워드-이해하기\">Q2. 객체 만드는 방법 (new 키워드 이해하기)</h3>\n<p>객체는 위의 코드와같이 new 키워드를 통해 클래스를 인스턴스화하여 만들수 있습니다.</p>\n\n<p>new 키워드는 다음과 같은 특성을 가집니다.</p>\n\n<ul>\n  <li>객체를 만드는 데 사용됩니다.</li>\n  <li>런타임에 객체가 생성될 메모리를 할당합니다.</li>\n  <li>모든 객체는 힙 영역에서 메모리를 차지합니다.</li>\n  <li>객체 생성자를 호출합니다.</li>\n  <li>생성자를 호출하려면 단일 후위 인수가 필요합니다.</li>\n</ul>\n\n<p>생성자는 파라미터가 비어있을 수 있고, 또는 클래스에 선언된 파라미터를 포함한 생성자로 생성\n할 수도 있습니다.<br />\n<br /></p>\n\n<h3 id=\"q3-메소드-정의하는-방법\">Q3. 메소드 정의하는 방법</h3>\n<p>메소드는 클래스가 가지고있는 독립적인 행위로 구성되어야합니다.\n위의 MyClass에서 printMyName()이라는 메소드는 현재 필드멤버인 ‘name’을 출력하는\n행위를 하고있으며 정의는 다음과같습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printMyName</span><span class=\"o\">(){</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>자바에서는 멤버필드를 private으로 보호하는것이 일반적입니다. 그래서 getter&amp;setter 패턴을\n통해 멤버필드에 접근하는 방식을 자주 사용합니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getName</span><span class=\"o\">(){</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p><br /></p>\n\n<h3 id=\"q4-생성자-정의하는-방법\">Q4. 생성자 정의하는 방법</h3>\n<p>객체가 new키워드를 통해 생성될때 생성자를 호출합니다.</p>\n\n<p>class를 작성할때 별도로 생성자를 선언하지 않았다면 컴파일러에 의해 생성자가 자동으로\n추가되게 되게 됩니다.</p>\n\n<p>만약 class에 생성자를 작성했다면, 해당 생성자를 실행하게 됩니다.</p>\n\n<p>우선 다양한 방법으로 직접 정의될 수 있는 생성자부터 알아보겠습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 빈 생성자 */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/* 1. 파라미터가 비어있는 생성자 */</span>\n    <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">=</span><span class=\"s\">\"파라미터가 없는 생성자로 생성된 객체\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/* 2. 빈 생성자 */</span>\n    <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">data</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/* 3. 클래스를 파라미터로 하는 생성자 */</span>\n    <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(</span><span class=\"nc\">ConstructorDemoClass</span> <span class=\"n\">object</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">=</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n    <span class=\"cm\">/* 객체의 data 멤버변수와 객체 hashcode 출력*/</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printData</span><span class=\"o\">(){</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"data=\"</span><span class=\"o\">+</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">+</span><span class=\"s\">\"   [hashCode=\"</span> <span class=\"o\">+</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">hashCode</span><span class=\"o\">()+</span><span class=\"s\">\"]\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>위와같은 클래스를 선언하고 이를 데모할 별도의 클래스에서 데모를 수행해보겠습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">demo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ConstructorDemoClass</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">();</span>\n        <span class=\"nc\">ConstructorDemoClass</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(</span><span class=\"s\">\"생성자로 데이터삽입\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">ConstructorDemoClass</span> <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(</span><span class=\"s\">\"c3\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">ConstructorDemoClass</span> <span class=\"n\">c4</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConstructorDemoClass</span><span class=\"o\">(</span><span class=\"n\">c3</span><span class=\"o\">);</span>\n        <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"na\">printData</span><span class=\"o\">();</span>\n        <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"na\">printData</span><span class=\"o\">();</span>\n        <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"na\">printData</span><span class=\"o\">();</span>\n        <span class=\"n\">c4</span><span class=\"o\">.</span><span class=\"na\">printData</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>실행결과:  \ndata=파라미터가 없는 생성자로 생성된 객체   [hashCode=1956725890]\ndata=생성자로 데이터삽입   [hashCode=356573597]\ndata=c3   [hashCode=1735600054]\ndata=c3   [hashCode=21685669]\n</code></pre></div></div>\n\n<p>이제 다른 방식으로 생성자를 작성하지않고, 컴파일러가 자동으로 생성자를 만들어주는지 확인 해보겠습니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">demo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ConstructorDemo2Class</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConstructorDemo2Class</span><span class=\"o\">();</span>\n        <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"na\">printData</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ConstructorDemo2Class</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printData</span><span class=\"o\">(){</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"data=\"</span><span class=\"o\">+</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">+</span><span class=\"s\">\"   [hashCode=\"</span> <span class=\"o\">+</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">hashCode</span><span class=\"o\">()+</span><span class=\"s\">\"]\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>실행결과:\ndata=null   [hashCode=1956725890]\n</code></pre></div></div>\n<p>생성자가 없지만, 클래스는 정상적으로 생성되었습니다. 직접 선언한 생성자로 data 기본값을\n대입해줬던것과 달리 컴파일러가 자동생성해준 생성자는 그런 임의의 코드가 작성되어있지\n않기 때문에 data로 null을 반환합니다. 컴파일러가 생성하는 생성자는 어떻게 작성될까요?</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ConstructorDemo2Class</span> <span class=\"o\">{</span>\n    <span class=\"nc\">ConstructorDemo2Class</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">();</span>\n     <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>위와같이 빈 생성자로 super();를 부르고있습니다. super 키워드는 상속된 부모객체의\n생성자를 부르는 키워드로, 이번장에서는 설명을 넘기겠습니다.</p>\n\n<p><br /></p>\n\n<h3 id=\"q5-this-키워드-이해하기\">Q5. this 키워드 이해하기</h3>\n<p>this 키워드는 자기자신 객체의 참조를 뜻합니다. <br />\nthis 키워드의 대표적인 사용 예시는 다음과 같습니다</p>\n\n<ul>\n  <li>현재 클래스 인스턴스 변수를 참조하는 데 사용할 수 있습니다.</li>\n  <li>현재 클래스 메서드를 호출하는 데 사용할 수 있습니다.</li>\n  <li>this()는 현재 클래스 생성자를 호출하는 데 사용할 수 있습니다.</li>\n  <li>메소드 호출에서 인수로 전달 될 수 있습니다.</li>\n  <li>생성자 호출에서 인수로 전달 될 수 있습니다.</li>\n  <li>메서드에서 현재 클래스 인스턴스를 반환하는 데 사용할 수 있습니다.</li>\n</ul>","excerpt":"","languages":null,"categories":["posts"],"tags":["Java"]},{"title":"Controll flow statement in Java","permalink":"https://jaehyunup.github.io/live-study-4.html","link":"https://jaehyunup.github.io/live-study-4.html","date":"2020-11-30T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p><img src=\"https://github.com/jaehyunup/java_study/raw/master/20.11-ing/img/studyhalle.jpg?raw=true\" alt=\"스터디사진\" />\n<br /></p>\n\n<h3 id=\"이번-포스팅에서는-자바의-선택문반복문-등-제어문의-표현법에-대해-간단히-알아보려합니다-그-과정속에서-자바-버전에서-추가변경된-expression을-정리했습니다\">이번 포스팅에서는 자바의 선택문,반복문 등 제어문의 표현법에 대해 간단히 알아보려합니다. 그 과정속에서 자바 버전에서 추가,변경된 Expression을 정리했습니다.</h3>\n\n<h1 id=\"1-조건문-the-if-then-and-if-then-else-statements\">1. 조건문 (The if-then and if-then-else Statements)</h1>\n\n<h2 id=\"1-if-then\">1. if-then</h2>\n\n<p>가장 기본적인 조건문으로 if절에 작성된 코드의 결과가 True일때 then절의 코드가 실행됩니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">ifTest</span><span class=\"o\">(){</span>\n  <span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"o\">;</span>\n  <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">){</span> <span class=\"c1\">// if statement</span>\n    <span class=\"c1\">// then statement</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"2-if-then-else\">2. if-then-else</h2>\n\n<p>if절이 true일때는 then 절이 실행되고, false일때는 else절이 실행됩니다</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">ifTest</span><span class=\"o\">(){</span>\n  <span class=\"kt\">boolean</span> <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"o\">;</span>\n  <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">){</span> <span class=\"c1\">// if statement</span>\n    <span class=\"c1\">// then statement</span>\n  <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>\n    <span class=\"c1\">//else statement</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"2-제어문-swtich-case-statement\">2. 제어문 (Swtich-case Statement)</h1>\n\n<h2 id=\"1-switch\">1. switch</h2>\n\n<p>다양한 상황에따른 흐름이 필요할때 사용하게되는 switch 문입니다. switch문에 작성된 값을 비교하여 case와 같을때 case문이 작동됩니다.</p>\n\n<p>switch문의 조건절에 들어갈 수 있는 자료형은 다음과같습니다.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>비고</th>\n      <th>종류</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>프리미티브타입</td>\n      <td>boolean,byte,short,char,int,long,float,double</td>\n    </tr>\n    <tr>\n      <td>래퍼클래스</td>\n      <td>String,Character,Byte,Short,Integer</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>p.s String 클래스는 java 8 버전부터 Switch문에 사용할 수 있게 되었습니다.</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">StringSwitchDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getMonthNumber</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">month</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">month</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">monthNumber</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">month</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"january\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"february\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"march\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"april\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"may\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"june\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"july\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"august\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"september\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"october\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"november\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"december\"</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">monthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">monthNumber</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">String</span> <span class=\"n\">month</span> <span class=\"o\">=</span> <span class=\"s\">\"August\"</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">returnedMonthNumber</span> <span class=\"o\">=</span>\n            <span class=\"nc\">StringSwitchDemo</span><span class=\"o\">.</span><span class=\"na\">getMonthNumber</span><span class=\"o\">(</span><span class=\"n\">month</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">returnedMonthNumber</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Invalid month\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">returnedMonthNumber</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>swtich문은 자바 버전별로 여러가지 변경점이 많이 생겼는데요, 대표적으로 자바 12,13버전에서 yield 키워드나 arrow rule등의 변경점이 있었습니다.\nyield를 사용하면 기존 swtich에서 break를 이용했던것과 달리, break를 이용하지않고 switch문의 결과를 받을 variable을 이용하여 반복되는 break 키워드 작성을 줄일 수 있습니다. 또, arrow 표현을 통해 더 보기쉬운 코드작성또한 가능하게 되었습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\">// Traditional switch</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getValueBefore12</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"a\"</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"b\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"c\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"d\"</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"e\"</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"f\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Java 12, multiple comma-separated labels</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getValueMultipleLabels</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"s\">\"b\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"c\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"d\"</span><span class=\"o\">,</span> <span class=\"s\">\"e\"</span><span class=\"o\">,</span> <span class=\"s\">\"f\"</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Java 12, switch expression returns a value via label rules (arrow)</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getValueViaArrow</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"s\">\"b\"</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"c\"</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"d\"</span><span class=\"o\">,</span> <span class=\"s\">\"e\"</span><span class=\"o\">,</span> <span class=\"s\">\"f\"</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// do something here...</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Supports multi line block!\"</span><span class=\"o\">);</span>\n                <span class=\"n\">yield</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">default</span> <span class=\"o\">-&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Java 13, switch expression returns a value via yield</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getValueViaYield</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">mode</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"s\">\"b\"</span><span class=\"o\">:</span>\n                <span class=\"n\">yield</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"c\"</span><span class=\"o\">:</span>\n                <span class=\"n\">yield</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"d\"</span><span class=\"o\">,</span> <span class=\"s\">\"e\"</span><span class=\"o\">,</span> <span class=\"s\">\"f\"</span><span class=\"o\">:</span>\n                <span class=\"c1\">// do something here...</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Supports multi line block!\"</span><span class=\"o\">);</span>\n                <span class=\"n\">yield</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">yield</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>또한 Java 12 버전에서는 case expression 내부에 같은 변수명을 사용할 수 없었지만 이제는 가능하게되었습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"err\">  </span><span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"s\">\"first\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"err\">  </span><span class=\"k\">case</span> <span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"s\">\"second\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"err\">  </span><span class=\"k\">default</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"s\">\"none\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 12 버전 이전에서는 아래와 같이 사용해야 했습니다.</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"err\">  </span><span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">firstTemp</span> <span class=\"o\">=</span> <span class=\"s\">\"first\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">firstTemp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"err\">  </span><span class=\"k\">case</span> <span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">secondTemp</span> <span class=\"o\">=</span> <span class=\"s\">\"second\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">secondTemp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"err\">  </span><span class=\"k\">default</span><span class=\"o\">:</span>\n<span class=\"err\">    </span><span class=\"nc\">String</span> <span class=\"n\">defaultTemp</span> <span class=\"o\">=</span> <span class=\"s\">\"none\"</span><span class=\"o\">;</span>\n<span class=\"err\">    </span><span class=\"k\">break</span> <span class=\"n\">defaultTemp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"3-반복문\">3. 반복문</h1>\n\n<h2 id=\"1-while--do-while\">1. while &amp; do-while</h2>\n\n<p>while 절은 괄호안에있는 expression이 true가 될때 계속반복하고 false 일때 반복을 멈춥니다. <strong>while문 실행 중간 괄호안 expression false가 되어도 중간에 멈추지않고</strong> 반복 첫지점에서 계속 값 검증을 수행합니다.</p>\n\n<p>do-while절은 마찬가지 이지만 do절 아래에있는 코드를 수행하고 while절 expression 에 대해 검증합니다. 즉, 한번은 무조건 실행되고 마지막 지점에서 반복 여부를 확인합니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// while</span>\n<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n    <span class=\"c1\">// your code goes here</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// do-while</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span>\n     <span class=\"n\">statement</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">}</span> <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"2-forfor-loop\">2. for(for-loop)</h2>\n\n<p>for(for-loop)문입니다.<br />\nfor 괄호 중간 expression 이 true일때 계속 반복합니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">ForDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span><span class=\"mi\">11</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">++)</span> <span class=\"o\">{</span>\n              <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span> <span class=\"o\">(</span> <span class=\"s\">\"Count is :\"</span><span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><strong>for문으로의 무한루프는 다음과같이 만들 수 있습니다.</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 무한 루프</span>\n<span class=\"k\">for</span> <span class=\"o\">(;;)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 코드</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><strong>컬렉션/배열을 통한 향상된 반복문(enhanced for)</strong></p>\n\n<p>자바 5에서 추가된 향상된 반복문입니다. for-each라고도 불립니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// print array elements</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EnhancedForDemo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n         <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span> <span class=\"o\">=</span>\n             <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">};</span>\n         <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">numbers</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n             <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Count is: \"</span> <span class=\"o\">+</span> <span class=\"n\">item</span><span class=\"o\">);</span>\n         <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>","excerpt":"","languages":null,"categories":["posts"],"tags":["Java"]},{"title":"JVM, 자바코드의 실행과 컴파일러(JIT)","permalink":"https://jaehyunup.github.io/what-is-jvm.html","link":"https://jaehyunup.github.io/what-is-jvm.html","date":"2020-11-14T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h1 id=\"1-jvm이란-무엇인가\">1. JVM이란 무엇인가?</h1>\n\n<p>자바 언어는 <strong>Write once, run anywhere</strong> 이라는 특징을 갖고 있고, 이것을 실현가능하게 해주는 것이 바로 이 JVM 입니다. JVM은 크게 4가지의 구성요소로 구성되어있습니다.</p>\n\n<h3 id=\"1-excecution-engine---load-된-바이트코드를-실행하는-runtime-module\">1. Excecution Engine - Load 된 바이트코드를 실행하는 Runtime Module.</h3>\n\n<p>JVM은 OS와 Application 단 사이에서 자바코드가 컴파일된 .class 바이트 코드를 해석하여 이를 실행하는 역할을 하고있고, 이를 통해 어떤 실행환경에서 실행시키든 JVM이 해석한 결과는 항상 같은 실행 결과라는것을 기대할 수 있습니다. 즉, JVM은 자바코드의 실행환경을 제공합니다.</p>\n\n<h3 id=\"2-runtime-data-area---자바-어플리케이션을-수행할때-필요한-데이터의-area\">2. Runtime Data Area - 자바 어플리케이션을 수행할때 필요한 데이터의 Area.</h3>\n\n<p>JVM은 런타임 환경이고, 이 환경안에는 개발자가 작성한 자바 어플리케이션을 실행할 데이터들의 관리가 필요합니다. JVM은 이 DATA를 5개의 영역에 걸쳐 구분해서 관리하고 있으며 구성요소는 다음과 같습니다.</p>\n\n<p><strong>1. Method Area (모든 쓰레드 공유)</strong></p>\n\n<ul>\n  <li>\n    <p>클래스 type</p>\n\n    <ul>\n      <li>interface, abstract 등등</li>\n    </ul>\n  </li>\n  <li>\n    <p>클래스 필드</p>\n\n    <ul>\n      <li>멤버 변수의 이름,데이터타입,접근제어자 등</li>\n    </ul>\n  </li>\n  <li>\n    <p>클래스 메서드</p>\n\n    <ul>\n      <li>메소드의 리턴타입,파라미터,접근제어자 등</li>\n    </ul>\n  </li>\n  <li>\n    <p>Runtime Constant Pool</p>\n    <ul>\n      <li>클래스가 가진 메소드,필드,문자열 상수등의 실제 물리적 메모리 위치를 참조할수있는 레퍼런스들을 갖고있습니다. 필요할때만 참조할 수 있으므로 모든 바이트코드를 해석하지 않고 실행해야하는 바이트코드만을 찾아 메모리에 적재할 수 있습니다.</li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>2. Heap Area (모든 쓰레드 공유)</strong><br />\n 인스턴스화 된 객체들이 저장되는 공간입니다. 즉 new 를 통해서 실제로 인스턴스화된 객체들이 힙에 올라가게 됩니다.</p>\n\n<p><strong>3. JVM Stack (쓰레드 별 할당)</strong><br />\n JVM Stack에는 각 메소드를 위한 Stack Frame이 있으며 함수의 호출과 관계되는 지역 변수와 매개변수가 저장되어 있습니다. 만약 메소드가 호출되면 JVM Stack은 해당 메소드의 Stack Frame을 push 하고, 수행되면 Stack Frame을 Stack에서 pop하게 됩니다.</p>\n\n<p><strong>4. PC Register (쓰레드 별 할당)</strong><br />\n PC Registers는 각 JVM 스레드에 존재하는데, JVM 스레드가 시작할 때 생성되고, 쓰레드가 수행중인 바이트 코드 명령어의 주소를 나타내고 있다. JVM 당 하나의 PC Registers가 존재한다. (수행상태를 저장하고 있기 때문에 멀티쓰레딩을 가능하게 한다.)</p>\n\n<p><strong>5. Native Method Stack (쓰레드 별 할당)</strong><br />\n 스레드에서 네이티브 메소드가 실행되는 경우 Native Method Stack에 쌓입니다. Java 메소드를 실행하는 경우 JVM 스택에 메소드가 적재되지만, 해당 메소드 내부에 네이티브 방식을 사용하는 메소드(일반적으로 C,C++로 작성됨) 가 있다면 해당 메소드는 네이티브 스택에 적재되어 수행되고, Native Method Stack에서 자바 메소드가 수행되려한다면 다시 JVM Stack으로 돌아가 메소드가 적재되어 수행됩니다.</p>\n\n<h3 id=\"3-garbagecolltion---시스템-리소스-공간-할당-반환을-개발자-대신-수행하는-똑똑한-친구\">3. GarbageColltion - 시스템 리소스 공간 할당, 반환을 개발자 대신 수행하는 똑똑한 친구.</h3>\n\n<p>C 언어에서는 개발자가 시스템콜을 통해 시스템에게 직접 메모리 공간을 할당받고(Memory allocation) 사용한다음 메모리를 반환합니다(Memory free). 반면에, Java에서는 이런 allocation-free의 과정을 Garbage Collection 이라는 프로세스를 통해서 메모리를 할당하고, 해제하는 작업을 JVM이 모두 수행해주고 있습니다. 개인적인 의견으로 Java 진영에서는 오히려 개발자가 메모리에 직접 관여하는것을 지양하는것 같고, GC에 대한 Custom을 통해 성능을 올리는것을 권장하는것 같아 보입니다.</p>\n\n<h3 id=\"4-classloader---자바-바이트코드를-해석하고-class-객체를-생성하는-번역가\">4. ClassLoader - 자바 바이트코드를 해석하고 class 객체를 생성하는 번역가.</h3>\n\n<p>클래스 로더는 한번에 모든 클래스가 메모리에 올라가지 않습니다. 각 클래스들은 필요할때만 메모리에 올라가서 어플리케이션에서 사용되게 되며, 이것을 동적로딩이라고 합니다. 그리고 이것은 클래스로더가 있기때문에 가능합니다. 클래스로더는 아래 3가지 책임을 가지고있습니다.</p>\n\n<ul>\n  <li>\n    <p>Loading : 클래스 파일에서 클래스 이름, 상속관계, 클래스의 타입(class, interface, enum) 정보, 메소드 &amp; 생성자 &amp; 멤버변수 정보, 상수 등에 대한 정보를 로딩해서 Binary 데이터로 변경합니다.</p>\n  </li>\n  <li>\n    <p>Linking : Verification 과 Preparation, Resolution 단계를 거치면서 바이트코드를 검증하고 필요한 만큼의 메모리를 할당한다. Resolution 과정에서는 Symbolic Reference 를 Direct Reference 등으로 바꿔줍니다.</p>\n  </li>\n  <li>\n    <p>Initialization : static block 의 초기화 및 static 데이터들을 할당합니다. Top-&gt;Bottom 방식으로 클래스들을 해석합니다.</p>\n  </li>\n</ul>\n\n<h1 id=\"2컴파일-하는-방법\">2.컴파일 하는 방법</h1>\n\n<p>자바 코드가 작성된 .java 파일을 자바 컴파일러를 통해(javac 명령) 바이트코드(.class) 로 컴파일합니다. 이 바이트코드는 이후 JVM에 의해 해석되어 실행되게 됩니다.</p>\n\n<h1 id=\"3실행하는-방법\">3.실행하는 방법</h1>\n\n<p>컴파일된 바이트코드가 JVM의 클래스로더(Class Loader)에게 전달되어 동적로딩(Dynamic Loading)을 통해 필요한 클래스들을 로딩 및 링크하여 런타임 데이터 영역(Runtime Data area)에 적재합니다. 이후 Excecution Engine이 JVM 메모리에 올라온 바이트 코드들을 명령어 단위로 하나씩 가져와서 실행합니다.</p>\n\n<h1 id=\"4바이트코드란-무엇인가\">4.바이트코드란 무엇인가</h1>\n\n<p>바이트 코드란 개발자가 작성한 자바 코드가 자바 컴파일러(javac)를 통해 자바 가상 머신이 이해할 수 있게 변환된 형태의 코드를 뜻합니다. 자바 바이트코드는 .class 확장자를 가지고 있으며, 자바 코드와는 다소 다르게 생겼습니다.</p>\n\n<h1 id=\"5jit-컴파일러란-무엇이며-어떻게-동작하는지\">5.JIT 컴파일러란 무엇이며 어떻게 동작하는지</h1>\n\n<p>자바 바이트코드를 실행하는 실행엔진 방식은 Interpreter와 JIT(Just-In-Time) Compiler가 있습니다.\n초기에는 Interpreter 방식으로 바이트코드가 수행되었습니다. 하지만 Interpreter는 바이트 코드를 한줄씩 읽기 때문에 실행이 느린 단점이 있었습니다. 이러한 단점을 보완하기 위해 나온 것이 JIT Compiler 입니다.</p>\n\n<p>JIT Compiler는 자주 사용되는 메소드는 실행시 미리 기계어로 컴파일하고 메소드 영억에 있는 코드캐시 공간에 컴파일된 기계어 코드를 캐시합니다.반면에 자주 사용되지 않는 메소드는 미리 컴파일 하지 않았다가, 호출되었을때만 클래스 로더를 통해 바이트코드를 로드하여 컴파일하게 됩니다. JIT 컴파일러에서는 이 과정을 최적화라고 부르며, JIT 컴파일러의 최적화 레벨이 높을수록 미리 컴파일되어 캐싱될 바이트코드의 양이 작아지게 됩니다. 하지만 동적으로 바이트코드를 다시 로드할 양이 많이질 수 있기 때문에 메모리 측면에서는 비용이 더 높아질 수 도 있습니다.</p>\n\n<h1 id=\"6jvm-구성-요소\">6.JVM 구성 요소</h1>\n\n<p>1번에 적어버렸네요ㅜ.ㅜ</p>\n\n<h1 id=\"7jdk와-jre의-차이\">7.JDK와 JRE의 차이</h1>\n\n<p>JDE는 컴파일된 자바 Application을 실행할 수 있는 환경을 뜻합니다, 즉 JVM과 Java API만이 포함되어있습니다.</p>\n\n<p>JDK는 JRE보다 더 큰 개념으로, 자바 개발 환경을 말합니다. JVM과 Java API 뿐만아니라 자바 컴파일러,디버거 등 자바 개발환경에 필요한 도구 또한 포함합니다.</p>","excerpt":"1. JVM이란 무엇인가?","languages":null,"categories":["posts"],"tags":["Java"]},{"title":"Spring Boot + MyBatis (Configuration)","permalink":"https://jaehyunup.github.io/springMyBatis.html","link":"https://jaehyunup.github.io/springMyBatis.html","date":"2020-10-21T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"구글링해서-나온-spring-boot--mybatis-연동-예제는-legacy-코드가-너무-많았다\">구글링해서 나온 Spring Boot + MyBatis 연동 예제는 legacy 코드가 너무 많았다.</h2>\n<p>SpringBoot 와 mybatis를 연동해서 토이프로젝트를 진행하는 도중에 구글링을 여러번 하면서 다양한분들의 예제코드를 많이 봤다. 하지만 최근에 올라온 글임에도 불구하고 legacy 코드를 그대로 사용 하시는 분들도 있는걸 많이 보았고, 개개인의 주관이 없다고 느껴졌다. 그 판단이 틀리던 맞던 자기 주관이 있어야 고칠수있다고 생각한다. 나는 연동부분을 간단하게 테스트해보며 어떻게 사용하는게 맞는지 적어보려고 한다.</p>\n\n<h2 id=\"--spring-boot와-mybatis-연동하기mysqlmaven\">- Spring boot와 Mybatis 연동하기(MySQL,Maven)</h2>\n\n<h3 id=\"1-maven을-이용해-mabatis-와-mysql과-연결해줄-connector-의존성을-주입한다\">1. Maven을 이용해 mabatis 와 MySQL과 연결해줄 connector 의존성을 주입한다.</h3>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span>\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n\t    <span class=\"nt\">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class=\"nt\">&lt;/artifactId&gt;</span>\n\t\t<span class=\"nt\">&lt;version&gt;</span>2.1.3<span class=\"nt\">&lt;/version&gt;</span>\n\t<span class=\"nt\">&lt;/dependency&gt;</span>\n\t<span class=\"nt\">&lt;dependency&gt;</span>\n\t\t<span class=\"nt\">&lt;groupId&gt;</span>mysql<span class=\"nt\">&lt;/groupId&gt;</span>\n\t\t<span class=\"nt\">&lt;artifactId&gt;</span>mysql-connector-java<span class=\"nt\">&lt;/artifactId&gt;</span>\n\t<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"2-db-연결을-위한-프로퍼티를-만들기위해-applicationproperties-파일-수정하기\">2. DB 연결을 위한 프로퍼티를 만들기위해 application.properties 파일 수정하기</h3>\n<p>파일경로 : src/main/resources/application.properties</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.hikari.jdbc-url=jdbc:mysql://포스트주소:포트/데이터베이스명?characterEncoding=DB캐릭터셋&amp;serverTimezone=DB서버타임존\nspring.datasource.hikari.username=DB접속시 사용할 아이디 \nspring.datasource.hikari.password=DB접속 사용할비밀번호\n</code></pre></div></div>\n\n<h3 id=\"3-configuration-class를-이용하여-datasourcesqlfactory-bean-등록하기\">3. configuration class를 이용하여 DataSource,SqlFactory Bean 등록하기</h3>\n<p>mvc에서는 application-Context.xml을 이용해서 빈을 등록합니다. 하지만 스프링진영에서 스프링부트를 메인으로 내세우고있고, mvc로 개발하던 자바 개발자들이 xml 지옥에 빠진것을 알고 최신버전으로 올라갈수록 xml을 지양하는 움직임을 보이고 있는것 같습니다. 그래서 저는 @Configuration 어노테이션을 이용하여 설정합니다.</p>\n\n<p><strong>1. configuration class는 어떻게 로딩될까?</strong></p>\n\n<p>스프링부트에서 configuration 어노테이션이 붙은 클래스는 스프링 부트 어플리케이션이 로드될때 Component-scan 을 통해 해석되게 됩니다.\nSpring boot 기준으로, main 메서드에서 다음과 같은 메서드를 부릅니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@SpringBootApplication</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AuthappApplication</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">SpringApplication</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">(</span><span class=\"nc\">AuthappApplication</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>이 위에 선언된 @SpringBootApplication 어노테이션의 구현부를 간단히 살펴보면 아래와같습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"nc\">ElementType</span><span class=\"o\">.</span><span class=\"na\">TYPE</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"nc\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@Documented</span>\n<span class=\"nd\">@Inherited</span>\n<span class=\"nd\">@SpringBootConfiguration</span>\n<span class=\"nd\">@EnableAutoConfiguration</span>\n<span class=\"nd\">@ComponentScan</span><span class=\"o\">(</span><span class=\"n\">excludeFilters</span> <span class=\"o\">=</span> <span class=\"o\">{</span> <span class=\"nd\">@Filter</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"nc\">FilterType</span><span class=\"o\">.</span><span class=\"na\">CUSTOM</span><span class=\"o\">,</span> <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"nc\">TypeExcludeFilter</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">),</span>\n\t\t<span class=\"nd\">@Filter</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"nc\">FilterType</span><span class=\"o\">.</span><span class=\"na\">CUSTOM</span><span class=\"o\">,</span> <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"nc\">AutoConfigurationExcludeFilter</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span> <span class=\"o\">})</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"nc\">SpringBootApplication</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/* 생략 */</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>보시다시피 ConponentScan 어노테이션을 통해 컴포넌트들을 스캔하고 있습니다.</p>\n\n<p>그래서 우리가 클래스를 만들어 @configuration 어노테이션을 등록했을때 이것을 컴포넌트라고 인식하고 스캔하게됩니다. 하지만, component라고 선언한것도 아닌데 어떻게 컴포넌트로 인식하고 스캔할까요? 답은 @Configuration 어노테이션의 구현부를 살펴보면 됩니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"nc\">ElementType</span><span class=\"o\">.</span><span class=\"na\">TYPE</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"nc\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"nd\">@Documented</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"nc\">Configuration</span> <span class=\"o\">{</span>\n    <span class=\"cm\">/*생략 */</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>@Configuration 어노테이션의 구현에서 이미 @Component 어노테이션을 물고있습니다. 그래서 우리가 @Configuration 어노테이션만 적어도 이미 컴포넌트로서 인식되고 있습니다.</p>\n\n<p>이제 이해했으니 Configuration 클래스를 작성해보겠습니다.</p>\n\n<p><strong>2. configuration class 구현</strong></p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n * @packageName : com.jaehyun.authapp.configuration\n * @fileName : DatabaseConfiguration.java\n * @author : parkjaehyun\n * @date : 2020.10.20\n * @description : 데이터베이스 설정 클래스\n *  ============================================================================\n *     DATE \t AUTHOR      NOTE \n *  ---------------------------------------------------------------------------- \n *  2020.10.20 parkjaehyun   최초생성 \n *  2020.10.20 parkjaehyun   커넥션풀은 hikariCP를 이용, Mybatis 설정\n */</span>\n\n<span class=\"nd\">@Configuration</span>\n<span class=\"nd\">@PropertySource</span><span class=\"o\">(</span><span class=\"s\">\"classpath:/application.properties\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DatabaseConfiguration</span> <span class=\"o\">{</span>\n\t<span class=\"nd\">@Autowired</span>\n\t<span class=\"nc\">ApplicationContext</span> <span class=\"n\">applicationContext</span><span class=\"o\">;</span>\n\n\t<span class=\"cm\">/**\n\t * @methodName : hikariConfig\n\t * @author : jaehyun Park\n\t * @date : 2020.10.20\n\t * @description : hikari Connection pool option을 properties에서 가져와 등록.\n\t * @return\n\t */</span>\n\t<span class=\"nd\">@Bean</span>\n\t<span class=\"nd\">@ConfigurationProperties</span><span class=\"o\">(</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s\">\"spring.datasource.hikari\"</span><span class=\"o\">)</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">HikariConfig</span> <span class=\"nf\">hikariConfig</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">HikariConfig</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**\n\t * @methodName : dataSource\n\t * @author : jaehyun Park\n\t * @date : 2020.10.20\n\t * @description : hikari Conntion poll을 이용한 데이터베이스 리소스 객체생성\n\t * @return\n\t * @throws Exception\n\t */</span>\n\t<span class=\"nd\">@Bean</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">DataSource</span> <span class=\"nf\">dataSource</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">DataSource</span> <span class=\"n\">dataSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HikariDataSource</span><span class=\"o\">(</span><span class=\"n\">hikariConfig</span><span class=\"o\">());</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">dataSource</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**\n\t * @methodName : sqlSessionFactory\n\t * @author : jaehyun Park\n\t * @date : 2020.10.20\n\t * @description : Mybatis가 사용할 sqlSessionFactory을 생성한다.\n\t * @param dataSource\n\t * @return\n\t * @throws Exception\n\t */</span>\n\t<span class=\"nd\">@Bean</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">SqlSessionFactory</span> <span class=\"nf\">sqlSessionFactory</span><span class=\"o\">(</span><span class=\"nc\">DataSource</span> <span class=\"n\">dataSource</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">SqlSessionFactoryBean</span> <span class=\"n\">sqlSessionFactoryBean</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SqlSessionFactoryBean</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">sqlSessionFactoryBean</span><span class=\"o\">.</span><span class=\"na\">setDataSource</span><span class=\"o\">(</span><span class=\"n\">dataSource</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">sqlSessionFactoryBean</span><span class=\"o\">.</span><span class=\"na\">setMapperLocations</span><span class=\"o\">(</span><span class=\"n\">applicationContext</span><span class=\"o\">.</span><span class=\"na\">getResources</span><span class=\"o\">(</span><span class=\"s\">\"classpath:/mappers/**/*.xml\"</span><span class=\"o\">));</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">sqlSessionFactoryBean</span><span class=\"o\">.</span><span class=\"na\">getObject</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**\n\t * @methodName : sqlSessionTemplate\n\t * @author : jaehyun Park\n\t * @date : 2020.10.20\n\t * @description : mybatis가 사용할 sessionTemplate의 factory에 sessionFactory를 적용한다.\n\t * @param sqlSessionFactory\n\t * @return\n\t */</span>\n\t<span class=\"nd\">@Bean</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">SqlSessionTemplate</span> <span class=\"nf\">sqlSessionTemplate</span><span class=\"o\">(</span><span class=\"nc\">SqlSessionFactory</span> <span class=\"n\">sqlSessionFactory</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">SqlSessionTemplate</span><span class=\"o\">(</span><span class=\"n\">sqlSessionFactory</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>이 클래스가 하는 일은 아래와 같습니다.</p>\n<ul>\n  <li>hikari connection pool을 이용하여 DataSource 설정하기</li>\n  <li>SqlSessionFacotry 빈 등록 (datasource와 매퍼xml 파일의 위치를 설정)</li>\n  <li>SqlSessionTemplate 빈 등록</li>\n</ul>\n\n<p>이제 스프링부트가 실행될때 이 configuration 클래스를 스캔하고, 우리가 @Bean 어노테이션을 통해 선언해준 빈들이 spring bean container에 등록되어 사용됩니다.</p>\n\n<p><strong>3. sqlSessionTemplate 이 뭘까요?</strong><br />\nSqlSessionTemplate은 마이바티스 스프링 연동모듈의 핵심입니다.\nSqlSessionTemplate은 SqlSession을 구현하고 코드에서 SqlSession를 대체하는 역할을 한다. SqlSessionTemplate 은 쓰레드에 안전하고 여러개의 DAO나 매퍼에서 공유할수 있습니다.</p>\n\n<p>SQL을 처리하는 마이바티스 메서드를 호출할때 SqlSessionTemplate은 SqlSession이 현재의 스프링 트랜잭션에서 사용될수 있도록 보장합니다. 추가적으로 SqlSessionTemplate은 필요한 시점에 세션을 닫고, 커밋하거나 롤백하는 것을 포함한 세션의 생명주기를 관리합니다. 또한 마이바티스 예외를 스프링의 DataAccessException로 변환하는 작업또한 처리합니다.</p>\n\n<p>SqlSessionTemplate은 생성자 인자로 SqlSessionFactory를 사용해서 생성될 수 있습니다.</p>\n\n<h3 id=\"4-databasemappersxmldtomapper-interface-만들기\">4. Database,Mappers.xml,DTO,Mapper interface 만들기</h3>\n<p>-<strong>1.Database table 만들기</strong><br />\n테스트에 사용한 테이블의 형태는 다음과같습니다.</p>\n\n<p><img src=\"/img/2020_10_21_data.png\" width=\"700\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<p><br /></p>\n\n<p>-<strong>2. Mapper.xml 구현하기</strong><br />\n앞전에 Configuration을 통해 resources/mappers/<em>*/</em>.xml 경로의 파일들을 mapper 파일로 볼 수 있게 설정해두었으니 동일한 위치에 디렉토리를 생성해주고 xml 파일을 만들어 작성해줍니다.</p>\n\n<p><img src=\"/img/2020_10_21_explorer.png\" width=\"400\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /> <br /></p>\n\n<p>저는 MemberMapper.xml 이라는 파일명으로 맵퍼 xml을 구성했습니다.</p>\n\n<ul>\n  <li>MemberMapper.xml</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\n<span class=\"nt\">&lt;mapper</span> <span class=\"na\">namespace=</span><span class=\"s\">\"com.jaehyun.authapp.dao.MemberMapper\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"c\">&lt;!-- 아이디 기반 회원정보검색 --&gt;</span>\n\t<span class=\"nt\">&lt;select</span> <span class=\"na\">id=</span><span class=\"s\">\"findByUserName\"</span> <span class=\"na\">parameterType=</span><span class=\"s\">\"String\"</span>\n\t\t<span class=\"na\">resultType=</span><span class=\"s\">\"com.jaehyun.authapp.dto.Member\"</span><span class=\"nt\">&gt;</span>\n    \t <span class=\"cp\">&lt;![CDATA[\n    \tselect * \n    \tfrom member\n    \twhere username=#{username}\n    ]]&gt;</span>\n\t<span class=\"nt\">&lt;/select&gt;</span>\n\t<span class=\"nt\">&lt;select</span> <span class=\"na\">id=</span><span class=\"s\">\"getAuthorities\"</span> <span class=\"na\">parameterType=</span><span class=\"s\">\"String\"</span>\n\t\t<span class=\"na\">resultType=</span><span class=\"s\">\"String\"</span><span class=\"nt\">&gt;</span>\n\t\t<span class=\"cp\">&lt;![CDATA[\n\t\t\tSELECT memberAuthorities \n\t\t\tFROM authority WHERE \n\t\t\tusername = #{username}\n\t\t]]&gt;</span>\n\t<span class=\"nt\">&lt;/select&gt;</span>\n<span class=\"nt\">&lt;/mapper&gt;</span>\n</code></pre></div></div>\n\n<p>-<strong>3. Member DTO 구현하기</strong>\nMybatis를 이용해 결과를 받을 DTO를 생성합니다. lombok을 이용하였습니다.\nspring security를 이용하지 않았다면 용도에맞게 일반적인 DTO를 만들어 사용하시면 됩니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**  \n* @packageName : com.jaehyun.authapp.dto\n* @fileName\t   : Member.java\n* @author \t   : parkjaehyun\n* @date \t   : 2020.10.21\n* @description : Spring Security UserDetails interface를 구현한 회원 UserDetails 클래스\n* ============================================================================\n* DATE       \t   AUTHOR  \t       NOTE\n* ----------------------------------------------------------------------------\n* 2020.10.21       parkjaehyun     최초생성\n*/</span> \n<span class=\"nd\">@ToString</span>\n<span class=\"nd\">@Setter</span>\n<span class=\"nd\">@Getter</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Member</span> <span class=\"kd\">implements</span> <span class=\"nc\">UserDetails</span><span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">long</span> <span class=\"n\">serialVersionUID</span> <span class=\"o\">=</span> <span class=\"mi\">1L</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">nickname</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isAccountNonExpired</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isAccountNonLocked</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isCredentialsNonExpried</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isEnabled</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">Collection</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"nc\">GrantedAuthority</span><span class=\"o\">&gt;</span> <span class=\"n\">authorities</span><span class=\"o\">;</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Collection</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"nc\">GrantedAuthority</span><span class=\"o\">&gt;</span> <span class=\"nf\">getAuthorities</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">authorities</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getPassword</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getUsername</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAccountNonExpired</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">isAccountNonExpired</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAccountNonLocked</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">isAccountNonLocked</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isCredentialsNonExpired</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">isCredentialsNonExpried</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isEnabled</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">isEnabled</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>-<strong>4. Member Mapper interface 구현하기</strong>\nMybatis는 @Mapper 어노테이션을통해 interface 형태로 맵퍼를 이용할 수 있으며, mybatis에서 이를 해석하고 자연스럽게 DTO에 매칭해주게 됩니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n* @packageName : com.jaehyun.authapp.mappers\n* @fileName\t   : MemberMapper.java\n* @author \t   : parkjaehyun\n* @date \t   : 2020.10.21\n* @description : Mybatis를 이용한 회원 Mapper 클래스\n* ============================================================================\n* DATE       \t   AUTHOR  \t       NOTE\n* ----------------------------------------------------------------------------\n* 2020.10.21       parkjaehyun     최초생성\n*/</span> \n<span class=\"nd\">@Mapper</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">MemberMapper</span> <span class=\"o\">{</span>\n\t<span class=\"cm\">/**\n\t * @methodName  : findByUserName\n\t * @author      : jaehyun Park\n\t * @date        : 2020.10.21\n\t * @description : 회원 조회(아이디기반)\n\t * @param username\n\t * @return\n\t */</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Member</span> <span class=\"nf\">findByUserName</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">username</span><span class=\"o\">);</span>\n\t<span class=\"cm\">/**\n\t * @methodName  : joinMember\n\t * @author      : jaehyun Park\n\t * @date        : 2020.10.21\n\t * @description : 회원가입 \n\t * @param member\n\t * @return\n\t */</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">joinMember</span><span class=\"o\">(</span><span class=\"nc\">Member</span> <span class=\"n\">member</span><span class=\"o\">);</span>\n\t\n    <span class=\"cm\">/**\n     * @methodName  : readAuthority\n     * @author      : jaehyun Park\n     * @date        : 2020.10.21\n     * @description : 해당 유저의 권한을 모두 가져온다.\n     * @param username\n     * @return\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getAuthorities</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">username</span><span class=\"o\">);</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"mybatis의-mapper와-dao는-같은-행위를-하고있는데요\">MyBatis의 Mapper와 DAO는 같은 행위를 하고있는데요?</h4>\n\n<p>제가 구글링하면서 불편함을 많이 느꼇던 부분이 바로 이부분입니다.\n많은 예제들이 DAO와 Mapper interface를 별개로 분류하고 <strong>DAO에서 Mapper 인터페이스를 물고 이용하는 방식</strong>으로 구성되어 있었습니다.</p>\n\n<p>하지만 자세히 생각해보면 DAO 계층과 Mapper interface의 행위와 책임은 거의 같습니다. \nMybatis가 SqlSession을 이용해 DataBase에 Access하는 행위를 하고있고, 기존에 생성되어있는 DAO에서 또한 그런 행위에 대한 책임만을 가지고있습니다. Mybatis는 DAO에서 하는 작업을 XML을 이용하여 한번더 나누었고, 인터페이스를 통해 전반적인 구현, 실행의 책임을 Mybatis core에 맡겼을 뿐입니다. 저는 그래서 DAO와 Mapper계층의 공존이 정상적이지 않다고 생각합니다.</p>\n\n<h3 id=\"5-junit을-이용해-정상적인-연동이-되었는지-확인하기\">5. JUnit을 이용해 정상적인 연동이 되었는지 확인하기</h3>\n<p>우선 연동을 확인하기 위해 만들어볼 코드가 있습니다.\n저는 Member라는 DTO 를 만들어 사용할 예정이며, Spring security를 함께 사용하고 있기 때문에 DTO 클래스가 복잡하네요 :(\n<img src=\"/img/2020_10_21_member.png\" width=\"500\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" />\n<br /></p>\n\n<p>-<strong>1. Mapper interface 이용해 정상적인 값을 가지고오는지 확인하기</strong></p>\n\n<p>JUnit5를 이용하여 테스트해봅니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@SpringBootTest</span>\n<span class=\"kd\">class</span> <span class=\"nc\">MemberMapperTest</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Logger</span> <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"nc\">LoggerFactory</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">(</span><span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n\t<span class=\"nd\">@Autowired</span>\n\t<span class=\"nc\">MemberMapper</span> <span class=\"n\">mapper</span><span class=\"o\">;</span>\n\t<span class=\"nd\">@Test</span>\n\t<span class=\"nd\">@DisplayName</span><span class=\"o\">(</span><span class=\"s\">\"맵퍼 회원이름 조회 테스트케이스\"</span><span class=\"o\">)</span>\n\t<span class=\"kt\">void</span> <span class=\"n\">회원이름으로_조회_잘되는지</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">findByUserName</span><span class=\"o\">(</span><span class=\"s\">\"admin\"</span><span class=\"o\">);</span>\n\t\t <span class=\"nc\">Member</span> <span class=\"n\">member</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">findByUserName</span><span class=\"o\">(</span><span class=\"s\">\"admin\"</span><span class=\"o\">);</span>\n\t\t <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t <span class=\"n\">assertTrue</span><span class=\"o\">(</span><span class=\"s\">\"admin\"</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"na\">getUsername</span><span class=\"o\">()));</span>\n\t\t <span class=\"n\">assertTrue</span><span class=\"o\">(</span><span class=\"s\">\"admin\"</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"na\">getNickname</span><span class=\"o\">()));</span>\n\t\t <span class=\"n\">assertTrue</span><span class=\"o\">(</span><span class=\"s\">\"admin\"</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"na\">getPassword</span><span class=\"o\">()));</span>\n         <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>-<strong>2. 결과</strong></p>\n\n<p><img src=\"/img/2020_10_21_junit.png\" width=\"700\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" />\n<br /></p>\n\n<p>테스트가 정상 통과되었고 원하는대로 잘 나와주었습니다.</p>","excerpt":"구글링해서 나온 Spring Boot + MyBatis 연동 예제는 legacy 코드가 너무 많았다.\nSpringBoot 와 mybatis를 연동해서 토이프로젝트를 진행하는 도중에 구글링을 여러번 하면서 다양한분들의 예제코드를 많이 봤다. 하지만 최근에 올라온 글임에도 불구하고 legacy 코드를 그대로 사용 하시는 분들도 있는걸 많이 보았고, 개개인의 주관이 없다고 느껴졌다. 그 판단이 틀리던 맞던 자기 주관이 있어야 고칠수있다고 생각한다. 나는 연동부분을 간단하게 테스트해보며 어떻게 사용하는게 맞는지 적어보려고 한다.","languages":null,"categories":["posts"],"tags":["Spring"]},{"title":"주니어 개발자의 마이크로서비스(MSA) 이해하기","permalink":"https://jaehyunup.github.io/microservice_understand.html","link":"https://jaehyunup.github.io/microservice_understand.html","date":"2020-09-07T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"들어가는글\">들어가는글</h2>\n<p>마이크로 서비스에 대해 잘 알고있다고 생각했지만, 다른사람들에게 정확하게 설명하지 못할것 같아 좀 더 확실한 개념 정립을 하기위해 쓰는 글</p>\n\n<h2 id=\"마이크로-서비스-아키텍쳐--msa의-등장배경\">마이크로 서비스 아키텍쳐- MSA의 등장배경?</h2>\n<p>SW가 발달하면서, SW 시스템의 규모가 더욱 더 커져가기 시작했습니다.</p>\n\n<p>우리보다 한 세대 앞서 개발했던 선대 개발자들은 시스템의 규모가 갑자기 커져가면서 직면했던 많은 문제들에 대해 해결방법을 찾으려고 노력하고 이를 전파했습니다.</p>\n\n<p>즉 SW 설계에서 아키텍쳐나, 자주 발생하는 문제들에 대해 디자인패턴을 정의하여 앞으로 그 실수를 다시 반복하지 않도록, 비슷한 상황에서 발생할수 있는 문제들에 대해서 미리 파악할 수 있게끔 고맙게도 우리에게 전달해준 것이죠.\n그 중 MSA는 효율적인 소프트웨어 아키텍쳐에 관해 개발자들이 함께 고민하고 해결 해나간 발자취중 하나라고 볼 수 있습니다.</p>\n\n<p>80~90년대부터 시스템의 규모가 커져가면서, SW를 설계 구조를 정의하는것에 대한 중요성이 대두되어지며, 소프트웨어의 구조를 정의하는 소프트웨어 아키텍쳐라는 개념이 생겨나기 시작했습니다. 그 발자취부터 한번 알아보겠습니다.</p>\n\n<h2 id=\"소프트웨어-아키텍쳐의-종류\">소프트웨어 아키텍쳐의 종류</h2>\n<p>MSA 외에도 소프트웨어 아키텍쳐는 여러가지 존재합니다. MSA가 가장 좋은것이 아니라, 각 아키텍쳐마다 장단점이 있다고 할 수 있습니다.\n규모가 작은 프로그램에서는 모노리스 아키텍쳐가 더 효율적일수 있다는거죠!</p>\n\n<ol>\n  <li>모노리스 아키텍쳐</li>\n  <li>SOA</li>\n  <li>MSA</li>\n</ol>\n\n<p>이제는 클라우드 환경이 신뢰도가 높아진 현재에는 서버리스 아키텍쳐가 대두되어지고 있긴 합니다만, 이 글에서는 MSA까지의 단계만 다루어 보려고 합니다.</p>\n\n<h2 id=\"msa는-왜-등장-했는가\">MSA는 왜 등장 했는가?</h2>\n<p>마이크로 서비스 아키텍쳐의 등장 배경에 대해 이해하려면 그 전에 SOA(Service Oriented Architecture)와 모노리식 아키텍쳐(Monolithic Architecture) 에 대해 이해하고, MSA가 두 아키텍쳐에 비해 어떤 장점을 가질 수 있었는지 알아봐야만 합니다.<br />\n<br /></p>\n\n<blockquote>\n  <h1 id=\"1-soaservice-oriented-architecture\">1. SOA(Service Oriented Architecture)</h1>\n  <hr />\n  <p>SOA는 서비스 지향 아키텍쳐라고 불립니다.</p>\n</blockquote>\n\n<p>기존 애플리케이션의 기능을 비즈니스 도메인을 가지는 기능 단위로 분리하고, 이를 표준화된 호출 인터페이스를 통해 작은 서비스 단위로 재 조합하는 방식의 아키텍쳐입니다.<br />\n맞습니다, OOP 공부하신분이라면 자주 들었을 법한 모듈화의 개념을 비즈니스 도메인에 따라 적용한것입니다. 즉, 회사 내에서 기능 단위로 행위들을 모듈화하여 하나의 레고블럭(인터페이스)처럼 모듈화 시켜, 어디서든 끼워넣으면 빠르게 작동할 수 있게 만드는 아키텍쳐입니다.</p>\n\n<p>레고블럭은 삼각형, 사각형, 원형, 나무, 사람, … 등 각종 기본 객체가 다수 들어 있는데 표준 원칙(비즈니스 로직)에 따라 접속부를 정교하게 만들었기 때문에 여러 개를 조합하여 새로운 장남감을 쉽고, 빠르게 만들 수 있습니다. 그것도 기본 모형만 있는 것이 아니라 자동차, 비행기, 로봇트 등을 만들 수 있는 복잡한 모형도 조합되도록 준비되어 있습니다.</p>\n\n<p>이 레고블럭(인터페이스)가 합쳐져서 만들어진 서비스는 재사용을 위해 공개되어 있기 때문에 차후 개발에서는 그 부분의 개발이 필요 없어 개발 기간을 단축시키고, 개발 오류를 현저히 감소시킬 수 있다는 장점이 있습니다. 하지만 비즈니스 도메인은 각 회사마다 달라질 수 있겠죠?\n이는 즉, A라는 회사의 SOA를 B회사의 SOA에 접목시킬 수 없다는 말입니다.</p>\n\n<p>즉, 각 회사마다 인터페이스가 달라서, 한 비즈니스도메인(회사) 내에 국한되어진다는 단점이 있습니다.</p>\n\n<h5 id=\"참고자료\">참고자료</h5>\n<ul>\n  <li>\n    <h5 id=\"soa-service-oriented-architecture-개념-이해하기\"><a href=\"https://blog.naver.com/atweb/10092816348\">SOA (Service Oriented Architecture) 개념 이해하기</a></h5>\n  </li>\n  <li>\n    <h5 id=\"조대협님-의-what-is-soa-how-to-soa\"><a href=\"https://bcho.tistory.com/48\">조대협님 의 What is SOA? How to SOA?</a></h5>\n    <p><br /></p>\n  </li>\n</ul>\n\n<blockquote>\n  <h1 id=\"2-monolithic-architecture\">2. Monolithic Architecture</h1>\n  <hr />\n  <p>Monolith, 단단하고 끈끈하게 묶여있는.<br />\n풀어 말해 결합도가 높은 시스템 아키텍쳐를 말합니다.<br />\n규모가 작은 프로젝트에서 자주 사용되어집니다.</p>\n</blockquote>\n\n<p><img src=\"https://github.com/jaehyunup/jaehyunup.github.io/blob/master/img/mono_arc.jpeg?raw=true\" width=\"80%\" style=\"display:block;margin-left:auto;margin-right:auto;\" /></p>\n\n<h5 id=\"이미지-출처\"><a href=\"https://medium.com/koderlabs/introduction-to-monolithic-architecture-and-microservices-architecture-b211a5955c63\">이미지 출처</a></h5>\n\n<p>모노리스 아키텍쳐는 일반적으로 위와같은 형태로 구성되어집니다.</p>\n\n<p>이것이 나쁘다는것은 아닙니다, 하지만 시스템의 규모가 커져가면서 유지보수에 대한 이슈가 더욱 더 많이 발생할 여지가 많아지기 때문에 모노리스 아키텍쳐로 설계된 시스템은 유지보수 비용이 다소 많이 들고, 자주 바뀌는 트래픽에 대한 대처가 쉽지 않은등 다양한 “불편함”이 존재합니다.</p>\n\n<p>시스템이 점점 더 커지는것이 필수 불가결로 여겨지는 요즘, 국내 기업들도 Digital Transformation 이라는 슬로건을 앞세우고 앞다퉈 기존 시스템들을 MSA 아키텍쳐로 변환하려는 노력을 하고 있습니다.</p>\n\n<p>그렇다면 Monolithic 아키텍쳐에서 발생하는 문제점은 무엇인지 알아보기위해 <a href=\"https://www.youtube.com/watch?v=CZ3wIuvmHeM\">넷플릭스가 모노리식에서 마이크로서비스로 변해가는 과정과 MSA 적용 후 발생한 문제점들을 개선하고 아키텍쳐를 더 발전시켜나가는 과정에 관한 발표</a> 를 예시로 들어보려합니다.</p>\n\n<p><img src=\"https://github.com/jaehyunup/jaehyunup.github.io/blob/master/img/ma_arc.png?raw=true\" width=\"80%\" style=\"display:block;margin-left:auto;margin-right:auto;margin-top:5%; margin-bottom:5%\" /></p>\n\n<p>넷플릭스는 기존에 전형적인 형태의 아키텍쳐를 사용했다고 합니다. 웹서버와,어플리케이션 서버에서 로직을 처리하고, Jdbc를 이용해 Oracle DB에 연결되어있는 형태의 아키텍쳐이죠.</p>\n\n<p>이때 아래와 같은 문제가 발생했다고 합니다.</p>\n\n<h4 id=\"1-문제-또는-변경사항이-발생되었을때-버그를-찾기가-힘들었다는-점\">1. 문제 또는 변경사항이 발생되었을때 버그를 찾기가 힘들었다는 점.</h4>\n<p>자바로 작성된 기반 코드가 매주 배포되는 하나의 코드베이스에 적용되어지고, 코드의 복잡도는 점점 더 늘어나게 되었다.</p>\n\n<h4 id=\"2-메모리-누수가-일어나는-성능이-느려지는-코드를-찾아내기가-힘들었다는-점\">2. 메모리 누수가 일어나는, 성능이 느려지는 코드를 찾아내기가 힘들었다는 점.</h4>\n<p>코드 복잡도가 늘어나니 성능저하를 일으키는 코드나 메모리를 과도하게 사용하는 코드를 찾기가 힘들었다.</p>\n\n<h4 id=\"3-메인-데이터베이스가-다운되면-모든-작업이-불가능했다즉-db의존도가-매우-컷다\">3. 메인 데이터베이스가 다운되면 모든 작업이 불가능했다.즉, DB의존도가 매우 컷다</h4>\n<p>STORE 데이터베이스라고 하는 하나의 큰 Oracle DB를쓰는 하드웨어가 다운되었을때 모든것이 작동이 불가능했고, 또한 지속적으로 커져가는 DB를 감당하기 위해 이를 감당할 수 있는 매년 더 비싼 비용의 하드웨어를 새로 구매해야했다. \n그리고 애플리케이션 내에는 테이블 스키마를 요청하는 코드가 매우 많았으며, 테이블에 열을 추가하는 것도 고려할 사항이 엄청나게 많아지게 되었다.</p>\n\n<p>위와같은 문제는 넷플릭스의 엔지니어들을 고통에 빠지게 했습니다. 그래서 MSA를 도입했다고 합니다.</p>\n\n<p>이외에도 알려진 모노리식 아키텍쳐의 문제점들은 꽤 많이 있습니다. 하지만 규모가 작은 시스템에서는 발생하지 않는 문제일 수 있습니다. 즉, 마냥 나쁜 아키텍쳐는 아니지만 시스템 확장성을 고려해서 좋은 아키텍쳐는 아닐 수 있다는 것을 알아야만 합니다.</p>\n\n<blockquote>\n  <h1 id=\"msa---micro-service-architecture\">MSA - Micro Service Architecture</h1>\n  <hr />\n  <p>드디어 본론입니다. MSA는 무엇일까요? 어떤 장점들이 있길래 다들 강조하는것일까요?</p>\n</blockquote>\n\n<p>2013년말, 마틴 파울러는 마이크로서비스에 대한 명확한 정의가 없다는 우려가 생겨 제임스 루이스씨와 함께 마이크로 서비스에대한 확고한 정의를 내렸고 현장에서 직접 겪었던 마이크로서비스 아키텍쳐의 공통 특성을 나열하여 정리하였습니다. 관심있으신 분들은 <a href=\"https://martinfowler.com/articles/\">마틴 파울러님의 블로그</a>에서 마이크로서비스를 더 깊이 알 수 있습니다.</p>\n\n<p>아래는 MSA에 대해 정의한 대표 주자 마틴 파울러 (Martin Fowler)님의 간단한 정의입니다.</p>\n\n<blockquote>\n  <p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies  - James Lewis and Martin Fowler (2014)</p>\n</blockquote>\n\n<blockquote>\n  <p>마이크로 서비스 아키텍쳐는, 단일 애플리케이션을 소규모 서비스 단위로 구분하여 개발하는 접근방식으로 각각 자체의 프로세스에서 실행되고, 경량 매커니즘(http resource API과 같은) 과 통신합니다. 이 작은 단위의 서비스를 구분하는 것은, 비즈니스 로직을 중심으로 하며 독립적으로 배치 가능한 완전 자동화된 배포가 이루어져야 합니다. (생략)</p>\n</blockquote>\n\n<p>말로 하니까 매우 어렵습니다, 뭔가 나눈다는것은 SOA랑 비슷한것 같고, 모놀리식 내부에서도 나눌수 있지 않습니까? 근데 저 말에는 한가지 키포인트가 있습니다.</p>\n\n<p><em>각각 자체의 프로세스에서 실행되고, 경량 매커니즘(http resource API과 같은)과 통신합니다.</em></p>\n\n<p>그림으로 단번에 이해해볼까요?</p>\n\n<h2 id=\"모노리스-아키텍쳐\">모노리스 아키텍쳐</h2>\n<p><img src=\"https://github.com/jaehyunup/jaehyunup.github.io/blob/master/img/mono_1.png?raw=true\" width=\"80%\" style=\"display:block;margin-left:auto;margin-right:auto;margin-top:5%; margin-bottom:5%\" />\n<br /></p>\n\n<h2 id=\"마이크로서비스-아키텍쳐\">마이크로서비스 아키텍쳐</h2>\n<p><img src=\"https://github.com/jaehyunup/jaehyunup.github.io/blob/master/img/msa_2.png?raw=true\" width=\"80%\" style=\"display:block;margin-left:auto;margin-right:auto;margin-top:5%; margin-bottom:5%\" /></p>\n\n<h5 id=\"모놀리식-아키텍쳐와-마이크로서비스-아키텍쳐-사진-원본-글\"><a href=\"http://khoadinh.github.io/2015/05/01/microservices-architecture-overview.html\">모놀리식 아키텍쳐와 마이크로서비스 아키텍쳐 사진 원본 글</a></h5>\n\n<p>위 그림에서 단번에 알아볼 수 있는것은 서비스들이 여러개의 작은 서비스로 분리되었고, API 게이트웨이가 서비스와 통신하게 됩니다. 예를들어 결제,재고관리,검색 서비스가 하나로 통합되어있다가, 별도의 서비스로 나누어 동작하게 된것입니다.그리고 서비스별로 별도의 DB구성을 통해 DB 의존도도 낮추게 되었죠.</p>\n\n<p>즉, 마이크로서비스의 도입을 통해 넷플릭스가 모놀리식 아키텍쳐에서 발생했던 문제점들이 해결될 수 있게 되었습니다, 코드베이스가 하나로 되어있어서 코드 간 의존도가 매우 높았던 점. 단일 DB를 이용했기때문에 유지보수, 그리고 DB의존도가 매우 높았던 점 등등 위에서 발견했던 모놀리식 아키텍쳐의 문제점들을 효과적으로 해결 해 나갈 수 있다는 것을 알게됩니다.</p>\n\n<p>하지만 마냥 좋은것만은 아닙니다.<br />\n마이크로 서비스는 득과 실,즉 trade off가 존재합니다.</p>\n\n<h3 id=\"마이크로-서비스를-접목했을때의-장점\">마이크로 서비스를 접목했을때의 장점</h3>\n<ul>\n  <li>\n    <p>강력한 모듈화, 그리고 경계 : 마이크로 서비스는 대규모 팀에 특히 중요한 모듈 구조를 강화함으로써 서비스간 경계가 확실해집니다. 이는 서비스 코드간 의존도를 낮출 수 있습니다.</p>\n  </li>\n  <li>\n    <p>독립 배포 : 단순한 서비스는 배포하기가 더 쉽고 자율적이므로 잘못되었을 때 시스템 오류를 일으킬 가능성이 적습니다.</p>\n  </li>\n  <li>\n    <p>기술 다양성 : 마이크로 서비스를 통해 여러 언어, 개발 프레임 워크 및 데이터 스토리지 기술을 혼합 할 수 있습니다.</p>\n  </li>\n</ul>\n\n<h3 id=\"하지만-마이크로-서비스를-감당하기위해서는-아래와-같은-비용이-필요합니다\">하지만 마이크로 서비스를 감당하기위해서는 아래와 같은 비용이 필요합니다.</h3>\n<ul>\n  <li>\n    <p>배포 측면 : 원격 호출이 느리고 항상 실패 할 위험이 있으므로 분산 시스템은 프로그래밍하기가 더 어렵습니다.</p>\n  </li>\n  <li>\n    <p>결과적 일관성 측면 : 분산 시스템에서 강력한 일관성을 유지하는 것은 매우 어렵습니다. 즉, 모든 사람이 결과적 일관성을 관리해야합니다.</p>\n  </li>\n  <li>\n    <p>운영 복잡성 측면 : 정기적으로 재배포되는 많은 서비스를 관리하려면 성숙한 운영 팀이 필요합니다.</p>\n  </li>\n</ul>\n\n<p>위와같이 마이크로서비스의 장점과, 이를 감당하기위한 비용이 함께 따라오게 됩니다. 즉 이를 잘 접목시켜서 활용할 수 있을때에 마이크로서비스를 접목시켜야 좋은것이라고 알수 있습니다.</p>\n\n<p>그래서 마이크로서비스와 함께 Devops의 중요성이 부각되어지고 있는 것이겠지요.</p>\n\n<h2 id=\"마치며\">마치며</h2>\n<p>이번 글에서는 마이크로서비스를 왜 사용하는지, 어떤 장점이 있는지 간단하게 알아보았습니다.<br />\n다음 글에서는 마이크로서비스는 어떻게 구현되어 지는지 더 자세히 알아보려합니다.</p>","excerpt":"들어가는글\n마이크로 서비스에 대해 잘 알고있다고 생각했지만, 다른사람들에게 정확하게 설명하지 못할것 같아 좀 더 확실한 개념 정립을 하기위해 쓰는 글","languages":null,"categories":["posts"],"tags":["Development"]},{"title":"자바 짧은 팁","permalink":"https://jaehyunup.github.io/java_interesting.html","link":"https://jaehyunup.github.io/java_interesting.html","date":"2020-08-19T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p># Study - 알쓸신잡</p>\n\n<h3 id=\"1--boolean-byteshort-int-long-float-double-char-등등의-java-primitive-type들은-값의-범위가-정해져있다-그렇다면-메모리를-효율적으로-사용하기-위해-size에-맞는-primitive-type을-고민하여-써야할까-ex--22-정수를-저장하기위해-byte형을-사용-해야하나\">1 . boolean, byte,short, int, long, float, double, char 등등의 java primitive type들은 값의 범위가 정해져있다. 그렇다면 메모리를 효율적으로 사용하기 위해 size에 맞는 primitive type을 고민하여 써야할까? ex) -2~2 정수를 저장하기위해 byte형을 사용 해야하나?</h3>\n\n<p>NO, JVM의 default type은 integer 이기 때문에 오히려 JVM이 더 많은 일을 할수있는 여지를 줄 수도 있다.</p>\n\n<h3 id=\"2-java-의-type\">2. java 의 type</h3>\n<p>JVM의 Memory allocation &amp; management 이용 primitive type은 정해진 메모리를 할당받고 reference type은 가변적으로 메모리를 할당받는다.</p>\n\n<h3 id=\"3-다음-코드에서-잘못된-것은\">3. 다음 코드에서 잘못된 것은?</h3>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"o\">;</span>\n<span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">;</span>\n</code></pre></div></div>\n\n<p>명시적 type casting이 필요하다. 이때, 큰 type 에서 작은 type 으로 변수를 할당한다면 값의 손실이 일어날 수 있다.<br />\n<strong>큰 type &lt;- 작은type</strong> : 자동 형변환<br />\n<strong>작은 type &lt;- 큰type</strong>: 오류, 명시적 형변환(type casting)이 필요</p>\n\n<h3 id=\"4-자바-byte-메모리가-다음과-같다-했을때-해당되는-숫자는\">4. 자바 byte 메모리가 다음과 같다 했을때 해당되는 숫자는?</h3>\n<center>| 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | </center>\n\n<p>-128 + 1 = 127  JVM이 음수를 표현하는 방식은 다음과 같다.왼쪽 첫번째 비트는 부호비트로, 1일때 -128에 나머지 7자리의 비트의 절대값을 더해줘서 음수를 연산하는 방식이다</p>\n\n<h3 id=\"5-비트연산자\">5. 비트연산자</h3>\n\n<p>비트연산자는 *,/ 연산자에비해 처리속도가 아주 빠르기때문에 속도나 성능면에서 critical한 문제가 일어났을때 사용할 법 하다.</p>\n\n<h3 id=\"6-eclipse-ide-의-클래스-관리\">6. Eclipse IDE 의 클래스 관리</h3>\n<p>eclipse 에서는 패키지명.class명 으로 관리하기 때문에, 물리적으로 다른 디렉토리에 있더라도 상위 패키지명이 같다면 결국 binary file화 되었을때는 같은 패키지 공간에 존재하는 클래스가 된다.</p>\n\n<h3 id=\"7-논리연산자-하나와-두개의-차이는-뭘까\">7. 논리연산자. 하나와 두개의 차이는 뭘까?</h3>\n<p>여러개의 논리를 엮을때 쓰는 논리연산자는 한개와 두개가 있다  &amp;(and), |(or) 와 &amp;&amp;(and) , ||(and) 는 비슷하게 생겼는데 왜 별도로 분리되어 있을까?<br />\n답은 어디까지 연산하느냐의 차이이다.</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>&amp; 와</td>\n      <td>같이 하나만 있는 논리연산자를 썻을때는 여러개의 조건중에 부합하는것이 있더라도 연산을 멈추지 않고 끝까지 조건을 탐색한다.</td>\n    </tr>\n  </tbody>\n</table>\n\n<table>\n  <tbody>\n    <tr>\n      <td>하지만 &amp;&amp; 과</td>\n      <td> </td>\n      <td>같이 두번붙혀 쓰는 연산자는 여러개의 조건중에서 조건에 부합하는 분기가 나왔을때 연산을 멈추고 다음 로직을 실행하게 된다.</td>\n    </tr>\n  </tbody>\n</table>\n\n<table>\n  <tbody>\n    <tr>\n      <td>&amp;와</td>\n      <td>를 함부로 남발한다면 성능을 저하 시킬 수 있는 요인이 될 수 있을거라 생각한다.(개인 의견)</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"8-switch-문에는-double-형을-사용할-수-없다\">8. Switch 문에는 Double 형을 사용할 수 없다.</h3>\n<p>예전부터 있지않았던 근-본 없는 double 형은 switch 문에 지원 되지 않는다.\n근데 왜 String은 지원하게 해줬는데(Version 7 부터 지원) Double은 왜 안해줬지? 불쌍한 친구다.</p>\n\n<h3 id=\"9-스택이-이용되는-대표적인-예로는-로컬변수-선언과-함수메소드콜-이-있다\">9. 스택이 이용되는 대표적인 예로는 로컬변수 선언과 함수(메소드)콜 이 있다.</h3>\n\n<h3 id=\"10-잘못된-코딩-습관-바로잡기\">10. 잘못된 코딩 습관 바로잡기</h3>\n<p>많은 사람들이 이런 스타일로 코딩을 하고있다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">&gt;</span><span class=\"mi\">2</span><span class=\"o\">){</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"높습니다\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"k\">else</span><span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"낮습니다\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>if 분기가 결정하는 부분은 System.out.prinln() 메서드를 실행 하냐 , 마냐가 아니라 Print 메소드 자체는 실행되면서 내부의 값만 바뀌는 것이다.</p>\n\n<p>즉 메소드의 실행은 무조건 한다는 것이기 때문에 이를 더 깔끔하게 만들 수 있는 좋은 코드 작성방식은 아래와 같다</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">String</span> <span class=\"n\">str</span><span class=\"o\">=</span><span class=\"s\">\"\"</span>\n<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">&gt;</span><span class=\"mi\">2</span><span class=\"o\">){</span>\n    <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"높습니다\"</span>\n<span class=\"o\">}</span>\n<span class=\"k\">else</span><span class=\"o\">{</span>\n    <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"낮습니다\"</span>\n<span class=\"o\">}</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h3 id=\"11-힙과-스택\">11. 힙과 스택</h3>\n<p>코드에서 선언되어진 local variable은 스택에 저장된다. 이때, 명시적으로 값이 지정된(ex.상수 리터럴) Value type 이라면 값을 직접 가지고있고, 만약 가변적인 값이라면(new Array) Reference type이라 하고 가변적인 메모리공간을 가지는\n힙이라는 공간에 값을 할당하고, 그 힙 공간의 주소값을 가지고있는다.</p>\n\n<p><strong>상수 리터럴 타입을 선언하면 처음에 힙공간에 할당되고 나중에 또 사용되면\n같은 주소값을 가지기때문에 성능에 유리할 수 도 있다</strong></p>\n\n<h3 id=\"12-string-변수-값의-할당에-대한-이야기\">12. String 변수 값의 할당에 대한 이야기</h3>\n<p>JAVA에서 String형에 만약 “aaa”라는 문자열을 할당했다면 우선 힙에 만들어진 String constant pool(문자열 사전?해시테이블? 같은 거라고 생각하면 될것같다) 에서 찾아보고, 이 값이 없다면 pool에 새로 할당한다. 그다음 선언된 변수의 value가 constant pool에서 “aaa”라는 문자열을 가지는\n는 주소값을 가르키게 된다.</p>\n\n<p>내부적으로 String 클래스의 구현을 살펴보면 intern() 이라는 메소드를 이용해 pool 을 살펴보는 과정이 구현되어있다.</p>\n\n<p>그래서 아래와 같은 코드에서 String 객체간의 값을 == 연산을 통해 주소값을 비교하는데도 true라는 결과를 받아볼수 있는것이다. (pool 에서 해당하는 주소값이 같기 때문에)</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">String</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">\"aaa\"</span><span class=\"o\">;</span>\n<span class=\"nc\">String</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">\"aaa\"</span><span class=\"o\">;</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"true\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"false\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">True</span>\n</code></pre></div></div>\n\n<h3 id=\"13-reference-type은-4byte의-공간을-할당받는다\">13. reference type은 4byte의 공간을 할당받는다.</h3>","excerpt":"# Study - 알쓸신잡","languages":null,"categories":["posts"],"tags":["Java"]},{"title":"자료구조 기본","permalink":"https://jaehyunup.github.io/datastructure.html","link":"https://jaehyunup.github.io/datastructure.html","date":"2020-08-19T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h1 id=\"data-structure\">Data structure</h1>\n\n<h2 id=\"1스택\">1.스택</h2>\n<h4 id=\"스택의-특성\">스택의 특성</h4>\n<ul>\n  <li>물건을 쌓아올린듯 자료를 쌓아올린 형태의 자료구조이다.</li>\n  <li>스택에 저장된 자료는 선형 구조를 갖는다.</li>\n  <li>후입선출구조 LIFO(후입선출)\n    <ul>\n      <li>마지막에 삽입한 자료를 가장 먼저 꺼내는 방식</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"연산은-어떻게-할까요\">연산은 어떻게 할까요?</h4>\n<p>API name = Java.util.Stack</p>\n<ul>\n  <li>삽입<br />\nstack.push(item)</li>\n  <li>삭제<br />\nstack.pop()</li>\n  <li>공백확인<br />\nstack.isEmpty()</li>\n  <li>최상위원소 확인<br />\nstack.peek()</li>\n</ul>\n\n<p>peek()과 pop()의 차이는 실제로 스택에서 직접 꺼내느냐? 아니면 스택의 가장 위쪽 부분(top)에 해당하는 원소를 꺼내지 않고 들여다 보느냐의 차이이다.</p>\n\n<h4 id=\"어떤곳에-사용해야할까요\">어떤곳에 사용해야할까요?</h4>\n<p>가장 대표적인 알고리즘 문제로는 괄호 검사이다.</p>\n\n<p>[{((,()))}]  이런 String 이 들어왔을때 괄호가 잘 닫혔있는지,or 닫히지 않은 괄호가 있는지 확인할때 stack을 이용하면 될것입니다.</p>\n\n<h3 id=\"스택은-function-call-에-사용되어-집니다\">스택은 Function call 에 사용되어 집니다</h3>\n<p>프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리하기위해 Stack을 이용합니다. ex) JVM Stacks</p>\n\n<h3 id=\"스택-사용해보기\">스택 사용해보기</h3>\n\n<h4 id=\"1-인터넷-브라우저-시뮬레이터-만들어보기\">1. 인터넷 브라우저 시뮬레이터 만들어보기</h4>\n<ul>\n  <li>스택을 활용하여 뒤로가기 버튼,앞으로 가기 버튼이 있는 인터넷 브라우저를 만들어 봅시다.</li>\n</ul>\n\n<blockquote>\n  <p>앞으로 가는 history와 뒤로가는 history를 위해 두개의 스택 구현이 필요함.</p>\n</blockquote>\n\n<h2 id=\"2-큐\">2. 큐</h2>\n\n<h4 id=\"큐의-특성\">큐의 특성</h4>\n<p>큐는 선입선출 구조로 구성되어있다. 즉 대기열과 같이 먼저 기다린 사람이 먼저 나가는 구조로 구성된다.</p>\n\n<h4 id=\"연산은-어떻게-할까요-1\">연산은 어떻게 할까요?</h4>\n\n<h5 id=\"큐는-필요한-연산을-선언해둔-컬렉션-클래스를-이용할-수-도-있고큐-인터페이스에-넣어서-사용할-수-있습니다\">큐는 필요한 연산을 선언해둔 컬렉션 클래스를 이용할 수 도 있고,큐 인터페이스에 넣어서 사용할 수 있습니다.</h5>\n\n<p>Java api =java.util.Queue()</p>\n\n<ul>\n  <li>생성\n    <ul>\n      <li>Queue::offer(item) 큐의 뒤쪽에 원소삽입</li>\n    </ul>\n  </li>\n  <li>원소 빼내기(Front에서 원소를 빼내기)\n    <ul>\n      <li>Queue::poll()</li>\n    </ul>\n  </li>\n  <li>큐 생성하기\n    <ul>\n      <li>Queue::createQueue()</li>\n    </ul>\n  </li>\n  <li>큐 크기 확인\n    <ul>\n      <li>Queue::size()</li>\n    </ul>\n  </li>\n  <li>큐 원소 존재 여부 확인\n    <ul>\n      <li>Queue::isEmpty()</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"큐를-선언해봅시다\">큐를 선언해봅시다.</h4>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//첫번쨰 방식</span>\n<span class=\"nc\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">queue2</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;;</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()+</span><span class=\"s\">\"//\"</span><span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">());</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">);</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()+</span><span class=\"s\">\"//\"</span><span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">());</span>\n\n\n<span class=\"c1\">//두번째 방식</span>\n<span class=\"nc\">Queue</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">queue2</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()+</span><span class=\"s\">\"//\"</span><span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">());</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()+</span><span class=\"s\">\"//\"</span><span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">());</span>\n</code></pre></div></div>\n<p>첫번째 방식과 두번째 방식은 뭐가 다를까요?<br />\n첫번째 방식과 다르게 두번째 방식은 제너릭타입으로 선언된 Queue 인터페이스에 LinkedList 를 넣어 이용합니다.</p>\n\n<p>객체지향언어의 장점인 다형성과 관련된 얘기인데, LinkedList에 Queue에 필요한 메서드들이 구현되어있긴 하지만! 인스턴스의 의도가 큐를 사용하기위함 이기 때문에. \n 의도에 맞게끔 사용할 수 있게끔 제너릭타입 인터페이스를 이용하여 용도를 제한한다고 생각하면 쉽겠습니다.</p>\n\n<p>즉, Linkedlist에는 큐에서 사용되는 offer,poll 메서드도 있지만 이외에도 offerlast,offerfirst와 같은 다양한 메서드들이 있고, 이는 dequeue 라는 자료구조에서 이용되어집니다.</p>\n\n<p>우리는 Queue를 쓰는데 이런 메서드들에 대한 요구가 없습니다.\n그렇기 때문에 이를 이용할 수 없게 제한 해야한다는 것입니다.</p>\n<blockquote>\n  <p>한줄요약 : Queue 를 만들었으면 Queue에 맞게끔 쓰기위해 Queue 인터페이스를 이용해야 올바른 코딩 방법이다.</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"nn\">com.ssafy.live03</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.LinkedList</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Queue</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">myChu</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"c1\">// 마이쮸 나눠주기 시뮬레이션</span>\n<span class=\"c1\">//\t\t1번이 한개의 마이쮸를 받는다</span>\n<span class=\"c1\">//\t\t1번이 다시 줄을 선다</span>\n<span class=\"c1\">//\t\t2번이 줄을 선다</span>\n<span class=\"c1\">//\t\t1번이 두개의 마이쮸를 받는다</span>\n<span class=\"c1\">//\t\t1번이 다시 줄을 선다</span>\n<span class=\"c1\">//\t\t3번이 들어와 줄을 선다</span>\n<span class=\"c1\">//\t\t2번이 한개의 마이쮸를 받는다</span>\n<span class=\"c1\">//\t\t2번이 다시 줄을 선다</span>\n<span class=\"c1\">//\t\t4번이 들어와 줄을 선다</span>\n<span class=\"c1\">//\t\t1번이 세개의 마이쮸를받는다</span>\n<span class=\"c1\">//\t\t1번이 다시줄을 선다</span>\n<span class=\"c1\">//\t\t5번이 줄을 선다</span>\n<span class=\"c1\">//\t\t3번이 한개의 마이쮸를 받는다</span>\n<span class=\"c1\">//\t\t\t.</span>\n<span class=\"c1\">//\t\t\t.</span>\n<span class=\"c1\">//\t\t\t.</span>\n<span class=\"c1\">//\t\t마이쮸가 20개있을때 마지막것을 누가 가져갈까?</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">item</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"o\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n\t\t<span class=\"nc\">Queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">[]&gt;</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">[]&gt;();</span>\n\t\t<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">person</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">});</span>\n\t\t<span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()){</span>\n\t\t\t\t<span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">avaliableCnt</span><span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">item</span> <span class=\"o\">&gt;=</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">)?</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span><span class=\"n\">item</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"n\">item</span> <span class=\"o\">-=</span><span class=\"n\">avaliableCnt</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"마지막 마이쭈 당첨자 : \"</span><span class=\"o\">+</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]+</span><span class=\"s\">\"가져간개수: \"</span><span class=\"o\">+</span><span class=\"n\">avaliableCnt</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">break</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"o\">++</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n\t\t\t\t\t<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{++</span><span class=\"n\">person</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">});</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<h2 id=\"3우선순위-큐-priority-queue\">3.우선순위 큐 (Priority Queue)</h2>\n\n<ul>\n  <li>우선순위와 함께 원소들을 저장하는 큐</li>\n  <li>FIFO 순서가 아니라 우선순위가 높은 순서대로 먼저 나가게 된다.</li>\n  <li>Heap(Tree) 자료구조를 이용해 만들어짐\n    <ul>\n      <li>최대힙을 사용하냐,최소힙을 사용하냐에 따라 출력을 먼저 할 우선순위가 큰지 작은지 결정 해줄 수 있다.</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"4-배열과-리스트\">4. 배열과 리스트</h2>\n\n<h3 id=\"순차리스트-배열\">순차리스트 (배열)</h3>\n<ul>\n  <li>\n    <p>실제 메모리공간에 물리적으로 순차적으로 저장된 자료구조를 말한다.</p>\n  </li>\n  <li>\n    <p>단순 배열을 이용해 순차리스트를 구현하는경우 삽입/삭제 과정에서 연산속적 메모리배열을 위한 원소이동 작업에 대한 오버헤드가 발생한다.</p>\n  </li>\n  <li>\n    <p>삽입 /삭제에 일어나는 연산이 빈번하게 일어난다.</p>\n  </li>\n</ul>\n\n<h3 id=\"연결리스트\">연결리스트</h3>\n<ul>\n  <li>\n    <p>자료의 논리적 순서와 물리적 순서가 일치하지않고, 개별적으로 위치하는 원소의 레페런스를 연결한 구조를 이루는 자료구조</p>\n  </li>\n  <li>\n    <p>링크를 통해 원소에 접근하기때문에, 물리적인 순서를 맞추기위한 작업이 필요하지 않고, 레퍼런스만 잘 조정해주면 된다.</p>\n  </li>\n  <li>\n    <p>이를 이용하면 자료구조의 크기를 동적으로 조정할 수있어 메모리의 효율적 사용이 가능하다.</p>\n  </li>\n</ul>\n\n<h4 id=\"연결리스트의-기본구조\">연결리스트의 기본구조</h4>\n<p>연결리스트의 구성요소는 크게 노드/헤드 2가지가 있다.</p>\n\n<p>노드\n 1) 데이터필드</p>\n<ul>\n  <li>원소의 값을 저장하는 자료구조</li>\n  <li>저장할 원소의 종류나 크기에 따라 구조를 정의하여 사용함\n 2) 링크 필드(다음 노드와의 연결)</li>\n  <li>다음 노드의 주소를 저장하는 자료구조</li>\n</ul>\n\n<p>헤드</p>\n<ul>\n  <li>리스트의 첫 노드를 가리키는 레퍼런스.</li>\n</ul>\n\n<p>자세한 연결 구조는 링크필드에 의해 다음 노드와 연결되는 구조이며, 헤드가 가장 앞의 노드. 링크필드가 연속된 다음 노드들을 가르키는 형태로 아래와 같다.</p>\n\n<h4 id=\"시각화\">시각화</h4>\n<p><img src=\"../img/linked_list.png\" alt=\"linked_list_image\" /></p>\n\n<h4 id=\"연결리스트-만들어보기\">연결리스트 만들어보기</h4>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 노드 구현 클래스</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Node</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"n\">link</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"nc\">Node</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">link</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">Node</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// LinkedList 구현</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">simpleLinkedList</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">Node</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n\t\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addFirstNode</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">Node</span> <span class=\"n\">newNode</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">Node</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">,</span><span class=\"n\">head</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">head</span><span class=\"o\">=</span><span class=\"n\">newNode</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"s\">\"simpleLinkedList [head=\"</span> <span class=\"o\">+</span> <span class=\"n\">head</span> <span class=\"o\">+</span> <span class=\"s\">\"]\"</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printList</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">for</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">currNode</span><span class=\"o\">=</span><span class=\"n\">head</span><span class=\"o\">;</span><span class=\"n\">currNode</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">;</span><span class=\"n\">currNode</span><span class=\"o\">=</span><span class=\"n\">currNode</span><span class=\"o\">.</span><span class=\"na\">link</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">currNode</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">+</span><span class=\"s\">\" \"</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 테스트케이스</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">simpleLinkedListTest</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">simpleLinkedList</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">simpleLinkedList</span><span class=\"o\">();</span>\n\t\t\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">addFirstNode</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">addFirstNode</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">addFirstNode</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">printList</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>출력결과 : 3 2 1\n</code></pre></div></div>\n\n<p>위의 테스트케이스는 간단한 연결리스트 삽입 연산을 구현한 것입니다.</p>\n\n<p>구현 결과를 살펴보면 어떤 자료구조와 같다고 생각이 듭니다 바로.\n<strong><em>스택</em></strong> 이 생각나네요. push() 연산과 동일하게 보여집니다. \n그렇다면 이 LinkedList를 이용해서 노드의 가장 마지막값. \n즉 tail 값만 빼올수 있다면 pop() 연산도 구현을 할 수 있습니다.</p>\n\n<blockquote>\n  <p>이번 예제는 Siglic LinkedList를 간단히 구현해보았지만\n실제 LinkedList Class 는 doublic LinkedList로 구현이 되어있습니다.</p>\n</blockquote>\n\n<p><br /></p>\n\n<h2 id=\"5-트리\">5. 트리</h2>\n<p><img src=\"../img/tree.gif\" alt=\"출처 https://wwst.tistory.com/2\" /></p>\n<h6 id=\"출처-httpswwsttistorycom2-님의-글에서-옮겨왔습니다\">출처 https://wwst.tistory.com/2 님의 글에서 옮겨왔습니다.</h6>\n\n<p>위와 같은 형태의 자료구조를 트리라고 합니다.</p>\n\n<p>여러가지 트리가있지만 가장 중요한건 이진 트리이니 그것을 다시한번 정리해보려합니다.</p>\n\n<h3 id=\"이진트리의-종류\">이진트리의 종류</h3>\n<p><img src=\"../img/binary_tree.png\" alt=\"https://jiwondh.github.io/2017/10/15/tree/\" /></p>\n<h6 id=\"출처--httpsjiwondhgithubio20171015tree\">출처 : https://jiwondh.github.io/2017/10/15/tree/</h6>\n\n<p>위와같은 형태로, 루트노드에 2개이하의 자식을 가지고있는 트리를 이진트리라고 합니다. 트리의 종류는 포화이진트리 등 다양한 형태가 있겠습니다.</p>\n\n<h3 id=\"트리는-어디에-자주-이용할까요\">트리는 어디에 자주 이용할까요?</h3>\n\n<p>트리를 이용하는데는 대표적으로 BFS,DFS가 있겠습니다.</p>\n\n<p>bfs - 너비우선탐색<br />\ndfs - 깊이우선탐색</p>\n\n<p>루트노드에서 자식노드까지 쭉 내려가서 깊이’우선’으로 탐색하는것이 dfs이고, bfs는 너비우선탐색, 즉 노드 및 형제노드를 모두 탐색하고, 다음 자식노드순으로 쭉 탐색해나가는 탐생 방식입니다.</p>\n\n<p>bfs는 Queue로 구현을 할 수 있고<br />\ndfs는 Stack이나 재귀함수로 구현이 가능합니다.</p>\n\n<h3 id=\"순회\">순회</h3>\n<p>순회란 트리의 노드들을 체계적으로 방문하는 것을 뜻합니다.</p>\n\n<p>전위순회 - 부모노드 방문 후 , 자식노들을 좌/우 순서로 방문<br />\n중위순회 - 왼쪽 자식노드 부모노드 오른쪽 자식노드 순으로 방문<br />\n후위순회 - 자식노드를 좌 우 순서로 방문하고 부모노드를 마지막으로 방문</p>\n\n<h3 id=\"특별한-이진트리\">특별한 이진트리</h3>\n<h4 id=\"수식-이진트리\">수식 이진트리</h4>\n<p><img src=\"./img/op_tree.png\" alt=\"\" /></p>\n\n<p>수식을 표현하는 이진 트리<br />\n수식 이진 트리라고 부르기도 합니다.</p>\n\n<p>연산자는 루트 노드이거나 가지노드일 수 밖에 없습니다.\n즉 ,연산자는 리프노드가 될 수 없습니다.</p>\n\n<p>반대로 피연산자는 모두 리프노드가 되어야 합니다.</p>\n\n<h4 id=\"이진탐색트리binary-search-tree\">이진탐색트리(Binary Search Tree)</h4>\n<p>탐색작업을 효율적으로 하기위한 자료구조로\n모든원소는 서로다른 “유일한” 값을 가집니다.</p>\n\n<p>왼쪽 서브트리 &lt; 루트 노드 &lt; 오른쪽 서브트리 순으로 정렬되어 저장되어야 하며 여기서 나눠진 왼쪽 서브트리,오른쪽 서브트리 또한 이진 탐색 트리입니다.</p>\n\n<p>이것을 중위 순회하면 오름차순으로 정렬된 값을 얻을 수 있습니다.</p>\n\n<h2 id=\"6-그래프\">6. 그래프</h2>\n\n<h4 id=\"인접-행렬\">인접 행렬</h4>\n<p>정점의 개수를 V개라고 했을때 V*V 의 행렬을 이용해 그래프 정점간의 인접관계를 표현한 행렬.</p>","excerpt":"Data structure","languages":null,"categories":["posts"],"tags":["ComputerScience"]},{"title":"Java, OOP, Thread","permalink":"https://jaehyunup.github.io/OOP_study.html","link":"https://jaehyunup.github.io/OOP_study.html","date":"2020-08-19T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p># OOP 란?</p>\n\n<p>한글로 객체지향 프로그래밍. \n<strong>데이터와 이를 처리하는 루틴을 하나의 독립된 객체로 동작하는 것을 지향하는 것을 말합니다.</strong></p>\n\n<p><strong>절차지향 프로그래밍 언어의 대표격인 C와 뭐가 다른가?</strong></p>\n\n<p>기존 절차지향 프로그래밍은 C는 각 명령어의 작성을 실행 순서대로 합니다. 즉 ,위에서 아래로 일련의 실행 코드들이 작성되어 진다는 것입니다.<br />\n하지만 OOP 언어를 사용한다면 아래와 같은 특징을 가지는 방식으로의 프로그래밍이 가능합니다.\n<br /><br /></p>\n\n<h3 id=\"1-oop의-특징\">1. OOP의 특징</h3>\n<ul>\n  <li>추상화<br />\n현실 세계에 존재하는 객체의 주요특징을 추출하는 것</li>\n  <li>캡슐화<br />\n하나의 클래스 안에 데이터와 기능을 담아 정의하고, 중요한 데이터나 복잡한 기능등은 숨기고, 외부에서 사용에 필요한 기능만을 공개하는 것.</li>\n  <li>상속성<br />\n객체를 정의할때 기존 존재하는 객체의 속성과 기능을 상속받아 더 발전된 형태로 정의하는것</li>\n  <li>다형성<br />\n같은 타입 또는 같은 기능의 호출로 다양한 효과를 가져오는것. 예를 들면 오버라이딩,오버로딩 등이 있다.</li>\n</ul>\n\n<p>Java는 Object Oriented Programming 을 지향하고 있습니다.\n조금 더 좋은, 그리고 안전한 코드를 작성하기 위해서 이 OOP에 대한 이해가 충분하게 필요하고 이에 부합하는 다양한 코드 작성 패턴을 학습 해야한다고 생각합니다.</p>\n\n<h3 id=\"2-class--object-\">2. Class ? Object ?</h3>\n<p>Object - 시스템의 대상이 되는 모든 것.<br />\n예를 들면 쇼핑몰 시스템에서, 상품/고객/주문 등등을 Object로 표현하게 됩니다. <br />\nObject는 <strong>구체적</strong>인 표현 대상이 있습니다. 상품 Object는 쇼핑몰에서 판매하는 A상품,B상품 등을 표현 할 수있습니다.<br />\nClass는 이런 Object를 분석해서 공통적인 내용들을 추상화 해서 Programming 언어로 표현한 것입니다.</p>\n\n<blockquote>\n  <p>OOP와 절차지향 프로그래밍의 근본적 차이점은, OOP는 현실세계의 Object를 분석해서 특정한 기준에 따라 Classification 하여 Class로 정의하고 이 Class 를 통해서 객체를 만들어내어 일련의 알고리즘을 진행하는 것이라 생각합니다.</p>\n</blockquote>\n\n<h3 id=\"3-class는-어떻게-만들어야-할까요\">3. Class는 어떻게 만들어야 할까요?</h3>\n<p>Class를 만들기 전에, Class만의 정적인 특성과 동적인 특성을 파악해야합니다.<br />\n정적인 특성은 attribute, 동적인 특성을 behavior 라고 합니다.<br />\n이러한 특성은 Class가 어떤 시스템에서 사용되느냐에 따라서 다르게 정의 될 수 있습니다.</p>\n\n<p>만약 휴대폰 쇼핑몰에서 Galaxy Note라는 클래스를 만든다고 하면, [이름과 색상, 가격]은 정적 특성인 attribute가 될것이고 동적 특성에는 [개인에 맞게 할부원금을 계산하는 행위] 등 있겠습니다.</p>\n\n<p>다른 예로, 만약 삼성에서 제조관리 시스템을 제작하기위해 똑같이 Galaxy Note라는 클래스를 만든다면 [시리얼넘버,재질,조립상태]등이 정적 특성으로 분류되어 질것이고, 동적 특성에는 [불량을 확인하는 행위]가 있겠습니다.</p>\n\n<p>즉, 시스템의 의도나 목적에 따라 같은 현실객체를 정의한 클래스라도 다른형태로 나타날 수 있습니다.\n그러니 이런 현실세계의 Object를 Class로 도출하는 과정이 아주 중요 하다고 볼 수 있겠습니다.</p>\n\n<h3 id=\"4-아스날\">4. 아스날</h3>\n\n<h3 id=\"5-클래스-한눈에-알아보기\">5. 클래스 한눈에 알아보기</h3>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Phone</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">char</span> <span class=\"n\">color</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">price</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">double</span> <span class=\"nc\">SWversion</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getRealDebt</span><span class=\"o\">(){</span> \n        <span class=\"k\">return</span> <span class=\"mi\">10000</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">phone</span><span class=\"o\">(){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"galaxy\"</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">\"black\"</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">price</span><span class=\"o\">=</span><span class=\"s\">\"1000\"</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">SWversion</span><span class=\"o\">=</span><span class=\"s\">\"1.0\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>휴대폰이라는 클래스는 이름, 색깔, 가격 그리고 SW 버전이라는 attribute를 가지고 있습니다. 그리고 getRealDebt라는 메소드도 가지고 있죠.<br />\n<strong>이중 static이 함께 선언된 SWversion</strong> 은 무슨 의미일까요? 이를 알기위해서는 메모리 저장 영역에 대한 이야기가 필요합니다.</p>\n\n<h2 id=\"--메모리에는-어떻게-저장될까\">- 메모리에는 어떻게 저장될까?</h2>\n<p><img src=\"/img/instance_memory.png\" width=\"800\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<blockquote>\n  <p>함수코드는 Method Area에, Stack에는 런타임에 호출되어지는 메소드가, 실제로 선언과 호출에 의해 발생하는 메모리 할당은 heap에 객체 별로 독립적으로.</p>\n</blockquote>\n\n<p>나는 이렇게 저장될것이라고 이해했다.\n그렇다. Static으로 선언된 인스턴스는, method area라는 공용 메모리 공간에 저장되고, 다른 곳에서도 이 인스턴스에 접근이 가능하다.</p>\n<blockquote>\n  <p><strong><em>인스턴스는 어떤 원본(추상적인 개념)으로부터 ‘생성된 복제본’을 의미합니다.</em></strong></p>\n</blockquote>\n\n<p>클래스를 메모리에 올리기위해 new를 한다면 이 클래스는 소프트웨어적으로 인스턴스화 되었다고 볼 수 있고, new를 할때마다 힙에 각각의 메모리 공간을 할당받는다. \n<strong>메모리 구조가 이렇게 되어있기 때문에 같은 클래스에서 생성된 인스턴스라도 값이 다를수 있다는 말이다.</strong></p>\n\n<h3 id=\"6-배열을-array-list처럼-자연스럽게-늘리는방법\">6. 배열을 array List처럼 자연스럽게 늘리는방법</h3>\n<p>java에서 배열은 메모리의 순서로 지정된 공간을 칭하고 index를 통해 메모리에 접근한다고 알려져있다. 하지만 이런 순차자료구조는 배열의 변경이나 삭제등에서 나타나는 오버헤드나 여타 다른 성능적인 불리함을 가지고있다 더 많은 기능을 가진 클래스로 List 클래스가 존재한다. (ArrayList,LinkedList 등)</p>\n\n<p>ArrayList에서는  data 가 append 되었을때 메모리를 늘려주게 되는데.\n이것은 Arrays.copyOf() 메소드가 이용된다. 이것을 구현 해보자.</p>\n\n<p>ArrayList clone coding</p>\n<ol>\n  <li>값을 넣을 공간이 있는지 확인한다.</li>\n  <li>공간을 추가한 새로운 배열을 생성한다.</li>\n  <li>기존 배열의 내용을 새롭게 생성한 배열로 복사한다.</li>\n  <li>기존 배열을 가르키는 변수에 새로운 배열의 주소값을 입력한다.</li>\n</ol>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*Movie 클래스*/</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Movie</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">title</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">director</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">grade</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*영화를 담는 DAO 클래스인 MovieMgr*/</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MovieMgr</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">MovieMgr</span> <span class=\"no\">INSTANCE</span><span class=\"o\">;</span>\t\n\t<span class=\"kd\">private</span> <span class=\"nf\">MovieMgr</span><span class=\"o\">(){</span>\t\t\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">MovieMgr</span> <span class=\"nf\">getInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"no\">INSTANCE</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"no\">INSTANCE</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">MovieMgr</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"no\">INSTANCE</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">Movie</span><span class=\"o\">[]</span> <span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Movie</span><span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"o\">];</span>\n\t<span class=\"c1\">// 데이터가 들어갈 위치와 입력된 데이터의 크기</span>\n\t\n\t<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">;</span><span class=\"c1\">//</span>\n\t<span class=\"cm\">/** 파라메터로 전달된 화 정보를 전달받아 배열에 저장한다. */</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"nc\">Movie</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span>\t\t\n\t\t<span class=\"n\">movies</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]=</span><span class=\"n\">m</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">index</span><span class=\"o\">++;</span>\n\t\t\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>MovieMgr 클래스는 movie 클래스를 저장할수있는 클래스이다.\n내부적으로 배열을 가지고있고 add메서드를 실행할때 movies 배열에 movie 인스턴스를\n저장 할 수 있다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"nc\">Movie</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">movies</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]=</span><span class=\"n\">m</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">index</span><span class=\"o\">++;</span>\t\n\t<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>이렇게 만들어버린다면, index가 선언된 movies 배열의 크기이상으로 넘어갈때 error를 발생시킬것이다. 여기서 Arrays.copyOf() 메서드와 같이 구현을 한다면.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"nc\">Movie</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span>\t\n\t\t<span class=\"c1\">//1 .체크</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">// 2. 기존 배열의 2배로 새로운 배열 생성(임의의 값으로 더 큰새로운 배열을 생성해도 된다.)</span>\n\t\t\t<span class=\"nc\">Movie</span><span class=\"o\">[]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Movie</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">];</span> <span class=\"c1\">//새로운 배열</span>\n\t\t\t<span class=\"c1\">// 3. 기존 배열의 내용을 새로 만들어질 더 큰 공간의 빈 배열로 복사한다.</span>\n\t\t\t<span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span> <span class=\"n\">movies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span> \n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"c1\">// 4.새롭게 생성된 배열의 주소값을 기본 변수에 대입한다.</span>\n\t\t\t<span class=\"n\">movies</span><span class=\"o\">=</span><span class=\"n\">temp</span><span class=\"o\">;</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">movies</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]=</span><span class=\"n\">m</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">index</span><span class=\"o\">++;</span>\n\t<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"nc\">Movie</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span>\t\n\t\t<span class=\"c1\">//1 .체크</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"n\">movies</span><span class=\"o\">,</span><span class=\"n\">index</span> <span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">movies</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]=</span><span class=\"n\">m</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">index</span><span class=\"o\">++;</span>\n\t<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>두개의 코드는 같은 결과를 얻을 수 있다.</p>\n\n<p>이 테스트는 우리가 자연스럽게 쓰고있던 것들도 누군가 구현한 것 이라는것을 더 실감하게 되는 테스트인것 같다.. 앞으로 api라고 맨날 모르고 쓰지말고 어떻게 만들어졌는지도 확인해보면서 써야겠습니다.</p>\n\n<h3 id=\"7-상속\">7. 상속</h3>\n<p>자바는 class 상속(extends) 를 통해 부모-자식 클래스 관계를 표현하며, 확장성을 제공한다고 볼 수 있습니다.</p>\n\n<p>Java는 단일상속만 가능합니다. 즉</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">test</span> <span class=\"kd\">extends</span> <span class=\"n\">super1</span><span class=\"o\">,</span><span class=\"n\">super2</span><span class=\"o\">{</span>\n\t\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>와 같은 코드를 실행시킨다면 에러가 발생하게됩니다.</p>\n\n<blockquote>\n  <p>다중 상속이 안되면 어떻게 여러가지 공통점들을 분리해낼 수 있나요?</p>\n</blockquote>\n\n<p>그것을 위해 java에서는 interface를 제공하고있습니다. 나중에 설명하도록 하겠습니다.</p>\n\n<p>extneds와 implements의 차이는 의도의 차이라고 생각합니다.</p>\n\n<p>extends는 부모의 메소드를 그대로 사용하던가, 아니면 자신만의 메소드로 더 확장시켜서 어떤 확장의 의도를 가진 개념이고.</p>\n\n<p>implements는 메소드의 행위 자체를 인터페이스에서 구현하지않고 implements받은 클래스에서 구현되는것을 강조하여, 어떤 행위의 다양성을 부여하는 의도를 가지고 있다고 생각합니다.</p>\n\n<h4 id=\"object-클래스\">Object 클래스</h4>\n<p>자바에서는 트리구조로 클래스들을 관리하는데 object 클래스는 모든 클래스의 root 가 되는 근본이 있는 클래스입니다.<br />\n유저가 어떤 클래스를 생성할때에 직접 명시하지 않아도 컴파일러단에서 알아서 object class를 상속하게 됩니다.\n우리는 그래서 toString을 오버라이딩 해서 사용할 수 있는 편안함을 느끼고있는 것이죠(출력시에 자동 형변환도 되고!).</p>\n\n<blockquote>\n  <p>배열도 Object에 저장되어지지만 좀 특별한 경우가 있다.</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Object</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"o\">;</span>\n</code></pre></div></div>\n<p>위와 같은 경우에는 어떻게 표시되어질까? <br />\n123이라는 값은 상수 리터럴 이니까 객체가 아니라서 Object에 삽입하지 못할 것 같지만 , java 1.5버전부터 컴파일러단에서 다음과 같은 형태로 자동 변환해주어 가능해졌다고 한다</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Object</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"nc\">Integer</span><span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h4 id=\"한가지-더-특별한-케이스\">한가지 더 특별한 케이스</h4>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">A</span><span class=\"o\">{</span>\n\t<span class=\"n\">a</span><span class=\"o\">(){</span>\n\n\t<span class=\"o\">}</span>\n\t<span class=\"n\">info</span><span class=\"o\">(){</span>\n\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">B</span> <span class=\"kd\">extends</span> <span class=\"no\">A</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"n\">info</span><span class=\"o\">(){</span>\n\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t<span class=\"no\">A</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"no\">B</span> <span class=\"nf\">b</span><span class=\"o\">();</span>\n\t<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">a</span><span class=\"o\">()</span>\n\t<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>위와같이 선언했을때, 묵시적 형변환으로 부모클래스인 a의 메소드를 사용하게 되지만 만약 자식에서 오버라이드가 되어있다면? 오버라이드된 메소드를 사용한다!</p>\n\n<h3 id=\"8인터페이스\">8.인터페이스</h3>\n<p>추상화의 꽃! 인터페이스입니다.\n인터페이스는 <strong>mathods의 추상화</strong>한것이고 class와 독립적인 개념으로 interface라고 이름을 지었다고 합니다.</p>\n\n<p>인터페이스는 관련된 methods 들을 “선언”만 할 수 있습니다. 구현의 책임은 interface를 implements 하는 클래스에게 전적으로 위임한 것입니다.</p>\n\n<p>상속은 재사용에 초점이 맞추어져있고, 인터페이스는 어떤 규정이나 약속 이라는 느낌으로 생각하면 맞겠습니다.</p>\n\n<p>예시를 들어보면.\n즉 phone이라는 부모클래스의 자식클래스로 두개의 클래스를 만들었다고 생각해봅시다.</p>\n\n<p>FolderblePhone과 nomalphone 두개 가장 큰 차이는 접히느냐?안접히느냐? 라는 차이가있습니다. 하지만 폰이라는 점은 같죠.</p>\n\n<p>그렇게 했을때 가장 이상적인 상속관계는</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>분류</th>\n      <th>클래스 명</th>\n      <th> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td>부모</td>\n      <td>Phone</td>\n    </tr>\n    <tr>\n      <td> </td>\n      <td>자식</td>\n      <td>folderblePhone,nomalPhone</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>다음과 같아지겠습니다. \n여기서 부모 클래스에 phone에 접히는 기능을 추가해버린다면? nomalPhone도 접히는 메소드를 받아버리고, 이에 아무행동을 하지않는것으로 재정의를 해야되겠죠?</p>\n\n<p>그래서 interface를 통해 접고,펼치는 행위를 만들어주어서 folderblePhone 클래스에 implements 를 해주어야 합니다.</p>\n\n<h4 id=\"시나리오\">시나리오</h4>\n<p>A와 B는 I라는 같은행위를 가지고 있고, 이를 인터페이스로 정의하였습니다.</p>\n\n<p>A는 B의 전부를 원하는게아니라, 필요한 어떤 method의 수행을 원하고있습니다. 하지만 A는 그 사용하고싶은 method가 내부적으로 어떻게 구현 되어 있는지도 관심 없고 관심을 가져서도 안됩니다.</p>\n\n<p>B역시 A가 필요로 하는 모든것에 대해 자신의 method 의 모든것을 노출하고 싶지않고, 호출 방법과 결과에 대한 기본적인 사항만 공유되기를 바랍니다.</p>\n\n<p>이때 인터페이스를 사용하면 B는 자신의 code를 공개하지않고 A에게 메소드를 제공할 수 있습니다.</p>\n\n<h5 id=\"인터페이스-끼리도-상속이-가능합니다\">인터페이스 끼리도 상속이 가능합니다!</h5>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Inter01</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">interface</span> <span class=\"nc\">Inter02</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">interface</span> <span class=\"nc\">Inter03</span> <span class=\"kd\">extends</span> <span class=\"nc\">Inter02</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">interface</span> <span class=\"nc\">Inter04</span> <span class=\"kd\">extends</span> <span class=\"nc\">Inter01</span><span class=\"o\">,</span> <span class=\"nc\">Inter02</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Parent01</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Parent02</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">InterChild</span> <span class=\"kd\">extends</span> <span class=\"nc\">Parent01</span> <span class=\"kd\">implements</span> <span class=\"nc\">Inter01</span><span class=\"o\">,</span> <span class=\"nc\">Inter02</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test01</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>인터페이스에 선언되는 모든 변수는 상수로인식합니다.\n즉, public static final 키워드가 자동 추가됩니다</p>\n\n<p>인터페이스에 선언되는 메서드는 추상 메서드로 인식합니다.\npublic abstract 키워드가 자동 추가 됩니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">ServerInfo</span> <span class=\"o\">{</span>\n\t<span class=\"cm\">/*public static final*/</span> <span class=\"nc\">String</span> <span class=\"no\">IP</span><span class=\"o\">=</span><span class=\"s\">\"192.168.0.110\"</span><span class=\"o\">;</span> \n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>즉 이런형태로 선언 되어 진다는 것입니다.\n자바에서 final 키워드가 붙으면? 상수가 되어 버립니다.</p>\n\n<p>아래에서 테스트 해보겠습니다</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">ServerInfo</span> <span class=\"o\">{</span>\n\t<span class=\"cm\">/*public static final*/</span> <span class=\"nc\">String</span> <span class=\"no\">IP</span><span class=\"o\">=</span><span class=\"s\">\"192.168.0.110\"</span><span class=\"o\">;</span> \n\t<span class=\"cm\">/*public abstract*/</span> <span class=\"kt\">void</span> <span class=\"nf\">call</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test02</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">ServerInfo</span><span class=\"o\">.</span><span class=\"na\">IP</span><span class=\"o\">);</span> <span class=\"c1\">// static 성질 확인</span>\n\t\t<span class=\"nc\">ServerInfo</span><span class=\"o\">.</span><span class=\"na\">IP</span><span class=\"o\">=</span><span class=\"s\">\"1223\"</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The final field ServerInfo.IP cannot be assigned\n</code></pre></div></div>\n<p>static 성질과 final 상수가 된것을 알수있고, 인터페이스에 선언된 void call() 메서드도 구현부가 없는데 에러가 나지않는 이유는, abstract 키워드를 묵시적으로 붙혀주기 때문이다.</p>\n\n<p>이렇게 되기 때문에, 만약 Interface를 구현하는 클래스에서 새로 메서드를 오버라이딩 할때 public을 붙혀주어야 합니다. (컴파일러단에서 interface에 선언된 메소드에 자동으로 public static 키워드가 붙어서 해석해주기 때문에)</p>\n\n<h4 id=\"java8-버전부터-생긴-default와-static\">java8 버전부터 생긴 default와 static</h4>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">AIMachine</span> <span class=\"o\">{</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">();</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">KakaoAIMachine</span> <span class=\"kd\">implements</span> <span class=\"nc\">AIMachine</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">(){</span>\t\t\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">NaverAIMachine</span> <span class=\"kd\">implements</span> <span class=\"nc\">AIMachine</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">(){</span>\t\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">()</span> <span class=\"o\">{</span>\t\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h4 id=\"시나리오-1\">시나리오</h4>\n<p>카카오와 네이버가 걷고,대화할수있는 AI로봇을 만들었는데 카카오는 음악을 실행하는 music()이라는 행동을 추가하려고한다. 근데 네이버는 아직 음악을 실행하는 기능을 만들지 않았다.</p>\n\n<p>국내 기업들의 AIMachine 을 총괄하는 사람은 고민에 빠지게 되었다</p>\n\n<ol>\n  <li>\n    <p>music()메서드의 추가를 위해 KakaoAIMachine 클래스에 별도의 메서드를 정의하다보면 AIMachine의 수가 아주많이 늘어났을때 관리가 불가능해 질 것이다.</p>\n  </li>\n  <li>\n    <p>그렇다고 인터페이스에서 선언해서 사용하자니 해당기능을 가지고있지 않은 클래스도 이를 구현해야하는 상황이다.</p>\n  </li>\n</ol>\n\n<p>기존에는 interface를 하나 더 추가해서 다중 implements 를 했겠지만 자바 8 버전 부터 추가된 default 기능과 static 기능으로 이런 부분들에대한 불편이 해소되었습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">AIMachine</span> <span class=\"o\">{</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">();</span>\n\t<span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">();</span>\n\t<span class=\"k\">default</span> <span class=\"kt\">void</span> <span class=\"nf\">music</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"아직 지원되지않는 기능입니다\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">common</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"공통으로 사용되는 기능 정의\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">KakaoAIMachine</span> <span class=\"kd\">implements</span> <span class=\"nc\">AIMachine</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">(){</span>\n\t\t\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">NaverAIMachine</span> <span class=\"kd\">implements</span> <span class=\"nc\">AIMachine</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">work</span><span class=\"o\">(){</span>\n\t\t\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">tell</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\n\t<span class=\"o\">}</span>\t\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test04</span> <span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>이제 담당자는, 공통기능과 새로 추가된 기능이있어도 default,static을 이용해 유연하게 대처할 수 있게 되었습니다.</p>\n\n<h3 id=\"9-generic-제네릭\">9. Generic 제네릭</h3>\n\n<p>Array의 선언을 보면 int[] 혹은 String[] 등으로 선언합니다. 이것은 무엇의 배열인지,어떤 자료형이 들어갈 배열인지 명확하게 나와있죠.</p>\n\n<p>하지만 ArrayList와 같은 Collection은 어떤 자료형을 가지는지 명확히 표현하지 않고 사용했었습니다.</p>\n\n<p>Java 1.5부터는 Generic ‘&lt;&gt;’ 을 도입하여 class code 작성 시점에 임의의 타입 (‘<T>')\n을 사용하도록 하고, 실제 class를 사용하는 code에서 <T>대신 실제 사용하는 타입을 사용 할 수 있도록 하였습니다.</T></T></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GenericContainer</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"no\">T</span> <span class=\"n\">obj</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">GenericContainer</span><span class=\"o\">(){};</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">GenericContainer</span><span class=\"o\">(</span><span class=\"no\">T</span> <span class=\"n\">t</span><span class=\"o\">){</span>\n\t\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">public</span> <span class=\"no\">T</span> <span class=\"nf\">getObj</span><span class=\"o\">(){</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setObj</span><span class=\"o\">(</span><span class=\"no\">T</span> <span class=\"n\">t</span><span class=\"o\">){</span>\n\t\t<span class=\"n\">obj</span><span class=\"o\">;</span><span class=\"n\">t</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GenericContainerTest</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t\t<span class=\"nc\">GenericContainer</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">gc1</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GenericContainer</span><span class=\"o\">&lt;&gt;();</span>\n\t\t\n\t\t<span class=\"nc\">GenericContainer</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">gc2</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GenericContainer</span><span class=\"o\">&lt;&gt;();</span>\n\t\t\n\t\t<span class=\"n\">gc1</span><span class=\"o\">.</span><span class=\"na\">setObj</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">);</span> <span class=\"c1\">// 정상작동</span>\n\t\t<span class=\"n\">gc2</span><span class=\"o\">.</span><span class=\"na\">setObj</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">);</span> <span class=\"c1\">// 에러</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>즉 위와같이 제네릭을 통해 클래스 작성시에는 어떤 클래스를 사용하는지 아직도 모르지만, 적어도 해당 클래스를 사용하는 코드부분에는 명시적으로 작성해야 합니다.</p>\n\n<h3 id=\"10-추상클래스\">10. 추상클래스</h3>\n\n<h4 id=\"추상-abstract--즉-구현이-안되어-있는-것-을-말한다\">추상 abstract , 즉 구현이 안되어 있는 것 을 말한다.</h4>\n<p>추상 클래스는 abstract 키워드를 통해 선언할 수 있으며, 구현은 본인이 하지않고, 자식클래스와 같이 상속관계에 있는 클래스가 직접 구현해서 사용 할 수 있게 만드는 방법이다.</p>\n\n<p>abstract 키워드를 사용할 수 있는 곳은 다음과 같다\n분류|키워드 사용가능여부\n—|—\n클래스|가능\n메서드|가능\n변수|불가</p>\n\n<p>추상클래스는 객체생성이 불가능, 상속(자식클래스)에서의 구현을 이용해서 활용하여야 합니다.</p>\n\n<p>이는 즉 추상클래스 객체변수는 New가 불가능 하다는 것을 말해요</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">{</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test01</span> <span class=\"o\">{</span>\n\t<span class=\"nc\">AbsSuper</span> <span class=\"n\">as</span> <span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>위와 같이 추상클래스인 AbsSuper는 객체생성 자체가 불가능 하다는 것입니다</p>\n\n<p>하지만 추상클래스를 상속받은 자식클래스는 객체변수로 선언될 수 있습니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"nn\">com.ssafy.day08.abs</span><span class=\"o\">;</span>\n\n<span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">AbsSub</span> <span class=\"kd\">extends</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">{</span>\n\t\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test01</span> <span class=\"o\">{</span>\n\t<span class=\"cm\">/* AbsSuper as =new AbsSuper(); 와 같이 객체생성 불가능.*/</span>\n\t<span class=\"nc\">AbsSuper</span> <span class=\"n\">as</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">AbsSub</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>예를들면 자바 컬렉션의 Queue는 직접선언이 안되고 LinkedList로 객체생성을 해서 사용하는 방식이 이런 상황의 적절한 예시로 보입니다.</p>\n\n<blockquote>\n  <h3 id=\"인터페이스랑-비슷한것-같은데-왜-추상클래스가-존재할까요\">인터페이스랑 비슷한것 같은데, 왜 추상클래스가 존재할까요?</h3>\n  <ol>\n    <li>인터페이스에서는 일반 메서드 선언이 불가능하다\n인터페이스는 완전한 추상화를 가지는 반면에, 추상클래스를 이용하면 일반메서드 + 추상메서드 형태로 사용이 가능합니다.</li>\n  </ol>\n</blockquote>\n\n<ol>\n  <li>인터페이스는 다중 상속의 개념 지원\n한개의 클래스를 부모로 지정할수있는 extends와는 다르게 implements는 여러개의 인터페이스 구현이 가능합니다.</li>\n</ol>\n\n<table>\n  <thead>\n    <tr>\n      <th>관계</th>\n      <th>상속or구현 형태</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>class -&gt; class</td>\n      <td>extends</td>\n    </tr>\n    <tr>\n      <td>interface-&gt; interface</td>\n      <td>extends</td>\n    </tr>\n    <tr>\n      <td>class -&gt; interface</td>\n      <td>implements</td>\n    </tr>\n    <tr>\n      <td>interface -&gt; class</td>\n      <td>불가능</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>추상메서드는 어떻게 선언이 되어질까요?\n앞서 말했듯이 추상메서드나 클래스는 구현이 불가능합니다.\n즉, 추상메서드를 선언할때는 다음과 같이 구현부 자체를 없애버려야 합니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">abstract</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">();</span>   <span class=\"c1\">// 선언가능</span>\n<span class=\"kd\">abstract</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">(){};</span>   <span class=\"c1\">// 선언 불가 (바디가 있어서)</span>\n</code></pre></div></div>\n\n<h4 id=\"추상클래스를-상속하는-자식-클래스가-반드시-처리해야-하는-일\">추상클래스를 상속하는 자식 클래스가 반드시 처리해야 하는 일?</h4>\n<p>반드시 추상 메서드를 오버라이딩하여 재정의 해야만 합니다.</p>\n\n<p>추상메서드를 활용하는 예시를 보겠습니다.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">{</span>\n\t<span class=\"c1\">//abstract String name; 에러발생 : 변수와 함께 abstract 키워드를 사용 불가능 </span>\n\t<span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"AbsSuper\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">call</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Parrents Call()\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"c1\">//\tpublic void print(); 에러발생: 메서드 바디 필요함(일반 메서드 이기 때문에)</span>\n<span class=\"c1\">//  public abstract void print(){}; 에러발생 : 추상메서드인데 바디를 가지고있음.</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">abstract</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">AbsSub</span> <span class=\"kd\">extends</span> <span class=\"nc\">AbsSuper</span><span class=\"o\">{</span>\n\t<span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"AbsSub\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">public</span> <span class=\"nf\">AbsSub</span><span class=\"o\">()</span> <span class=\"o\">{};</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">eat</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Child eat()\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">print</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Child print()\"</span><span class=\"o\">);</span>\n\t\t\n\t<span class=\"o\">}</span>\t\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test01</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">AbsSuper</span> <span class=\"n\">as</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">AbsSub</span><span class=\"o\">();</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">as</span><span class=\"o\">.</span><span class=\"na\">call</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">as</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>출력결과 :\nAbsSuper\nParrents Call()\nChild print()\n</code></pre></div></div>\n\n<p>위에서 클래스별 구조는 아래와 같습니다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>AbsSuper \n|-name  \n|-call()  \n|-print()\n</code></pre></div></div>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>AbsSub  \n|-name  \n|-eat()  \n|-print()  \n</code></pre></div></div>\n\n<p>AbsSuper 형태의 틀에 AbsSub 객체를 넣었습니다. (상속관계이기 때문에 가능)<br />\n하지만 런타임에 실행되는 틀 자체는 결국 AbsSuper 입니다.\n하지만 틀안에 들어간 객체인 자식클래스 내부적으로 부모클래스의 메서드나 추상메서드를 Override 했다면, Override된 메서드를 실행하게 됩니다.</p>\n\n<p>오버라이드 되지않는 변수와, call 메서드 같은경우 부모의 것을 그대로 사용하고, 추상메서드를 통해 강제적으로 오버라이드하였던 print()는 자식클래스의 것을 캐스팅하게 되었습니다.</p>\n\n<blockquote>\n  <h4 id=\"근데-오버라이딩은-그냥-해도되는데-왜-굳이-추상메서드로-강제화-시키는-걸까\">근데 오버라이딩은 그냥 해도되는데 왜 굳이 추상메서드로 강제화 시키는 걸까?</h4>\n  <p>일부러 그렇게 시키는거다. 설계의 관점에서 바라봤을때 모든것을 추상화하고, 분리하고, 행동이 같다면 일치시키고 유지보수측면을 바라보았을때 강제할 필요가 있기때문에 이러한 기능이 제공된다고 알고 있는게 좋을것같다!</p>\n</blockquote>\n\n<h3 id=\"12-내부-클래스\">12. 내부 클래스</h3>\n<p>선언되는 위치와 방법에 따라 4가지로 구분됩니다.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Top</span><span class=\"o\">{</span>\n\t<span class=\"c1\">// 멤버 변수(클래스)</span>\n\t<span class=\"kd\">class</span> <span class=\"nc\">InnerMember</span><span class=\"o\">{</span> <span class=\"o\">}</span>\n\t<span class=\"c1\">// 전역 변수(클래스)</span>\n\t<span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">StaticMember</span><span class=\"o\">{</span> <span class=\"o\">}</span>\n\t<span class=\"n\">method</span><span class=\"o\">(){</span>\n\t\t<span class=\"c1\">//지역 변수(클래스)</span>\n\t\t<span class=\"kd\">class</span> <span class=\"nc\">NamedLocal</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\t\t<span class=\"c1\">//익명 클래스</span>\n\t\t<span class=\"k\">new</span> <span class=\"n\">부모클래스</span><span class=\"o\">(){</span> <span class=\"o\">}</span> <span class=\"o\">-</span> <span class=\"n\">가장</span> <span class=\"n\">자주</span> <span class=\"n\">사용됨</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>이미 알게모르게 모두 사용할수있고, 실무에서 익명클래스말고는 사용되는 일이 많지는 않다고 하니 이렇게 사용할 수 있다. 정도로만 알고 가려고합니다.</p>\n\n<p>익명클래스는 이벤트 패턴에서 제일 많이 사용하는것 같다고 느낍니다.</p>\n\n<blockquote>\n  <h2 id=\"지금까지-복습한-내용으로-간단한-매장-관리-시스템을-제작해보기\">지금까지 복습한 내용으로 간단한 매장 관리 시스템을 제작해보기</h2>\n</blockquote>\n\n<ul>\n  <li>요구사항\n    <ul>\n      <li>\n        <p>이 매장은 재고관리를 위한 간단한 프로그램을 원한다</p>\n      </li>\n      <li>\n        <p>상품은 TV와 냉장고 두가지 이며 각 제품은 제품번호,제품명,가격 정보,재고수량 을 관리할 수 있어야 한다.</p>\n      </li>\n      <li>\n        <p>이 시스템을 사용할 관리자는 아래와 같은 기능을 요구했다\n|관리자가 요구한 기능목록|\n|—|\n|상품 정보가 저장되는 기능|\n|상품 정보 전체를 볼 수 있는 기능|\n|상품번호로 상품을 검색하는기능|\n|상품명으로 상품을 검색하는기능|\n|TV 정보만 보는기능|\n|냉장고 정보만 보는기능|\n|상품번호로 상품을 삭제하는기능|\n|전체 재고 상품 금액을 구하는 기능|</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p>프로그램을 만들어보자.</p>\n\n<h3 id=\"완성된-프로젝트-ver1\"><a href=\"https://github.com/jaehyunup/java_study/tree/master/src/OOP/01_ProductSimulator/ver1\">완성된 프로젝트 ver.1</a></h3>\n\n<h3 id=\"java-파일-입출력io\">Java 파일 입출력(I/O)</h3>\n\n<p>자바 입출력은 버퍼를 쓰는것(Bufferd…)과 바로읽는것(InputStream..) 이 있습니다.\n파일로 따졌을때, 버퍼를 사용한다면 디스크접근이 한번이고. 사용하지않는다면 디스크 접근을 매번 해야합니다.</p>\n\n<p>파일처리나,운영체제를 배운 사람은 디스크는 메모리접근에 비해 상대적으로 엄청나게 느리다는 것을 알것입니다.</p>\n\n<p>그럼 도대체 두개가 얼마나 큰차이가 있길래 이렇게 강조하는것일까요?</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">BufferPerformanceTest</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\n\t\t<span class=\"nc\">File</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"s\">\"c:/Windows/explorer.exe\"</span><span class=\"o\">);</span>\n\t\t<span class=\"nc\">File</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"s\">\"c:/Temp/copied_explorer.exe\"</span><span class=\"o\">);</span>\n\t\t\n\t\t<span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">FileInputStream</span> <span class=\"n\">fi</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileInputStream</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">);</span>\n\t\t\t <span class=\"nc\">FileOutputStream</span> <span class=\"n\">fo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileOutputStream</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">);</span>\n\t\t\t <span class=\"nc\">BufferedInputStream</span> <span class=\"n\">bi</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BufferedInputStream</span><span class=\"o\">(</span><span class=\"n\">fi</span><span class=\"o\">);</span>\n\t\t\t <span class=\"nc\">BufferedOutputStream</span> <span class=\"n\">bo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BufferedOutputStream</span><span class=\"o\">(</span><span class=\"n\">fo</span><span class=\"o\">);)</span> <span class=\"o\">{</span>\n\t\t\t\n\t\t\t <span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"s\">\"FileInputStream\"</span><span class=\"o\">,</span> <span class=\"n\">fi</span><span class=\"o\">,</span> <span class=\"n\">fo</span><span class=\"o\">);</span>\n\t\t\t <span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"s\">\"BufferdInputStream\"</span><span class=\"o\">,</span> <span class=\"n\">bi</span><span class=\"o\">,</span> <span class=\"n\">bo</span><span class=\"o\">);</span>\n\t\t\t\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">copy</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"nc\">InputStream</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"nc\">OutputStream</span> <span class=\"n\">output</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kt\">long</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">nanoTime</span><span class=\"o\">();</span>\n\t\t<span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">cart</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1024</span><span class=\"o\">];</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">cart</span><span class=\"o\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">output</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">cart</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">read</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"kt\">long</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">nanoTime</span><span class=\"o\">();</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">+</span> <span class=\"s\">\", 소요 시간: \"</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">\"ns\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>출력결과 :\nFileInputStream, 소요 시간: 19264500ns\nBufferdInputStream, 소요 시간: 14100ns\n</code></pre></div></div>\n\n<p>ㄷㄷ 이정도나 차이날줄은 몰랐다.</p>\n\n<h3 id=\"13-소켓통신\">13. 소켓통신</h3>\n\n<h5 id=\"udp\">UDP</h5>\n<ul>\n  <li>데이터 통신 방식으로, 송신측에서 데이터를 전송하고 수신측에서 받고 별도의 데이터 신뢰성 확인 행위를 하지않는 방식.  <br />\nJava에서는 Datagramsocket, DatagramPacket 을 이용한다.</li>\n</ul>\n\n<h5 id=\"tcp\">TCP</h5>\n<ul>\n  <li>데이터를 전달하고 얼마나 전달됬는지 확인하는 등의 확인과정을 통해(3-handShake) 신뢰도가 높은 통신방식으로 Java에서는 Socket을 이용하여 사용한다.\nHttp 프로토콜이 TCP 기반으로 정의되었다.</li>\n</ul>\n\n<p>ServerSocket - 서버단의 소켓<br />\nSocket - 클라이언트의 소켓</p>\n\n<h4 id=\"간단한-소켓프로그램으로-서버에서-보내는-문자를-클라이언트에-받는-프로그램을-구성할때의-서버-클라이언트-요구사항\">간단한 소켓프로그램으로 서버에서 보내는 문자를 클라이언트에 받는 프로그램을 구성할때의 서버-클라이언트 요구사항</h4>\n\n<p>Client</p>\n<ul>\n  <li>서버(host)의 IP와 포트번호</li>\n  <li>socket 객체 생성(host,ip)</li>\n  <li>socket 객체에서 inputStream 핸들링하기</li>\n  <li>InputStreamReader를 통해 inputStream(byte data)를 읽고, 이를 BufferedReader 로 체이닝하여 사용.</li>\n  <li>그다음 BufferedReader를 이용해 data read하기.</li>\n</ul>\n\n<p>Server</p>\n<ul>\n  <li>서버소켓 생성(포트번호 기입)</li>\n  <li>클라이언트 소켓이 접속할때까지 대기</li>\n  <li>접속 하면 해당 클라이언트 소켓의 OutputStream 핸들링</li>\n  <li>outputStreamWriter을 통해 stream 생성하여 작성하고 보내기</li>\n</ul>\n\n<h3 id=\"simple-server-client-구현해보기\">simple server-client 구현해보기</h3>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*서버 */</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.OutputStream</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.PrintWriter</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.net.ServerSocket</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.net.Socket</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">NetworkSimpleServer</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5100</span><span class=\"o\">;</span>\n\t\t\n\t\t<span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">ServerSocket</span> <span class=\"n\">serverSocket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ServerSocket</span><span class=\"o\">(</span><span class=\"n\">port</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\n\t\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"NetworkSimpleServer Started\"</span><span class=\"o\">);</span>\n\t\t\t\n\t\t\t<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nc\">Socket</span> <span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">serverSocket</span><span class=\"o\">.</span><span class=\"na\">accept</span><span class=\"o\">();</span>\n\t\t\t\t<span class=\"nc\">OutputStream</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"na\">getOutputStream</span><span class=\"o\">();</span>\n\t\t\t\t<span class=\"nc\">PrintWriter</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintWriter</span><span class=\"o\">(</span><span class=\"n\">output</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n\t\t\t\t<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Server : Hello Client!\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t\n\t\t <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"NetworkSimpleServer exception: \"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t <span class=\"o\">}</span>\n\t\t\n\t\t <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"NetworkSimpleServer Ended\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*client*/</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.BufferedReader</span><span class=\"o\">;</span>\n\t<span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n\t<span class=\"kn\">import</span> <span class=\"nn\">java.io.InputStream</span><span class=\"o\">;</span>\n\t<span class=\"kn\">import</span> <span class=\"nn\">java.io.InputStreamReader</span><span class=\"o\">;</span>\n\t<span class=\"kn\">import</span> <span class=\"nn\">java.net.Socket</span><span class=\"o\">;</span>\n\t\n\t<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">NetworkSimpleClient</span> <span class=\"o\">{</span>\n\t\n\t\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">String</span> <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s\">\"localhost\"</span><span class=\"o\">;</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5100</span><span class=\"o\">;</span>\n\t\t\t\n\t\t\t<span class=\"k\">try</span> <span class=\"o\">(</span> <span class=\"nc\">Socket</span> <span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Socket</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\n\t\t\t\t<span class=\"nc\">InputStream</span> <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"na\">getInputStream</span><span class=\"o\">();</span>\n\t            <span class=\"nc\">BufferedReader</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BufferedReader</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">InputStreamReader</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">));</span>\n\t \n\t            <span class=\"nc\">String</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">readLine</span><span class=\"o\">();</span>\n\t            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">);</span>\n\t\t\t\t\n\t\t\t <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span> <span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"NetworkSimpleClient exception: \"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t\t <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t\t <span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>이 프로그램은 하나의 서버에 하나의 클라이언트, 즉 일대 일 통신밖에 되지않는다.</p>\n\n<p>다대일. 즉 , 한 서버에 여러클라이언트가 접속하는 일반적인 구조의 서버-클라이언트는 어떻게 만들수있을까? 바로 멀티쓰레딩이다.</p>\n\n<h4 id=\"15-쓰레드\">15. 쓰레드</h4>\n\n<p>메모리에 할당된 프로세스의 흐름을 주관하는 단위. 우리의 모든 코드들은 런타임시에 알게모르게 이미 “메인 쓰레드”에서 돌아가고 있다.</p>\n\n<p>하지만 쓰레드를 한개 더 사용한다면, 2개의 프로세스를 동시에 처리할 수 있다.</p>\n\n<blockquote>\n  <p><em>손을 한개쓰는거보단 두개쓰는게 낫다!</em></p>\n</blockquote>\n\n<p>그렇다면 쓰레드는 어떻게 구현할까?\n2가지 방법이 있다.</p>\n\n<ol>\n  <li>Thread를 상속받는 새로운 클래스를 만들어 run() 메소드를 오버라이딩 하기.</li>\n  <li>Runnable 인터페이스를 implements 하여 run() 메소드를 오버라이딩.</li>\n</ol>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 1번 방식 */</span>\n<span class=\"nc\">Class</span> <span class=\"n\">myThread</span> <span class=\"kd\">extends</span> <span class=\"nc\">Thread</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n\t\t <span class=\"cm\">/*쓰레드가 할 동작 정의*/</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">Class</span> <span class=\"n\">main</span> <span class=\"kd\">implements</span> <span class=\"nc\">Runnable</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t\t<span class=\"nc\">Thread</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">MyThread</span><span class=\"o\">();</span>\n\t\t<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 2번 방식 */</span>\n<span class=\"nc\">Class</span> <span class=\"n\">myRun</span> <span class=\"kd\">implements</span> <span class=\"nc\">Runnable</span><span class=\"o\">{</span>\n\t<span class=\"nd\">@Override</span>\n\t<span class=\"n\">publoc</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n\t\t <span class=\"cm\">/*쓰레드가 할 동작 정의*/</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">Class</span> <span class=\"n\">main</span> <span class=\"kd\">implements</span> <span class=\"nc\">Runnable</span><span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n\t\t<span class=\"nc\">Thread</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">myRun</span><span class=\"o\">());</span>\n\t\t<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>쓰레드는 run 메소드를 직접호출하는것이 아니라, start 메소드를 통해 간접적인 run 메소드의 호출을 발생시켜야 정상동작한다.</p>\n\n<p>멀티쓰레딩 프로그램을 작성할때, 특정 쓰레드를 기다리거나 자원이 다 사용될때까지 기다릴 필요가 있다. 그럴때에는 다음과같은 메소드를 이용한다.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>메소드</th>\n      <th>내용</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Thread.join()</td>\n      <td>해당 쓰레드가 종료되기를 기다린다.</td>\n    </tr>\n    <tr>\n      <td>Thread.wait()</td>\n      <td>자원을 기다린다</td>\n    </tr>\n    <tr>\n      <td>Thread.notify()</td>\n      <td>대기하고있는 쓰레드에게 다시 작업하라고 알린다</td>\n    </tr>\n    <tr>\n      <td>Thread.interrupt()</td>\n      <td>interruptedException를 발생시킨다</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>쓰레드의 상태는 어떤것이 있을까 ?</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>상태</th>\n      <th>설명</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>NEW</td>\n      <td>스레드 객체가 생성된 시점</td>\n    </tr>\n    <tr>\n      <td>RUNNABLE</td>\n      <td>객체가 생성되고, 실행준비가 완료된 상태</td>\n    </tr>\n    <tr>\n      <td>WAITING</td>\n      <td>다른 스레드가 notify할때까지 대기하는 상태</td>\n    </tr>\n    <tr>\n      <td>TIMED_WAITNH</td>\n      <td>주어진 시간동안 기다리는 상태</td>\n    </tr>\n    <tr>\n      <td>BLOCKED</td>\n      <td>사용하고자 하는 자원의 lock이 풀릴때까지 대기하는 상태</td>\n    </tr>\n    <tr>\n      <td>TERMINATED</td>\n      <td>실행을 끝마친 상태</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>간략하게 어떤 상태인지 테스트해보자.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"nn\">com.ssafy.day0819</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Test01</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"쓰레드상태확인\"</span><span class=\"o\">);</span>\n\t\t<span class=\"nc\">Thread</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"쓰레드 실행 끝남\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">};</span>\n\t\t\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getState</span><span class=\"o\">().</span><span class=\"na\">name</span><span class=\"o\">());</span>\n\t\t\n\t\t<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getState</span><span class=\"o\">().</span><span class=\"na\">name</span><span class=\"o\">());</span>\n\t\t\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getState</span><span class=\"o\">().</span><span class=\"na\">name</span><span class=\"o\">());</span>\n\t\t\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">getState</span><span class=\"o\">().</span><span class=\"na\">name</span><span class=\"o\">());</span>\n\t\t\n\t<span class=\"o\">}</span>\n\t\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>실행결과:\n쓰레드상태확인\nNEW\nRUNNABLE\n쓰레드 실행 끝남\nTERMINATED\nTERMINATED\n</code></pre></div></div>\n\n<p>join과 wait는 직접 사용해보는것으로.</p>\n\n<h4 id=\"simple-horse-game\">simple horse game</h4>\n<p>```java\nimport java.util.Random;</p>\n\n<p>class Horse extends Thread{\n\tHorse(String name){\n\t\tsuper(name);\n\t}\n\t@Override\n\tpublic void run() {\n\t\tRandom r =new Random();\n\t\tint distance= 0;\n\t\twhile(true) {\n\t\t\tdistance+=r.nextInt(90)+11;\n\t\t\tif(distance &gt; 10000) return ;\t\t\t\n\t\t\tSystem.out.println(this.getName()+”말 :”+(distance/100)+ “m 뛰고있음”);\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t}\n\t\t\tcatch(Exception e) {}\t\t\t\n\t\t}\n\t}\t\t\n}</p>\n\n<p>public class Test02 {\n\tpublic static void main(String[] args) {</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\tHorse h1=new Horse(\"1번\");\n\tHorse h2=new Horse(\"2번\");\n\tHorse h3=new Horse(\"3번\");\n\tHorse h4=new Horse(\"4번\");\n\tSystem.out.println(\"경주를 시작합니다.\");\n\th1.start();h2.start();h3.start();h4.start();\n\ttry{h1.join();h2.join();h3.join();h4.join();}\n\tcatch(Exception e){e.printStackTrace();}\n\tSystem.out.println(\"경기가 종료되었습니다.\");\n}\n</code></pre></div></div>\n\n<p>}</p>","excerpt":"# OOP 란?\n\n한글로 객체지향 프로그래밍. \n데이터와 이를 처리하는 루틴을 하나의 독립된 객체로 동작하는 것을 지향하는 것을 말합니다.","languages":null,"categories":["posts"],"tags":["Java"]},{"title":"커뮤니케이션 티칭 웹 서비스","permalink":"https://jaehyunup.github.io/emotion_recognize2.html","link":"https://jaehyunup.github.io/emotion_recognize2.html","date":"2019-11-13T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<!-- Start Writing Below in Markdown -->\n\n<h3 id=\"들어가는-글\">들어가는 글</h3>\n<hr />\n\n<p>감정인식.. 얼굴인식과 비슷한 맥락이다\nCNN을 이용하고 <a href=\"https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge/data\">fer2013</a> Dataset을 이용해서 학습을 시켰다.</p>\n\n<p>모델의 구성은 다음과 같다</p>\n\n<p><img src=\"/img/emotion_model.png\" alt=\"\" /></p>\n\n<p>학습에 대한 과정은 <a href=\"https://github.com/gitshanks/fer2013\">https://github.com/gitshanks/fer2013</a> 이분의 github를 참고를 많이했고 내가 직접 학습시킬때 보다 훨씬 더 좋은 결과를 낼 수 있었다.</p>\n\n<hr />\n\n<blockquote>\n  <p><strong>내가 개발하고있는 감정인식 모듈의 파이프라인은 다음과 같다.</strong></p>\n  <ol>\n    <li>Video Frame read (OpenCV)</li>\n    <li>얼굴 영역 인식(Dlib FaceDetector)</li>\n    <li>얼굴 영역을 Crop</li>\n    <li>Crop된 얼굴 영역을 미리 학습해둔 학습모델에 Predict.(Keras)</li>\n    <li>반환값을 이용해 감정의 변화를 확인하고 피드백 해줌</li>\n  </ol>\n</blockquote>\n\n<p>현재 내가 개발하고있는 모듈의 상태는 5단계인 <strong>반환값을 이용해 감정의 변화를 확인하고 피드백</strong> 을 제공하는 수준을 바라보고있다.</p>\n\n<p><img src=\"/img/emotion_test.png\" alt=\"\" /></p>\n\n<p>요청된 비디오에따라 감정 변화와 프레임별 감정을 기록하고 이 정보를 통해서 화자의 감정표현이 올바른지, 아닌지 판별하고 피드백을 줄수있게끔 준비해둔 상태이다.</p>\n\n<p>이제 이 감정들을 얼마나 잘 활용하는지가 문제인데.. 조금 더 고민해봐야할 문제인것같다</p>\n\n<p>이제 감정인식은 개발되었고 다음으로 할것은 <strong>음성어조분석, 자연어 분석을 통한 키워드 찾기</strong> 정도가 남았다고 할 수있겠다.</p>\n\n<p>이제 자연어분석을 공부해야겠다.</p>","excerpt":"","languages":null,"categories":["posts"],"tags":["Development"]},{"title":"카카오 Vision REST API 사용기(python,requests)","permalink":"https://jaehyunup.github.io/kakaoVisionAPI.html","link":"https://jaehyunup.github.io/kakaoVisionAPI.html","date":"2019-10-04T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h3 id=\"여담\">여담</h3>\n<hr />\n\n<p>평소에 비전쪽을 많이 했었는데 마침 VISION API를 사용하게 되어 적는 글이다</p>\n\n<p>(Python에서 사용하는 예제가 없기에 기본적인 사용법 정도를 예제로 보여주려한다.)</p>\n\n<p>요즘 화두에 오른 유명 롤 BJ인 강만식씨의 방플의 여부가 궁금해서 개발자 답게 접근해보고자 그의 캠 얼굴 각도가 어떻게 변화하고있는지 한번 관측하고 싶어 사용했다.\n<strong>정말 의미있는 결과가 나올 수 있다면 더 더욱 좋다</strong> 내 능력으로 사람들의 궁금한 부분을 긁어줄 수 있는거니까. 하지만 캠 각도나 화질이 부족하기때문에 잘 될 진모르겠다.</p>\n\n<p><br /><br /><br /></p>\n\n<h3 id=\"kakao-vision-api\">KAKAO VISION API</h3>\n<hr />\n\n<p><img src=\"/img/face_demo2.jpg\" width=\"350\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<p><br />\n<br /></p>\n\n<p>카카오 VISION API는 REST API 으로 제공되어지고있다.\n원하는 파라미터로 해당 API에 요청을 날리면 답변을 해준다는것이다.</p>\n\n<p>카카오 API를 사용하기위해선 우선 카카오 개발자 사이트에 들어가서 API키를 발급받아야한다.</p>\n\n<p><a href=\"https://developers.kakao.com/docs/restapi#앱-생성\">카카오 API키 발급 공식 레퍼런스 보기</a></p>\n\n<p>위 카카오 개발자 사이트를 참고하여 따라가다 보면 키가 발급될 것이다 \n우리는 VISION API를 이용할 것이니 <strong>REST API 키를 잘 기억해둬야 한다</strong></p>\n\n<p><br />\n<br /></p>\n\n<h3 id=\"opencv-python-requests-모듈-설치\">OpenCV-python, Requests 모듈 설치</h3>\n\n<p>이미지 처리를 위해 OpenCV를 설치하고 REST API 에게 요청을 보내고 받기위해 requests 모듈을 설치한다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> pip <span class=\"nb\">install </span>opencv-python\n pip <span class=\"nb\">install </span>requests\n</code></pre></div></div>\n<p><br />\n<br /></p>\n\n<h3 id=\"동영상을-rest-api에-보내보자\">동영상을 REST API에 보내보자</h3>\n<hr />\n\n<p>동영상을 프레임마다 잘라서 계속 REST API에 요청을 할건데 사실 이건 미친짓이다. \n카카오 개발자 분들이 아시면 화낼듯ㅎㅋ</p>\n\n<p>OpenCV의 videoCapture 객체를 Read하면서 while문을 통해 계속 요청을 보낼건데 이렇게 되면 너무 잦은 요청이 일어남..ㅎㅎ 하지만 테스트용이니까 괜찮죠 뭐</p>\n\n<p>그럼 우선 REST API와 요청과 응답을 주고받는 방법을 알아보자\n<br />\n<br /></p>\n\n<h3 id=\"kakao-vision-api와-요청-응답-주고받기\">KAKAO VISION API와 요청 응답 주고받기</h3>\n<hr />\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">FACE_API_URL</span> <span class=\"o\">=</span><span class=\"s\">'https://kapi.kakao.com/v1/vision/face/detect'</span>\n<span class=\"n\">apiKey</span><span class=\"o\">=</span><span class=\"s\">\"YOUR_API_KEY\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">face_detector</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'Authorization'</span><span class=\"p\">:</span> <span class=\"s\">'KakaoAK {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">apiKey</span><span class=\"p\">)}</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'file'</span> <span class=\"p\">:</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)}</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">FACE_API_URL</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p><br /></p>\n\n<p>카카오 VISION API에 요청을 하려면 다음과 같은 3가지 요소가 필요하다고 명시되어있다.</p>\n<ol>\n  <li>POST 요청이어야 한다.</li>\n  <li>APIKEY를 요청 헤더에 담아야 한다.</li>\n  <li>파라미터로는 imageFile( JPG or PNG ) 이나 imageURL을 담아야 한다.</li>\n</ol>\n\n<p>그걸 구현해둔것이 바로 위의 함수이다.\napi 키는 적절하게 자신껄로 넣을수 있도록하면 된다</p>\n\n<p>이 함수에 현재 디렉토리 기준으로 file의 path기재하면 그 파일을 파라미터로 담아 \n카카오 REST API에 요청하게되며 응답으로 Json Result를 받게된다</p>\n\n<p>나 같은 경우에는 이 함수를 동영상 한 프레임이 지날때 호출했다\n<br />\n<br /></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">__name__</span><span class=\"o\">==</span><span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">cam</span><span class=\"o\">=</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"s\">\"issue1.mp4\"</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">cam</span><span class=\"p\">.</span><span class=\"n\">isOpened</span><span class=\"p\">()):</span>\n        <span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"n\">frame</span><span class=\"o\">=</span><span class=\"n\">cam</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">ret</span><span class=\"p\">:</span>\n            <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"s\">'capture.png'</span><span class=\"p\">,</span><span class=\"n\">frame</span><span class=\"p\">)</span> <span class=\"c1\"># 이미지저장\n</span>            <span class=\"n\">height</span><span class=\"p\">,</span><span class=\"n\">width</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"o\">=</span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n            <span class=\"n\">files</span><span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">'*.png'</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n                <span class=\"n\">json_data</span><span class=\"o\">=</span><span class=\"n\">face_detector</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n                <span class=\"n\">json_result</span><span class=\"o\">=</span><span class=\"n\">json_data</span><span class=\"p\">[</span><span class=\"s\">\"result\"</span><span class=\"p\">]</span>\n                <span class=\"n\">face</span><span class=\"o\">=</span><span class=\"n\">json_result</span><span class=\"p\">[</span><span class=\"s\">\"faces\"</span><span class=\"p\">]</span>\n                <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'x'</span><span class=\"p\">]</span>\n                <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'y'</span><span class=\"p\">]</span>\n                <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'w'</span><span class=\"p\">]</span>\n                <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'h'</span><span class=\"p\">]</span>\n                <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n                <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">)</span>\n                <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">)</span>\n                <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'pitch'</span><span class=\"p\">]</span> <span class=\"c1\">#상하회전\n</span>                <span class=\"n\">yaw</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'yaw'</span><span class=\"p\">]</span> <span class=\"c1\">#좌우회전\n</span>                <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'roll'</span><span class=\"p\">]</span><span class=\"c1\">#목 기준 좌우 꺾이는지\n</span>                <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),((</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">),(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">)),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">),</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">)</span>\n            <span class=\"n\">resize_frame</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">dsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1080</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">),</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">INTER_AREA</span><span class=\"p\">)</span>\n            <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s\">'KAKAO VISION API EXAMPLE'</span><span class=\"p\">,</span> <span class=\"n\">resize_frame</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span> <span class=\"o\">==</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'q'</span><span class=\"p\">):</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<p>또, 추가로 반환받은 Json의 값을 파싱하여 해당 얼굴의 좌표에 박스를 그린다.</p>\n\n<p>그리고 얼굴의 회전각까지 받은상태이다 하지만 회전각 활용은 다음에 하는것으로.</p>\n\n<p><br /><br /></p>\n\n<h3 id=\"구현결과\">구현결과</h3>\n<hr />\n\n<p><img src=\"/img/man.png\" alt=\"\" /></p>\n\n<p><img src=\"/img/man.png\" width=\"700\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<p><br /> 강만식님의 얼굴을 인식하고 회전각중 YAW를 출력하는 것을 알 수 있다.</p>\n\n<p>하다보니 이미지 자체의 화질이 너무 낮아서 그런가 정확도가 다소 낮은것같았고 시간도 부족해서 여기서 그만두기로 했다. PS 공부로 너무 바빠서 신경을 더 써줄 여유가 없다..</p>\n\n<p><br />\n<br /></p>\n\n<hr />\n\n<h2 id=\"마치는-글\">마치는 글</h2>\n<p><br /></p>\n\n<p>강만식님을 진심으로 응원합니다</p>\n\n<p>단지 연구목적의 글임을 분명히 밝힙니다.</p>","excerpt":"여담\n\n\n평소에 비전쪽을 많이 했었는데 마침 VISION API를 사용하게 되어 적는 글이다","languages":null,"categories":["posts"],"tags":["Development"]},{"title":"OpenFace를 이용한 얼굴 학습/인식 REST API 개발기(python,Tensorflow,flask-restful)","permalink":"https://jaehyunup.github.io/face_recognize_project.html","link":"https://jaehyunup.github.io/face_recognize_project.html","date":"2019-10-02T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<!-- Start Writing Below in Markdown -->\n\n<h3 id=\"개발-계기\">개발 계기</h3>\n<hr />\n\n<p>저번학기 프로젝트 진행중 스마트 홈 시스템을 프로젝트로 하여 내부적으로 얼굴인식을 통한 보안기능을 넣었었다.</p>\n\n<p>하지만 스마트홈 특성상 MCU 기기(프로젝트에서는 Raspberry Pi 3 B+ Model) 를 사용하는 환경이 대부분이고 이런 환경구성에서 Image Processing과 머신러닝을 사용한다는 것은 불가능 했다\n왜냐..<strong>너무 느려!</strong></p>\n\n<p>혹시나 하는 마음에 OpenFace에서 제공하는 얼굴인식 모듈을 어찌어찌 rasbian에 설치했다.\n실행하니 한 두개의 이미지만 30분 비교하다가 메모리 부족으로 에러가 뜬다..에효</p>\n\n<p>그래서 이 OpenFace를 활용한 얼굴인식 부분만 REST API로 개발해서 GTX 1060이 달린 내 개인 PC에 연산을 맡길것이다.</p>\n\n<p>카카오나 네이버에서 제공하는 RESTAPI의 그것과 같은 서비스들을 만들어보고싶다고 항상 생각했었는데 이참에 REST API도 만들어보고 마이크로서비스가 어떻게 구성되어지는가에 대한 이해도 겸할수 있을것 같아 좋은 경험일것 같았다.</p>\n\n<p><br />\n<br /></p>\n\n<p>혹여나 일반적인 리눅스환경에서 OpenFace모듈을 사용하고싶다면 \n<a href=\"https://www.popit.kr/openface-exo-member-face-recognition/\">OpenFace로 우리 오빠들 얼굴 인식하기</a> 위 링크를 보길 바란다.\n이분이 OpenFace의 디렉토리 구조까지 아주 잘 설명해뒀다.</p>\n\n<p><br /></p>\n\n<hr />\n\n<h3 id=\"openface\">OpenFace</h3>\n\n<p><a href=\"https://cmusatyalab.github.io/openface/\">Openface</a>는 얼굴 유사도측정 오픈소스이다.\n링크의 openface doc을 보면 내부가 어떻게 구성되어있는지 잘 설명이 되어있다.</p>\n\n<p>한번 살펴보겠다.</p>\n\n<h2 id=\"overview\">OVERVIEW</h2>\n<blockquote>\n  <ol>\n    <li>\n      <p>Detect faces with a pre-trained models from dlib or OpenCV.</p>\n    </li>\n    <li>\n      <p>Transform the face for the neural network. This repository uses dlib’s real-time pose estimation with OpenCV’s affine transformation to try to make the eyes and bottom lip appear in the same location on each image.<br /></p>\n    </li>\n    <li>\n      <p>Use a deep neural network to represent (or embed) the face on a 128-dimensional unit hypersphere. The embedding is a generic representation for anybody’s face. Unlike other face representations, this embedding has the nice property that a larger distance between two face embeddings means that the faces are likely not of the same person. This property makes clustering, similarity detection, and classification tasks easier than other face recognition techniques where the Euclidean distance between features is not meaningful.</p>\n    </li>\n  </ol>\n</blockquote>\n\n<p>영어 해석하기 귀찮으시죠..? 이 남자는 무료로 해드립니다</p>\n\n<p>(대신 간단하게!)</p>\n<ol>\n  <li>openface는 Dlib 또는 OpenCV를 이용해서 훈련된 모델로 얼굴 영역을 감지한다.</li>\n  <li>감지된 얼굴영역을 OpenCV의 <a href=\"https://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/warp_affine/warp_affine.html\">아핀변환</a>과 Dlib의 <a href=\"http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html\">실시간 얼굴포즈 추론</a>을 이용해서 모든 사진에서의 얼굴 정규화를 한다(즉, 같은 각도를 가진 얼굴이 될수있게끔 정규화를 시킨다)</li>\n  <li>딥러닝을 이용해서 얼굴을 128-Embedding Vector로 표현한다.</li>\n</ol>\n\n<p><br />\n정규화 과정(얼굴포즈 추론과 아핀 변환) 은 다음과 비슷하게 이루어진다<br /></p>\n\n<p><img src=\"/img/affine_transformation.png\" width=\"300\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" />출처 - Openface</p>\n\n<p><br /></p>\n\n<p>그렇다 openface의 기학습된 딥러닝 모델에 얼굴 정규화과정만 거쳐서 predict한 결과는 \n128-embedding Vector로 표현되어지고 그 결과는 그 사람만의 128-embedding Vector인것이다.</p>\n\n<p>즉, 얼굴이 완전 다르게 생긴 철수와 영희의 얼굴사진을 Openface의 딥러닝 모델에 넣고 predict한 결과인 철수의 embedding Vector와 영희의 embedding Vector는 멀리 떨어져 표현된다는 것이다.</p>\n\n<p>반대로 얼굴이 비슷하게 생긴 철수와 철구의 얼굴사진을 넣어 predict한 결과로 얻은 두개의 128-embedding vector는 유클리드 공간상의 거리가 가깝다!(얼굴이 비슷하니까)</p>\n\n<p>이제 우린 OpenFace가 어떤식으로 얼굴의 유사도 측정을 하는지 알게 되었다.</p>\n\n<hr />\n\n<h3 id=\"openface-사용하기\">OpenFace 사용하기</h3>\n\n<p><img src=\"/img/openface_artifact.png\" width=\"600\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<p>출처- https://blog.algorithmia.com/understanding-facial-recognition-openface</p>\n\n<p><br />\nOpenface는 Torch 기반으로 학습시킨 기학습된 Neural NetWorkModel을 제공중이다.\n그것이 그림에서 보라색 박스로 표현된 부분이고, 결과적으로 학습된 뉴럴네트웍을 제공해주는데 사용자가 사용하기 위해서는, 위에서 말한 정규화 Processing을 거치고 기학습되어 제공되는 NeuralNetwork에 Predict한 결과로 Classification을 하여 얼굴 정확도를 검증하는것이다.</p>\n\n<p>그렇다면 위에서 우리가 구현해야할 부분은 빨간색 박스 부분이다.</p>\n\n<p>저부분을 구현해서, 사용자의 Embedding Vector를 저장하고, 얼굴 인식 요청이 왔을때\n현재 카메라에 감지되는 사람과 저장된 Embedding Vector 리스트를 Classification  <strong>저장된 임베딩벡터와의 유사도가 아주높다고 판단되었을때만</strong> True를 반환해주는 REST API로 구현할 것이다.</p>\n\n<hr />\n\n<h3 id=\"rest-api-소개\">REST API 소개</h3>\n<p>위에서 설명한 것을 토대로 REST API를 개발했는데 사용자가 이용하는 유스케이스로 간단하게 표현한 구조는 아래와 같다.</p>\n\n<p><img src=\"/img/rest_artifact.png\" width=\"800\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<h5 id=\"작동순서\">작동순서</h5>\n<ol>\n  <li>사용자는 REST API에 카메라 영상을 포함하여 얼굴인식요청을 한다</li>\n  <li>요청을 받은 서버는 카메라 영상에서 얼굴 영역을 인식한다(Haar Cascade 이용)</li>\n  <li>인식된 얼굴영역을 자른다</li>\n  <li>Dlib을 이용해 얼굴의 68-landmark을 구분하고 68-landmark중 코에 해당하는 Landmark부분을 중앙으로 오게하여 이미지의 중앙에 코가 올수있도록 얼굴 위치를 이동시킨다.</li>\n  <li>이 이미지를 OpenFace에서 기학습한 Neural Network Model을 이용해 Predict값을 받는다</li>\n  <li>Embedding Vector를 통해 얼굴 유사도를 측정한다</li>\n</ol>\n\n<h5 id=\"구현결과\">구현결과</h5>\n\n<p><img src=\"/img/parkjaehyun.png\" width=\"150\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" />\n<img src=\"/img/embedding.gif\" width=\"400\" style=\"display:block;margin-left:auto; margin-right:auto;margin-top:20px;\" /></p>\n\n<p>RESTAPI 요청이나 그런 과정들은 생략하였다. 글이 너무 길어질까봐..</p>\n\n<p>요청이 들어왔을때 RESTAPI를 가동중인 서버는 임베딩 벡터간의 거리를 측정하고, (일반적으로 0.6~7정도 아래로 내려가면 거의 같은사람이라고 보면 된다고 한다)\n해당되는 사람이 발견된다면 위와같이 Json형태로 결과를 반환해준다.</p>\n\n<h5 id=\"소스코드\">소스코드</h5>\n<p>내 깃허브에 webServer.py를 보면 모든 구조가 잘 정리되어있다. \n<a href=\"https://github.com/jaehyunup/raspberrypi_smarthomeproject/blob/master/face_recognizer/webServer.py\">https://github.com/jaehyunup</a>\n<br /><br /></p>\n\n<hr />\n\n<h3 id=\"마치는-글\">마치는 글</h3>\n\n<p>어떻게 보면 간단하지만 국내 자료가 별로 없어서 꽤 오래걸렸었다\n정리를 한 이유도 국내에서 처음 Openface를 사용하실분들의 불편함을 알기때문에..그런 불편함을 조금이나마 덜어보고자 정리를 했다 물론 엄청 자세하진 않지만ㅠㅠ</p>\n\n<p>특히나 torch로 구현된 openface의 모델을 Tensorflow기반으로 구현하는데도 고생을 좀 했다.</p>\n\n<p>또, 사실 REST API라 하기도 좀 뭐한 REST API라서 부끄럽기도 하다.\n그래도 불가능한 문제를 네트웍을 통해 클라우드서비스와 비슷하게 구현하여 해결해냈다는 것에 만족하는 프로젝트였다ㅎㅎ.</p>","excerpt":"","languages":null,"categories":["posts"],"tags":["Developement"]},{"title":"Open Graph","permalink":"https://jaehyunup.github.io/open-graph.html","link":"https://jaehyunup.github.io/open-graph.html","date":"2017-01-06T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>Theme Curtana has full Open Graph and Twitter Cards support.</p>\n\n<p>It will look for the image in the following order:</p>\n\n<ol>\n  <li>Use <code class=\"language-plaintext highlighter-rouge\">page.thumbnail</code> if defined in your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>.</li>\n  <li>If no specified <code class=\"language-plaintext highlighter-rouge\">page.thumbnail</code> defined, it uses <a href=\"/custom-heading-background.html\">Heading Background Image</a> (aka. <code class=\"language-plaintext highlighter-rouge\">page.heading-bg</code>) if defined in your post front-matter field.</li>\n  <li>If no heading background image found, Curtana will try to grab the first image (wrapped inside <code class=\"language-plaintext highlighter-rouge\">&lt;img&gt;</code>) in your post as your post thumbnail</li>\n  <li>If nothing found, it falls back to <code class=\"language-plaintext highlighter-rouge\">logo.png</code> located at your site root.</li>\n</ol>\n\n<p>You can always use <code class=\"language-plaintext highlighter-rouge\">page.thumb_force_logo</code> in your post’s front-matter field to override the above lookup.</p>\n\n<p>Here’s a preview on Twitter:</p>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/open-graph-preview.png\" alt=\"Twitter Cards (Open Graph compatible) Preview\" /></p>","excerpt":"Theme Curtana has full Open Graph and Twitter Cards support.","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Introducing Curtana","permalink":"https://jaehyunup.github.io/theme-curtana.html","link":"https://jaehyunup.github.io/theme-curtana.html","date":"2016-06-01T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>Curtana is the default theme of <a href=\"https://sparanoid.com/lab/amsf/\">AMSF</a> (Almace Scaffolding).</p>\n\n<h3 id=\"features\">Features</h3>\n\n<ul>\n  <li>A variant of <a href=\"https://sparanoid.com/\">sparanoid.com</a>, looking great on any modern browsers</li>\n  <li>Minimalism design, No jQuery, no <code class=\"language-plaintext highlighter-rouge\">everybody-shake-ur-body.js</code></li>\n  <li>Ideal for the personal blog, portfolio, product blog and Tumblr-like link blog</li>\n  <li>(Maybe) <a href=\"https://github.com/sparanoid/sparanoid.com/commit/9b44b4c0f57c3dd1e828d828a95cc21b992785ce\">the first</a> template that uses <a href=\"https://www.w3.org/TR/css3-values/#viewport-relative-lengths\">viewport relative units</a></li>\n  <li>Handcrafted stylesheets. No Bootstrap or other bloated frameworks are used, unminified CSS &lt; 12 KB</li>\n  <li>Predefined CSS and Sass (SCSS) variables make it easier to change color schemes for posts</li>\n  <li>Dynamic color scheme for code highlighters powered by <a href=\"https://sparanoid.com/lab/randomized/\">Randomized</a></li>\n  <li>Open Graph and Twitter Cards support</li>\n  <li>No Internet Explorer support</li>\n</ul>","excerpt":"Curtana is the default theme of AMSF (Almace Scaffolding).","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Deployment Methods","permalink":"https://jaehyunup.github.io/deployment-methods.html","link":"https://jaehyunup.github.io/deployment-methods.html","date":"2016-03-18T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>Sites generated using Almace Scaffolding can be deployed in nearly any web hosting services. A few of the most common deployment techniques are described below. More deployment methods please refer to <a href=\"https://jekyllrb.com/docs/deployment-methods/\">Jekyll - Deployment methods</a>.</p>\n\n<h2 id=\"web-hosting-providers-ftpsftp\">Web Hosting Providers (FTP/SFTP)</h2>\n\n<p>Just about any traditional web hosting provider will let you upload files to their servers over FTP. You can simply run the <code class=\"language-plaintext highlighter-rouge\">grunt build</code> command and upload all files generated under <code class=\"language-plaintext highlighter-rouge\">_site</code> to the HTTP root folder of your hosting account.</p>\n\n<h2 id=\"rsync\">rsync</h2>\n\n<p>There’s a <code class=\"language-plaintext highlighter-rouge\">_deploy.yml</code> at the root of your AMSF project containing a basic <code class=\"language-plaintext highlighter-rouge\">rsync</code> configurations. Change these configurations to yours and then run:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt deploy:rsync\n</code></pre></div></div>\n\n<p>You can deploy it for specific environments, the following command will deploy your site to <code class=\"language-plaintext highlighter-rouge\">beta</code> environment via <code class=\"language-plaintext highlighter-rouge\">rsync</code> method you defined in <code class=\"language-plaintext highlighter-rouge\">_deploy.yml</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt deploy:rsync <span class=\"nt\">--env</span><span class=\"o\">=</span>beta\n</code></pre></div></div>\n\n<h2 id=\"amazon-s3-s3_website\">Amazon S3 (s3_website)</h2>\n\n<p>You can also deploy your site to Amazon S3 via <a href=\"https://github.com/laurilehmijoki/s3_website\">s3_website</a>, see <code class=\"language-plaintext highlighter-rouge\">s3_website.example.yml</code> for more info.</p>","excerpt":"Sites generated using Almace Scaffolding can be deployed in nearly any web hosting services. A few of the most common deployment techniques are described below. More deployment methods please refer to Jekyll - Deployment methods.","languages":null,"categories":["note"],"tags":["deployment"]},{"title":"Welcome","permalink":"https://jaehyunup.github.io/welcome.html","link":"https://jaehyunup.github.io/welcome.html","date":"2014-06-13T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>AMSF, a.k.a. <strong>Almace Scaffolding</strong>, is a super-fast Jekyll framework fighting against the website obesity. It supports LiveReload, Sass, HTML minification, inlined stylesheets and more.</p>\n\n<p class=\"largetype\">\n  <a href=\"/getting-started.html\">Getting Started →</a>\n</p>\n\n<p>Go to the <a href=\"https://github.com/sparanoid/almace-scaffolding\">GitHub</a> page for downloads, bug reports, and feature requests.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n  <li>Theme switching, you can switch themes with just one command</li>\n  <li>A fully configured Jekyll setup with well-defined <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/feed-atom.xml\">Atom feed</a> and <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/sitemap.xml\">sitemap</a></li>\n  <li><strong>Almace Scaffolding</strong> ships a sleek responsive theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>, a variant of <a href=\"https://sparanoid.com/\">sparanoid.com</a>, looking great on any modern browsers</li>\n  <li>Every minified page generates only one HTTP request <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup></li>\n  <li><a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_config.example.yml\">Tons of configurable settings</a> for your posts and site customization</li>\n  <li>Service Worker support for lightning-fast experience</li>\n  <li>Built with Grunt.js for easy development</li>\n  <li>Travis support</li>\n</ul>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Based on the theme you’re using, theme Curtana generates only one HTTP request for production build when your posts don’t have fancy sliders or other external media files. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"AMSF, a.k.a. Almace Scaffolding, is a super-fast Jekyll framework fighting against the website obesity. It supports LiveReload, Sass, HTML minification, inlined stylesheets and more.","languages":null,"categories":["note"],"tags":["getting-started"]},{"title":"Getting Started","permalink":"https://jaehyunup.github.io/getting-started.html","link":"https://jaehyunup.github.io/getting-started.html","date":"2014-06-12T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"requirements\">Requirements</h2>\n\n<p>Almace Scaffolding has exactly the same requirements as Jekyll. For more info please refer to <a href=\"https://jekyllrb.com/docs/installation/\">Installation - Jekyll</a>.</p>\n\n<h2 id=\"quick-start\">Quick Start</h2>\n\n<ol>\n  <li><a href=\"https://github.com/sparanoid/almace-scaffolding/fork\">Fork</a> or clone the repo.</li>\n  <li>Install dependencies with Ruby gem <a href=\"https://bundler.io/\"><code class=\"language-plaintext highlighter-rouge\">bundler</code></a> and Node.js package manager <a href=\"https://www.npmjs.org/\"><code class=\"language-plaintext highlighter-rouge\">npm</code></a>.</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">grunt init</code> to initialize your project.</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">grunt serve</code> to fire up a local server.</li>\n  <li>Edit and customize your site.</li>\n  <li>Change Git remote to your own repo.</li>\n  <li>Push and deploy.</li>\n</ol>\n\n<p>So in short for geeks:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git clone https://github.com/sparanoid/almace-scaffolding my-site\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>my-site\n<span class=\"nv\">$ </span>bundle <span class=\"nb\">install</span> <span class=\"o\">&amp;&amp;</span> yarn <span class=\"nb\">install</span>\n<span class=\"nv\">$ </span>grunt init\n<span class=\"nv\">$ </span>grunt serve\n<span class=\"c\"># ...editing</span>\n<span class=\"nv\">$ </span>git remote set-url origin https://github.com/sparanoid/my-site.git\n<span class=\"nv\">$ </span>git push <span class=\"nt\">-u</span> origin master\n<span class=\"c\"># ...publishing</span>\n<span class=\"nv\">$ </span>grunt <span class=\"o\">&amp;&amp;</span> grunt deploy:rsync <span class=\"nt\">--env</span><span class=\"o\">=</span>prod\n</code></pre></div></div>\n\n<h2 id=\"download\">Download</h2>\n\n<p>Go to the <a href=\"https://github.com/sparanoid/almace-scaffolding\">GitHub repository</a> for downloads, bug reports, and feature requests.</p>\n\n<h2 id=\"transfer-from-jekyll\">Transfer from Jekyll</h2>\n\n<p>You can simply copy all posts from your old Jekyll setup into <code class=\"language-plaintext highlighter-rouge\">_app/_posts</code>, you can also transfer your custom pages into <code class=\"language-plaintext highlighter-rouge\">_app/_pages/</code>.</p>\n\n<h2 id=\"upgrading\">Upgrading</h2>\n\n<p>It will be easy if you’re a casual blogger and keep every core and template file untouched. You can use the following command to update Almace Scaffolding core files:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update\n</code></pre></div></div>\n\n<p>It checks the latest Almace Scaffolding build from GitHub and updates core files automatically. Please keep in mind that if you changed some of the AMSF core files this action will <strong>override</strong> the changes you made. So it’s recommended to keep your project under version control, you will always be able to compare changes for Almace Scaffolding.</p>\n\n<h2 id=\"using-beta-release\">Using Beta Release</h2>\n\n<p>By default, when you run <code class=\"language-plaintext highlighter-rouge\">amsf-update</code> you will get updated files from <code class=\"language-plaintext highlighter-rouge\">release</code> branch. However, I’m continuously working on Almace Scaffolding, so there may have testing branches you can try and give me feedback if you’re interested. You can check the AMSF GitHub repository for available branches, and it’s very easy to switch:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update <span class=\"nt\">--branch</span><span class=\"o\">=</span>feat/service-worker\n</code></pre></div></div>\n\n<p>The branch <code class=\"language-plaintext highlighter-rouge\">master</code> is the one which is always available to check out and also has the latest changes:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update <span class=\"nt\">--branch</span><span class=\"o\">=</span>master\n</code></pre></div></div>\n\n<p>If you messed up with the testing branch, don’t worry, you can just run a normal update to revert them back:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update\n</code></pre></div></div>","excerpt":"Requirements","languages":null,"categories":["note"],"tags":["getting-started"]},{"title":"Customizing Styles","permalink":"https://jaehyunup.github.io/customizing-styles.html","link":"https://jaehyunup.github.io/customizing-styles.html","date":"2014-06-11T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>You can customize the basic look and feel without touching the theme files by changing <code class=\"language-plaintext highlighter-rouge\">user.js</code> and <code class=\"language-plaintext highlighter-rouge\">user.scss</code>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── assets/\n|   |   └── _js/\n|   |   |   └── user.js\n|   |   └── _scss/\n|   |   |   └── user.scss\n|   |   └── themes/\n|   |   |   └── ...\n</code></pre></div></div>\n\n<p>These files won’t be overwritten when you update Almace Scaffolding or update your themes.</p>","excerpt":"You can customize the basic look and feel without touching the theme files by changing user.js and user.scss:","languages":null,"categories":["note"],"tags":["customization"]},{"title":"Configuration","permalink":"https://jaehyunup.github.io/configuration.html","link":"https://jaehyunup.github.io/configuration.html","date":"2014-06-11T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"configuration-settings\">Configuration Settings</h2>\n\n<ul>\n  <li>All AMSF built-in settings can be configured at <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_config.yml\"><code class=\"language-plaintext highlighter-rouge\">_config.yml</code></a>.</li>\n  <li>Theme specific variables can be found at <code class=\"language-plaintext highlighter-rouge\">./_app/_data/theme-name.yml</code>.</li>\n  <li>Additional variables are stored in <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/_data\"><code class=\"language-plaintext highlighter-rouge\">./_app/_data/</code></a> directory. They can be accessed by Jekyll. (<a href=\"https://jekyllrb.com/docs/datafiles/\">More info</a>)</li>\n  <li>You should also change <code class=\"language-plaintext highlighter-rouge\">favicon.*</code> and <code class=\"language-plaintext highlighter-rouge\">apple-touch-icon.png</code> to yours.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">logo.png</code> is mainly used by Open Graph and Twitter Cards when there’s no featured image in a post, you should also design your own.</li>\n  <li>More customization please refer to theme-specific documentation</li>\n</ul>\n\n<h2 id=\"tips\">Tips</h2>\n\n<ul>\n  <li>Not familiar with <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a>? Try <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">Markdown Cheatsheet</a>.</li>\n  <li>You can use Jekyll’s <a href=\"https://jekyllrb.com/docs/templates/#code-snippet-highlighting\">built-in syntax highlighting</a>, I’ve included a default theme for this project.</li>\n  <li><a href=\"https://kramdown.gettalong.org/quickref.html#tables\">Tables</a> and <a href=\"https://kramdown.gettalong.org/quickref.html#footnotes\">footnotes</a> are also available to use.</li>\n</ul>","excerpt":"Configuration Settings","languages":null,"categories":["note"],"tags":["getting-started"]},{"title":"Themes","permalink":"https://jaehyunup.github.io/themes.html","link":"https://jaehyunup.github.io/themes.html","date":"2014-06-10T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"overview\">Overview</h2>\n\n<p>In the latest build, I’ve added multiple themes support, finally, you can switch themes with just one command.</p>\n\n<p class=\"note\">This is an experimental feature and may change until the feature stabilizes.</p>\n\n<h2 id=\"installing-themes\">Installing Themes</h2>\n\n<p>The AMSF framework ships a default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>. You can also install as many themes as you like and switch to the one you prefer at any time.</p>\n\n<h3 id=\"via-git-github\">Via Git (GitHub)</h3>\n\n<p>The easiest way to install a new theme is via <code class=\"language-plaintext highlighter-rouge\">theme-add</code>, the following command will install theme Curtana from its official repo <code class=\"language-plaintext highlighter-rouge\">amsf/amsf-curtana</code>:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-add <span class=\"nt\">--theme</span><span class=\"o\">=</span>curtana\n</code></pre></div></div>\n\n<p>If you’d install a custom theme from other users, append <code class=\"language-plaintext highlighter-rouge\">--user</code> in your command, the following command will install a new theme named <code class=\"language-plaintext highlighter-rouge\">bootstrap-sass</code> from <code class=\"language-plaintext highlighter-rouge\">sparanoid/amsf-bootstrap-sass</code></p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-add <span class=\"nt\">--theme</span><span class=\"o\">=</span>bootstrap-sass <span class=\"nt\">--user</span><span class=\"o\">=</span>sparanoid\n</code></pre></div></div>\n\n<h3 id=\"manually-install\">Manually Install</h3>\n\n<p>You can also install themes manually. find an AMSF theme (Curtana, for example), download the package and uncompress all files to <code class=\"language-plaintext highlighter-rouge\">.amsf-cache/themes</code> directory, the file structure should look like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── .amsf-cache/ (Almace Scaffolding cache directory)\n|   ├── themes/\n|   |   └── curtana/\n|   |   |   └── assets/\n|   |   |   └── includes/\n|   |   |   └── layouts/\n|   |   |   └── pages/\n|   |   |   └── config.yml\n└── _app/\n</code></pre></div></div>\n\n<p>Then execute the following command:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt activate <span class=\"nt\">--theme</span><span class=\"o\">=</span>curtana\n</code></pre></div></div>\n\n<p>Your current theme will be backed up to <code class=\"language-plaintext highlighter-rouge\">.amsf-cache/themes/your-old-theme/</code> and the new theme <code class=\"language-plaintext highlighter-rouge\">curtana</code> will be installed to the appropriate directories.</p>\n\n<h2 id=\"upgrading-themes\">Upgrading Themes</h2>\n\n<p>You can update your current activated theme by the following command. The activated theme will be downloaded from GitHub automatically if there’s any update:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-update\n</code></pre></div></div>\n\n<p>Please note that only themes added via GitHub can be updated.</p>","excerpt":"Overview","languages":null,"categories":["note"],"tags":["customization"]},{"title":"Creating Your Own Theme","permalink":"https://jaehyunup.github.io/creating-themes.html","link":"https://jaehyunup.github.io/creating-themes.html","date":"2014-06-09T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"overview\">Overview</h2>\n\n<p>You can create your own theme in AMSF, theme files are located in the following location (I use default theme Curtana here for better understanding):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── _data/\n|   |   └── curtana.yml\n|   ├── _includes/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   ├── _pages/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── example-page.md\n|   |   |   |   └── ...\n|   ├── assets/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── _js/\n|   |   |   |   └── _scss/\n|   |   |   |   └── ...\n</code></pre></div></div>\n\n<p>The theme specific config <code class=\"language-plaintext highlighter-rouge\">curtana.yml</code> should have the same filename as your theme name. It should contain theme-specific variables and can also override AMSF built-in settings.</p>\n\n<p>More info about theme structure you can check out my default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>.</p>\n\n<p>You can also have multiple themes in your project, as many as you like. For example if you also have themes Bootstrap and Ghost installed, the file structure should be:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── _data/\n|   |   └── bootstrap.yml\n|   |   └── curtana.yml\n|   |   └── ghost.yml\n|   ├── _includes/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   |   |   └── curtana/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   |   |   └── ghost/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   ├── _pages/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── example-about.md\n|   |   |   |   └── example-blog.md\n|   |   |   |   └── example-fluid-container.md\n|   |   |   |   └── ...\n|   |   |   └── curtana/\n|   |   |   |   └── example-about.md\n|   |   |   |   └── example-news.md\n|   |   |   |   └── ...\n|   |   |   └── ghost/\n|   |   |   |   └── example-archive.md\n|   |   |   |   └── example-page.md\n|   |   |   |   └── example-tagcloud.md\n|   |   |   |   └── ...\n|   ├── assets/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── _coffee/\n|   |   |   |   └── _scss/\n|   |   |   |   └── images/\n|   |   |   └── curtana/\n|   |   |   |   └── _js/\n|   |   |   |   └── _scss/\n|   |   |   |   └── svg/\n|   |   |   └── ghost/\n|   |   |   |   └── _js/\n|   |   |   |   └── _less/\n|   |   |   |   └── fonts/\n...\n</code></pre></div></div>\n\n<h2 id=\"amsf-options\">AMSF Options</h2>\n\n<p>There’re several built-in options you can use in your theme. These options can also be overridden in theme-specific config.</p>\n\n<h3 id=\"sitename\"><code class=\"language-plaintext highlighter-rouge\">site.name</code></h3>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"footer\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;</span>{{ site.name }}<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/atom.xml\"</span><span class=\"nt\">&gt;</span>Atom<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"footer\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;</span>Almace Scaffolding<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/atom.xml\"</span><span class=\"nt\">&gt;</span>Atom<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitedescription\"><code class=\"language-plaintext highlighter-rouge\">site.description</code></h3>\n\n<p>Site description will appear in the document meta and Atom feed subtitle.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"og:description\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ site.description }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"og:description\"</span> <span class=\"na\">content=</span><span class=\"s\">\"A super-fast Jekyll framework fighting against the website obesity.\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitefile\"><code class=\"language-plaintext highlighter-rouge\">site.file</code></h3>\n\n<p>Media assets URL used in posts, without trailing slash. In most cases this URL should be powered by a CDN provider.</p>\n\n<p>Config:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">file</span><span class=\"pi\">:</span> <span class=\"s\">//d349cztnlupsuf.cloudfront.net</span>\n</code></pre></div></div>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"{{ site.file }}/post-thumbnail.jpg\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"//d349cztnlupsuf.cloudfront.net/post-thumbnail.jpg\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitetwitter\"><code class=\"language-plaintext highlighter-rouge\">site.twitter</code></h3>\n\n<p>Site Twitter account handle.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://twitter.com/{{ site.twitter }}\"</span><span class=\"nt\">&gt;</span>Follow @{{ site.twitter }} on Twitter<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://twitter.com/sparanoid\"</span><span class=\"nt\">&gt;</span>Follow @sparanoid on Twitter<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"siteforce_utf_8\"><code class=\"language-plaintext highlighter-rouge\">site.force_utf_8</code></h3>\n\n<p>Force UTF-8 encoding, enable this will simply add <code class=\"language-plaintext highlighter-rouge\">&lt;meta charset=\"utf-8\"&gt;</code> to the head of your pages.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% if site.force_utf_8 %}\n  <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">&gt;</span>\n{% endif %}\n</code></pre></div></div>\n\n<h3 id=\"siterobots\"><code class=\"language-plaintext highlighter-rouge\">site.robots</code></h3>\n\n<p>You can define your own records in <code class=\"language-plaintext highlighter-rouge\">robots.txt</code>.</p>\n\n<p>Config:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">robots</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">User-agent:</span><span class=\"nv\"> </span><span class=\"s\">*\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/ajax/\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/@async\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/log/\"</span>\n</code></pre></div></div>\n\n<h2 id=\"theme-features\">Theme Features</h2>\n\n<p>There’re some features can be integrated into your theme.</p>\n\n<h3 id=\"basic-multi-language-support\">(Basic) Multi-Language Support</h3>\n\n<p>You can define post/page language in your front-matter field:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">lang</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">zh-tw</span>\n</code></pre></div></div>\n\n<p>An additional <code class=\"language-plaintext highlighter-rouge\">lang</code> HTML attribute will be added to your final rendering:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;article</span> <span class=\"na\">lang=</span><span class=\"s\">\"zh-tw\"</span><span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/article&gt;</span>\n</code></pre></div></div>\n\n<p>If your post/page content is multilingual, you can also define multiple languages in array:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">lang</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">zh-tw</span>\n  <span class=\"pi\">-</span> <span class=\"s\">en-us</span>\n</code></pre></div></div>\n\n<p>Please note that only the first item defined in <code class=\"language-plaintext highlighter-rouge\">lang</code> array will be used in final <code class=\"language-plaintext highlighter-rouge\">lang</code> output, the additional languages will be available in JSON feed output:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"languages\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"zh-tw\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"en-us\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"categories\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"note\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"tags\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"miscellaneous\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3 id=\"smooshing-assets\">Smooshing Assets</h3>\n\n<p>For better performance, Almace Scaffolding will find all the CSS, script links and images in compiled HTML, and outputs a version with all the CSS, scripts and images (Base64) written inline. Sounds cool? but it needs theme support. Here’s how:</p>\n\n<p>You can simply add the query string <code class=\"language-plaintext highlighter-rouge\">?assets-inline</code> at the end of the file you’d like to be inlined in production site:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- This CSS will be inlined into HTML --&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ '/css/app.css?assets-inline' | prepend: amsf_theme_assets }}\"</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- This script will be inlined into HTML --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"{{ '/js/app.js?assets-inline' | prepend: amsf_theme_assets }}\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"user-custom-styles-support\">User Custom Styles Support</h3>\n\n<p>Define the following code snippet into your theme styles (Sass) will allow users to custom your theme without touching the theme files:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">//</span> <span class=\"nt\">Import</span> <span class=\"nt\">user</span> <span class=\"nt\">custom</span> <span class=\"nt\">styles</span>\n<span class=\"k\">@import</span> <span class=\"s1\">\"../../../_scss/custom\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h3 id=\"user-custom-scripts-support\">User Custom Scripts Support</h3>\n\n<p>Define the following code snippet into your theme template (it’s recommended to put it in footer) will allow users to add custom scripts without touching the theme files:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- User custom scripts --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"{{ '/js/user.js?assets-inline' | prepend: amsf_user_assets }}\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"page--post-specific-css-block-support\">Page / Post Specific CSS Block Support</h3>\n\n<p>This allows your user to define page / post specific CSS blocks in front-matter data:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- Page-wide custom CSS --&gt;</span>\n{{ amsf_page_css }}\n</code></pre></div></div>\n\n<h3 id=\"google-analytics-support\">Google Analytics Support</h3>\n\n<p>This allows your user to be able to use Google Analytics for their site, tracking ID can be changed in the config file:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- Google Analytics tracking code --&gt;</span>\n{{ amsf_google_analytics }}\n</code></pre></div></div>\n\n<h3 id=\"post-published-time\">Post Published Time</h3>\n\n<p>This allows you to get the published time of the current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:published_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ amsf_page_pubdate | date_to_xmlschema }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:published_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"2014-01-01T00:00:00+08:00\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"post-modified-time\">Post Modified Time</h3>\n\n<p>This allows you to get the modified time of the current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:modified_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ amsf_page_update | date_to_xmlschema }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:modified_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"2014-01-03T03:17:49+08:00\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"post-reading-time\">Post Reading Time</h3>\n\n<p>This allows you to show the average reading time of current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Reading time: {{ amsf_page_reading_time }}\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gh\"># Less than 200 words</span>\nReading time: Less than 1 min\n\n<span class=\"gh\"># Around 200 words</span>\nReading time: 1 min\n\n<span class=\"gh\"># More than 200 words</span>\nReading time: 34 mins\n\n<span class=\"gh\"># More than 1 hour</span>\nReading time: 1 hr\nReading time: 1 hr 1 min\nReading time: 3 hrs 20 mins\n</code></pre></div></div>\n\n<h2 id=\"publishing-themes\">Publishing Themes</h2>\n\n<p>You really like your custom design and wanna show it off to the world? Cool, you can create (pack) you own theme by the following command:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-save\n</code></pre></div></div>\n\n<p>The activated theme will be saved to AMSF cache (<code class=\"language-plaintext highlighter-rouge\">.amsf-cache/</code>) with correct file and directory structure, then you can upload your theme to GitHub.</p>\n\n<p>Still confusing? see my default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a> for reference.</p>","excerpt":"Overview","languages":null,"categories":["note"],"tags":["customization"]},{"title":"Syntax Highlighting","permalink":"https://jaehyunup.github.io/syntax-highlighting.html","link":"https://jaehyunup.github.io/syntax-highlighting.html","date":"2014-06-06T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>Code highlighting demo, powered by Rouge. More info about code highlighting can be found at <a href=\"https://jekyllrb.com/docs/templates/#code-snippet-highlighting\">Jekyll’s documentation</a>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.code-text (@link, @text) when (lightness(@link) &gt;= 50%) and (lightness(@link) &lt; lightness(@text)) {\n  @return-color: lighten(@text, 20%);\n  @return-value: 30%;\n}\n</code></pre></div></div>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">{</span>\n  \"scripts\": {\n<span class=\"gd\">-   \"precommit\": \"npm test\",\n-   \"commitmsg\": \"commitlint -E GIT_PARAMS\"\n</span>  },\n<span class=\"gi\">+ \"husky\": {\n+   \"hooks\": {\n+     \"pre-commit\": \"npm test\",\n+     \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n+   }\n+ }\n</span><span class=\"err\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">show</span>\n  <span class=\"vi\">@widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n  <span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span> <span class=\"c1\"># show.html.erb</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">json</span> <span class=\"p\">{</span> <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"vi\">@widget</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">echo</span> <span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"k\">def</span> <span class=\"nf\">print_hi</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Hi, </span><span class=\"si\">#{</span><span class=\"nb\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"k\">end</span>\n<span class=\"n\">print_hi</span><span class=\"p\">(</span><span class=\"s1\">'Tom'</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"code\"><pre><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Title!<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"title\"</span> <span class=\"na\">class=</span><span class=\"s\">\"heading\"</span><span class=\"nt\">&gt;</span>Example<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"foo\"</span><span class=\"nt\">&gt;</span>Hello, World!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nt\">&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span><span class=\"nf\">#foo</span> <span class=\"p\">{</span> <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">bold</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Load the http module to create an http server.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Configure our HTTP server to respond with Hello World to all requests.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text/plain</span><span class=\"dl\">\"</span><span class=\"p\">});</span>\n  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"se\">\\n</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Listen on port 8000, IP defaults to 127.0.0.1</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Put a friendly message on the terminal</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Server running at https://127.0.0.1:8000/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.code-text</span> <span class=\"o\">(</span><span class=\"k\">@link</span><span class=\"p\">,</span> <span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">link</span><span class=\"p\">)</span> <span class=\"err\">&gt;=</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">link</span><span class=\"p\">)</span> <span class=\"err\">&lt;</span> <span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-color</span><span class=\"p\">:</span> <span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"m\">20%</span><span class=\"p\">);</span>\n  <span class=\"k\">@return-value</span><span class=\"p\">:</span> <span class=\"m\">30%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Title!<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"title\"</span> <span class=\"na\">class=</span><span class=\"s\">\"heading\"</span><span class=\"nt\">&gt;</span>Example<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"foo\"</span><span class=\"nt\">&gt;</span>Hello, World!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nt\">&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span><span class=\"nf\">#foo</span> <span class=\"p\">{</span> <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">bold</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-llvm highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">; copied from https://llvm.org/docs/LangRef.html#module-structure</span>\n<span class=\"c1\">; Declare the string constant as a global constant.</span>\n<span class=\"vg\">@.str</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"s\">c\"hello world\\0A\\00\"</span>\n\n<span class=\"c1\">; External declaration of the puts function</span>\n<span class=\"k\">declare</span> <span class=\"kt\">i32</span> <span class=\"vg\">@puts</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nocapture</span><span class=\"p\">)</span> <span class=\"k\">nounwind</span>\n\n<span class=\"c1\">; Definition of main function</span>\n<span class=\"k\">define</span> <span class=\"kt\">i32</span> <span class=\"vg\">@main</span><span class=\"p\">()</span> <span class=\"p\">{</span>   <span class=\"c1\">; i32()*</span>\n  <span class=\"c1\">; Convert [13 x i8]* to i8  *...</span>\n  <span class=\"nv\">%cast210</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@.str</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span>\n\n  <span class=\"c1\">; Call puts function to write out the string to stdout.</span>\n  <span class=\"k\">call</span> <span class=\"kt\">i32</span> <span class=\"vg\">@puts</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%cast210</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">; Named metadata</span>\n<span class=\"nv\">!1</span> <span class=\"p\">=</span> <span class=\"kt\">metadata</span> <span class=\"p\">!{</span><span class=\"kt\">i32</span> <span class=\"m\">42</span><span class=\"p\">}</span>\n<span class=\"nv\">!foo</span> <span class=\"p\">=</span> <span class=\"p\">!{</span><span class=\"nv\">!1</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;xsl:template</span> <span class=\"na\">match=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;&lt;/xsl:template&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-moonscript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"s2\">\"my.module\"</span><span class=\"w\">\n\n</span><span class=\"n\">a_table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"ss\">foo:</span><span class=\"w\"> </span><span class=\"s1\">'bar'</span><span class=\"w\">\n  </span><span class=\"ss\">interpolated:</span><span class=\"w\"> </span><span class=\"s2\">\"foo-</span><span class=\"si\">#{</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">stuff</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\">\n  </span><span class=\"ss\">\"string\":</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n  </span><span class=\"ss\">do:</span><span class=\"w\"> </span><span class=\"s1\">'keyword'</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">MyClass</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nc\">SomeClass</span><span class=\"w\">\n  </span><span class=\"ss\">new:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"vi\">@init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'default'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\">\n    </span><span class=\"vi\">@derived</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"vi\">@init</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n    </span><span class=\"k\">super</span><span class=\"o\">!</span><span class=\"w\">\n\n  </span><span class=\"ss\">other:</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\">\n    </span><span class=\"vi\">@foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<div class=\"language-apache highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">AddDefaultCharset</span> UTF-8\n\n<span class=\"nc\">RewriteEngine</span> <span class=\"ss\">On</span>\n\n<span class=\"c\"># Serve gzipped version if available and accepted</span>\n<span class=\"nc\">AddEncoding</span> x-gzip .gz\n<span class=\"nc\">RewriteCond</span> %{HTTP:Accept-Encoding} gzip\n<span class=\"nc\">RewriteCond</span> %{REQUEST_FILENAME}.gz -f\n<span class=\"nc\">RewriteRule</span> ^(.*)$ $1.gz [QSA,L]\n<span class=\"p\">&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.css\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> text/css\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.js\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> application/javascript\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.html\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> text/html\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n</span></code></pre></div></div>\n\n<div class=\"language-prolog highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"nv\">DA</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">))</span>\n   <span class=\"o\">&lt;=</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DA</span><span class=\"p\">)</span> <span class=\"ss\">and</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">).</span>\n\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">),</span> <span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">DA</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">)))</span>\n   <span class=\"o\">&lt;=</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DA</span><span class=\"p\">)</span> <span class=\"ss\">and</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">).</span>\n\n<span class=\"ss\">equal</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">).</span>\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">).</span>\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"ss\">not</span> <span class=\"ss\">equal</span><span class=\"p\">(</span><span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">).</span>\n</code></pre></div></div>\n\n<div class=\"language-ocaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">(* Binary tree with leaves car­rying an integer. *)</span>\n<span class=\"k\">type</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nc\">Leaf</span> <span class=\"k\">of</span> <span class=\"kt\">int</span> <span class=\"o\">|</span> <span class=\"nc\">Node</span> <span class=\"k\">of</span> <span class=\"n\">tree</span> <span class=\"o\">*</span> <span class=\"n\">tree</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">v</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Node</span> <span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">left</span>\n      <span class=\"o\">||</span> <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">right</span>\n\n<span class=\"k\">let</span> <span class=\"n\">has_even_leaf</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"n\">exists_leaf</span> <span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n</span> <span class=\"ow\">mod</span> <span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">tree</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"nv\">`users`</span> <span class=\"k\">WHERE</span> <span class=\"nv\">`user`</span><span class=\"p\">.</span><span class=\"nv\">`id`</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<div class=\"language-smalltalk highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">quadMultiply:</span> <span class=\"nv\">i1</span> <span class=\"nf\">and:</span> <span class=\"nv\">i2</span>\n    <span class=\"c\">\"This method multiplies the given numbers by each other\n    and the result by 4.\"</span>\n    <span class=\"p\">|</span><span class=\"nv\"> mul </span><span class=\"p\">|</span>\n    <span class=\"nv\">mul</span> <span class=\"o\">:=</span> <span class=\"nv\">i1</span> <span class=\"nf\">*</span> <span class=\"nv\">i2</span><span class=\"p\">.</span>\n    <span class=\"o\">^</span><span class=\"nv\">mul</span> <span class=\"nf\">*</span> <span class=\"m\">4</span>\n</code></pre></div></div>\n\n<div class=\"language-racket highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">#</span><span class=\"nv\">lang</span> <span class=\"nv\">racket</span>\n\n<span class=\"c1\">;; draw a graph of cos and deriv^3(cos)</span>\n<span class=\"p\">(</span><span class=\"k\">require</span> <span class=\"nv\">plot</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">((</span><span class=\"nf\">deriv</span> <span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"nv\">x</span> <span class=\"mf\">0.001</span><span class=\"p\">)))</span> <span class=\"mf\">0.001</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">thrice</span> <span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nf\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"nv\">x</span><span class=\"p\">)))))</span>\n<span class=\"p\">(</span><span class=\"nf\">plot</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"p\">(</span><span class=\"nf\">function</span> <span class=\"p\">((</span><span class=\"nf\">thrice</span> <span class=\"nv\">deriv</span><span class=\"p\">)</span> <span class=\"nv\">sin</span><span class=\"p\">)</span> <span class=\"mi\">-5</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">function</span> <span class=\"nv\">cos</span> <span class=\"mi\">-5</span> <span class=\"mi\">5</span> <span class=\"nt\">#:color</span> <span class=\"ss\">'blue</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">;; Print the Greek alphabet</span>\n<span class=\"p\">(</span><span class=\"nf\">for</span> <span class=\"p\">([</span><span class=\"nf\">i</span> <span class=\"p\">(</span><span class=\"nf\">in-range</span> <span class=\"mi\">25</span><span class=\"p\">)])</span>\n  <span class=\"p\">(</span><span class=\"nb\">displayln</span>\n   <span class=\"p\">(</span><span class=\"nb\">integer-&gt;char</span>\n    <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">char-&gt;integer</span> <span class=\"sc\">#\\u3B1</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\">;; An echo server</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">listener</span> <span class=\"p\">(</span><span class=\"k\">tcp-listen</span> <span class=\"mi\">12345</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">echo-server</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"k\">define-values</span> <span class=\"p\">(</span><span class=\"nf\">in</span> <span class=\"nv\">out</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">tcp-accept</span> <span class=\"nv\">listener</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\">thread</span> <span class=\"p\">(</span><span class=\"k\">λ</span> <span class=\"p\">()</span>\n             <span class=\"p\">(</span><span class=\"nf\">copy-port</span> <span class=\"nv\">in</span> <span class=\"nv\">out</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"nb\">close-output-port</span> <span class=\"nv\">out</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"nf\">echo-server</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-puppet highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">service</span> <span class=\"p\">{</span> <span class=\"s1\">'ntp'</span><span class=\"p\">:</span>\n  <span class=\"py\">name</span>      <span class=\"p\">=&gt;</span> <span class=\"nv\">$service_name</span><span class=\"p\">,</span>\n  <span class=\"py\">ensure</span>    <span class=\"p\">=&gt;</span> <span class=\"n\">running</span><span class=\"p\">,</span>\n  <span class=\"py\">enable</span>    <span class=\"p\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"kp\">subscribe</span> <span class=\"p\">=&gt;</span> <span class=\"nc\">File</span><span class=\"p\">[</span><span class=\"s1\">'ntp.conf'</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">var</span> <span class=\"n\">collection</span><span class=\"o\">=[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">];</span>\n  <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kd\">var</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">collection</span><span class=\"o\">){</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-tcl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>proc cross_sum <span class=\"p\">{</span>s<span class=\"p\">}</span> <span class=\"p\">{</span>expr <span class=\"p\">[</span>join <span class=\"p\">[</span>split $s <span class=\"s2\">\"\"</span><span class=\"p\">]</span> +<span class=\"p\">]}</span>\n</code></pre></div></div>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// reverse byte order (16-bit)</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">UInt16</span> <span class=\"nf\">ReverseBytes</span><span class=\"p\">(</span><span class=\"n\">UInt16</span> <span class=\"k\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">UInt16</span><span class=\"p\">)((</span><span class=\"k\">value</span> <span class=\"p\">&amp;</span> <span class=\"m\">0xFFU</span><span class=\"p\">)</span> <span class=\"p\">&lt;&lt;</span> <span class=\"m\">8</span> <span class=\"p\">|</span> <span class=\"p\">(</span><span class=\"k\">value</span> <span class=\"p\">&amp;</span> <span class=\"m\">0xFF00U</span><span class=\"p\">)</span> <span class=\"p\">&gt;&gt;</span> <span class=\"m\">8</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-vb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">Private</span> <span class=\"k\">Sub</span> <span class=\"nf\">Form_Load</span><span class=\"p\">()</span>\n    <span class=\"c1\">' Execute a simple message box that says \"Hello, World!\"</span>\n    <span class=\"n\">MsgBox</span> <span class=\"s\">\"Hello, World!\"</span>\n<span class=\"k\">End</span> <span class=\"k\">Sub</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>    <span class=\"c1\"># write Fibonacci series up to n\n</span>    <span class=\"s\">\"\"\"Print a Fibonacci series up to n.\"\"\"</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n</code></pre></div></div>\n\n<div class=\"language-perl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env perl</span>\n<span class=\"k\">use</span> <span class=\"nv\">warnings</span><span class=\"p\">;</span>\n<span class=\"k\">print</span> <span class=\"p\">\"</span><span class=\"s2\">a: </span><span class=\"p\">\";</span>\n<span class=\"k\">my</span> <span class=\"nv\">$a</span> <span class=\"o\">=</span> <span class=\"p\">\"</span><span class=\"s2\">foo</span><span class=\"p\">\";</span>\n<span class=\"k\">print</span> <span class=\"nv\">$a</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Markdown has cool <span class=\"p\">[</span><span class=\"nv\">reference links</span><span class=\"p\">][</span><span class=\"ss\">ref 1</span><span class=\"p\">]</span>\nand <span class=\"p\">[</span><span class=\"nv\">regular links too</span><span class=\"p\">](</span><span class=\"sx\">https://example.com</span><span class=\"p\">)</span>\n\n<span class=\"p\">[</span><span class=\"ss\">ref 1</span><span class=\"p\">]:</span> <span class=\"sx\">https://example.com</span>\n</code></pre></div></div>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">set PHP-FPM parameters</span>\n  <span class=\"na\">lineinfile</span><span class=\"pi\">:</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s\">/etc/php-fpm.conf</span>\n    <span class=\"na\">regexp</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">^\"</span>\n    <span class=\"na\">insertafter</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">^;\"</span>\n    <span class=\"na\">line</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"nv\"> </span><span class=\"s\">=</span><span class=\"nv\"> </span><span class=\"s\">\"</span>\n  <span class=\"na\">with_items</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">error_log'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">/var/log/php-fpm/error.log'</span> <span class=\"pi\">}</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">log_level'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">error'</span> <span class=\"pi\">}</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">emergency_restart_threshold'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">10'</span> <span class=\"pi\">}</span>\n</code></pre></div></div>","excerpt":"Code highlighting demo, powered by Rouge. More info about code highlighting can be found at Jekyll’s documentation.","languages":null,"categories":["note"],"tags":["miscellaneous"]},{"title":"Markdown Features Test","permalink":"https://jaehyunup.github.io/markdown-features-test.html","link":"https://jaehyunup.github.io/markdown-features-test.html","date":"2014-06-06T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"indented-code-blocks\">Indented Code Blocks</h2>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n</code></pre></div></div>\n\n<h2 id=\"liquid-tag-with-linenos-support\">Liquid Tag with <code class=\"language-plaintext highlighter-rouge\">linenos</code> Support</h2>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"k\">def</span> <span class=\"nf\">show</span>\n  <span class=\"vi\">@widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n  <span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span> <span class=\"c1\"># show.html.erb</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">json</span> <span class=\"p\">{</span> <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"vi\">@widget</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<h2 id=\"gfm-code-blocks-fenced_code_blocks\">GFM Code Blocks (<code class=\"language-plaintext highlighter-rouge\">fenced_code_blocks</code>)</h2>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">/* Background color function */</span>\n<span class=\"nc\">.code-bg</span> <span class=\"o\">(</span><span class=\"k\">@v</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"err\">&gt;=</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-bg</span><span class=\"p\">:</span> <span class=\"nb\">mix</span><span class=\"p\">(</span><span class=\"m\">#000</span><span class=\"p\">,</span> <span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"m\">30%</span><span class=\"p\">),</span> <span class=\"m\">10%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.code-bg</span> <span class=\"o\">(</span><span class=\"k\">@v</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"err\">&lt;</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-bg</span><span class=\"p\">:</span> <span class=\"nb\">mix</span><span class=\"p\">(</span><span class=\"m\">#fff</span><span class=\"p\">,</span> <span class=\"n\">darken</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"m\">10%</span><span class=\"p\">),</span> <span class=\"m\">70%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"smartypants\">SmartyPants</h3>\n\n<p>“Aha! What’s up, man?” – Jony said.</p>\n\n<h2 id=\"tables\">Tables</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Upvotes</th>\n      <th>Downvotes</th>\n      <th>Abstentions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alice</td>\n      <td>10</td>\n      <td>11</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>Bob</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Charlie</td>\n      <td>7</td>\n      <td>9</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>Totals</td>\n      <td>21</td>\n      <td>23</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"intra-emphasis\">Intra-emphasis</h2>\n\n<p>foo_bar_baz</p>\n\n<h2 id=\"auto-link\">Auto-link</h2>\n\n<p>https://sparanoid.com/</p>\n\n<h2 id=\"strikethroughs\">Strikethroughs</h2>\n\n<p>This is <del>good</del> bad.</p>\n\n<h2 id=\"space-after-headers\">Space after Headers</h2>\n\n<p>###This is not a header.</p>\n\n<h2 id=\"superscripts\">Superscripts</h2>\n\n<p>This is the 2^(nd) time.</p>\n\n<h2 id=\"footnotes\">Footnotes</h2>\n\n<p>This<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> is<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup> a sentence<sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\">3</a></sup>.</p>\n\n<h2 id=\"id-日本語タイトル\">ID 日本語タイトル</h2>\n\n<p>Expected id should be <code class=\"language-plaintext highlighter-rouge\">id-ri-ben-yu-taitoru</code>.</p>\n\n<h2 id=\"id-中文標題\">ID 中文標題</h2>\n\n<p>Expected id should be <code class=\"language-plaintext highlighter-rouge\">id-zhong-wen-biao-ti</code>.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Lorem lean startup ipsum <strong>product market fit customer development</strong> acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying <a href=\"#\">crowded market</a> pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://web.archive.org/web/20160425094356/http://blog.readability.com:80/2012/06/announcement/\">An Important Announcement</a> by Richard Ziade at Readability <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p>Good afterble constanoon, this sweet hongi is as bung as a stuffed morepork. Mean while, in the marae, Dr Ropata and Hairy Maclary from Donaldson’s Dairy were up to no good with a bunch of bloody troties. <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"Indented Code Blocks","languages":null,"categories":["note"],"tags":["miscellaneous"]},{"title":"Markup Example","permalink":"https://jaehyunup.github.io/markup-example.html","link":"https://jaehyunup.github.io/markup-example.html","date":"2014-06-05T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>Lorem lean startup ipsum <strong>product market fit customer development</strong> acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying <a href=\"#\">crowded market</a> pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor.</p>\n\n<blockquote>\n  <p>Two days ago the Chinese website <a href=\"https://www.taobao.com/\">Taobao</a> held a discount promotion to celebrate what’s known as “double sticks day” in China. In a single 24hr period, they conducted 19bn RMB (US$3.06bn) of business.</p>\n  <footer>\n    <cite><a href=\"https://web.archive.org/web/20150223182728/http://westiseast.co.uk:80/blog/taobao-sales-19-billion-bonanza/\">Chris West</a></cite>\n  </footer>\n</blockquote>\n\n<blockquote>\n  <p>Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>\n</blockquote>\n\n<p>Good afterble constanoon, this sweet hongi is as bung as a stuffed morepork. Mean while, in the marae, Dr Ropata and Hairy Maclary from Donaldson’s Dairy were up to no good with a bunch of bloody troties.</p>\n\n<h2 id=\"inline-html-elements\">Inline HTML elements</h2>\n\n<p>HTML defines a long list of available inline tags, a complete list of which can be found on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">Mozilla Developer Network</a>.</p>\n\n<ul>\n  <li><strong>To bold text</strong>, use <code class=\"language-plaintext highlighter-rouge\">&lt;strong&gt;</code>.</li>\n  <li><em>To italicize text</em>, use <code class=\"language-plaintext highlighter-rouge\">&lt;em&gt;</code>.</li>\n  <li>Abbreviations, like <abbr title=\"HyperText Markup Langage\">HTML</abbr> should use <code class=\"language-plaintext highlighter-rouge\">&lt;abbr&gt;</code>, with an optional <code class=\"language-plaintext highlighter-rouge\">title</code> attribute for the full phrase.</li>\n  <li>Citations, like <cite>— Tunghsiao Liu &amp; Mark otto</cite>, should use <code class=\"language-plaintext highlighter-rouge\">&lt;cite&gt;</code>.</li>\n  <li><del>Deleted</del> text should use <code class=\"language-plaintext highlighter-rouge\">&lt;del&gt;</code> and <ins>inserted</ins> text should use <code class=\"language-plaintext highlighter-rouge\">&lt;ins&gt;</code>.</li>\n  <li>Superscript <sup>text</sup> uses <code class=\"language-plaintext highlighter-rouge\">&lt;sup&gt;</code> and subscript <sub>text</sub> uses <code class=\"language-plaintext highlighter-rouge\">&lt;sub&gt;</code>.</li>\n</ul>\n\n<hr />\n\n<ul>\n  <li>With the exception of Nietzsche, no other madman has contributed so much to human sanity as has Louis Althusser. He is mentioned twice in the Encyclopaedia Britannica as someone’s teacher. There could be no greater lapse: for two important decades (the 60s and the 70s), Althusser was at the eye of all the important cultural storms. He fathered quite a few of them.</li>\n  <li>This newly-found obscurity forces me to summarize his work before suggesting a few (minor) modifications to it.\n    <ul>\n      <li>Society consists of practices: economic, political and ideological.\n        <ul>\n          <li>Althusser defines a practice as:</li>\n          <li>“Any process of transformation of a determinate product, affected by a determinate human labour, using determinate means (of production)”\n            <ul>\n              <li>The economic practice (the historically specific mode of production) transforms raw materials to finished products using human labour and other means of production, all organized within defined webs of inter-relations. The political practice does the same with social relations as the raw materials. Finally, ideology is the transformation of the way that a subject relates to his real life conditions of existence.\n                <ul>\n                  <li>This is a rejection of the mechanistic worldview (replete with bases and superstructures). It is a rejection of the Marxist theorization of ideology. It is a rejection of the Hegelian fascist “social totality”. It is a dynamic, revealing, modern day model.</li>\n                  <li>“The objective internal reference … the system of questions commanding the answers given”</li>\n                </ul>\n              </li>\n              <li>Subjects to what? The answer: to the material practices of the ideology. This (the creation of subjects) is done by the acts of “hailing” or “interpellation”. These are acts of attracting attention (hailing) , forcing the individuals to generate meaning (interpretation) and making them participate in the practice.\n                <ul>\n                  <li>Subjects to what? The answer: to the material practices of the ideology. This (the creation of subjects) is done by the acts of “hailing” or “interpellation”. These are acts of attracting attention (hailing) , forcing the individuals to generate meaning (interpretation) and making them participate in the practice.</li>\n                  <li>What happens in a pluralistic environment rich in competing ideologies?\n                    <ul>\n                      <li>Clarifying the HOW, though, does not shed light on the WHY.\n                        <ul>\n                          <li>is the fact that in the new one, the second text is articulated with the lapses in the first text … (Marx measures) the problematic contained</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li>Ideology is a practice with lived and material dimensions. It has costumes, rituals, behaviour patterns, ways of thinking. The State employs Ideological Apparatuses (ISAs) to reproduce ideology through practices and productions: (organized) religion, the education system, the family, (organized) politics, the media, the industries of culture.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>These theoretical tools were widely used to analyze the Advertising and the film industries.</li>\n</ul>\n\n<ol>\n  <li>Ordered list</li>\n  <li>Ordered list\n    <ol>\n      <li>Ordered list\n        <ol>\n          <li>Ordered list</li>\n          <li>Ordered list\n            <ol>\n              <li>Ordered list\n                <ol>\n                  <li>Ordered list</li>\n                  <li>Ordered list</li>\n                </ol>\n              </li>\n              <li>Ordered list\n                <ol>\n                  <li>Ordered list</li>\n                </ol>\n              </li>\n              <li>Ordered list</li>\n            </ol>\n          </li>\n        </ol>\n      </li>\n      <li>Ordered list\n        <ol>\n          <li>Ordered list</li>\n          <li>Ordered list</li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li>Ordered list</li>\n</ol>\n\n<hr />\n\n<h2 id=\"this-should-be-replaced\">“This should be replaced.”</h2>\n\n<p>“This should be replaced.”</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-1\">‘This should be replaced.’</h2>\n\n<p>‘This should be replaced.’</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-2\">「This should be replaced.」</h2>\n\n<p>「This should be replaced.」</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-3\">『This should be replaced.』</h2>\n\n<p>『This should be replaced.』</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-4\">（This should be replaced.）</h2>\n\n<p>（This should be replaced.）</p>\n\n<p>This is a normal paragraph.</p>\n\n<hr />\n\n<p>Most of these elements are styled by browsers with few modifications on our part.</p>\n\n<p>Maui and his rough as guts piece of pounamu, what a stink buzz. Bro, quater-acre patches are really naff good with bung mates, aye. You have no idea how beached as our random kais were aye. Every time I see those beautiful lengths of number 8 wire it’s like Castle Hill all over again aye, do you happen to have a bucket or a hose bro?</p>\n\n<h2 id=\"h2-headings\">H2 Headings</h2>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h3 id=\"h3-headings\">H3 Headings</h3>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h4 id=\"h4-headings\">H4 Headings</h4>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h5 id=\"h5-headings\">H5 Headings</h5>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h6 id=\"h6-headings\">H6 Headings</h6>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<hr />\n\n<p>He was alone then; when he sat in that same chair his wife now sits in, and I shared with him the positive result to his HIV test. Though he seemed disinterested, vaguely detached, he had obviously heard of HIV before. His chart from the local clinic indicated a previous history of and treatment for anal gonorrhea, two acute cases of syphilis in the past three years, and a urinary tract infection last month. His only listed sexual contact, his wife. Who, strangely enough, only tested positive for one of the syphilis infections.</p>\n\n<p>“Mistake, this! I am married, not a giver of ass.”</p>\n\n<p>Giver of ass? That’s one for the archive, I think.</p>\n\n<p>Unwilling to engage his obvious denials, I ignore the comment and instead explain that due to a higher than acceptable potential of a false positive result, we won’t consider his oral test as confirmatory until the more accurate blood analysis is in.</p>\n\n<p>“I no understand”, he says to the room in general.</p>\n\n<p>His annoyance is obvious. Abrasively, he offers me his exposed forearm. This, I assume, is my cue to draw his blood. Ignoring the indignant anger beginning to rise, I tighten my jaw, then swab the fat vein with betadine, working the cool, brown liquid off in concentric circles, using strong medicinal smelling alcohol. I use the betadine, as most of these men work in the mines, and dirt three layers thick on exposed skin is the norm. As the first tube in the vacationer fills with blood, he asks,</p>\n\n<p>“So how I get this thing?”</p>\n\n<p>Ah, I see we are going to play the circuitous dance of ignorance. Sounding just a little too clinical, I begin the HIV 101 mantra.</p>\n\n<p>“Well, people acquire HIV through certain types of sex with an infected person, through sharing needles with an infected person, and sometimes through a blood transfusion. Have you ever had a blood transfusion, sir?”</p>\n\n<p>I take the dismissive wave of his hand as a no to the transfusion question. I don’t make a great attempt to navigate a comfort zone here; instinct and experience telling me he has already set the script of what is to follow.</p>\n\n<p>“She is fucking other cocks my whore devil wife”?\nBingo! A narrative that over the next six weeks I will hear from several other men as well.</p>\n\n<p>“These whores, all they want is the cock!”\nCareful Skippy, you really aren’t as convincing as you think you are.</p>\n\n<blockquote>\n  <p>\n    “She is fucking other cocks my whore devil wife”?\n    <br />\n    Bingo! A narrative that over the next six weeks I will hear from several other men as well.\n  </p>\n\n  <p>\n    “These whores, all they want is the cock!”\n    <br />\n    Careful Skippy, you really aren’t as convincing as you think you are.\n  </p>\n\n  <footer>\n    <cite>from <a href=\"https://medium.com/absurdist/a-world-away-c2b692bd808e\">A World Away</a> by alto</cite>\n  </footer>\n</blockquote>\n\n<details>\n  <summary>Supported Fonts</summary>\n  <ul>\n    <li><a href=\"https://www.microsoft.com/typography/otspec/features_fj.htm#qwid\">Microsoft Registered features - qwid</a></li>\n    <li><a href=\"https://typekit.com/fonts/kozuka-mincho-pr6n\">Kozuka Mincho Pr6n</a></li>\n  </ul>\n</details>\n\n<h2 id=\"chinese-paragraph\">Chinese Paragraph</h2>\n\n<p lang=\"zh-cn\">「名词成灾」的流行病里，灾情最严重的该是所谓「科学至上」（scientism）。在现代的工业社会里，科学早成显贵，科技更是骄子，所以知识分子的口头与笔下，有意无意，总爱用一些「学术化」的抽象名词，好显得客观而精确。有人称之为「伪术语」（pseudo-jargon）。例如：明明是 first step，却要说成 initial phase：明明是 letter，却要说成 communication，都属此类。</p>\n\n<h2 id=\"japanese-paragraph\">Japanese Paragraph</h2>\n\n<p lang=\"ja\">『雪国』の主な舞台は、上越国境の清水トンネルを抜けた湯沢温泉であるが、この作品も『伊豆の踊子』同様に、川端康成の旅の出会いから生まれたもので、雪中の火事も実際に起ったことだと川端は語っている。川端は作品内で故意に地名を隠しているが、1934 年（昭和 9 年）6 月 13 日より 1937 年まで新潟県湯沢町の高半旅館（現：高半ホテル）に逗留していたことを随筆『「雪国」の旅』で述べている。</p>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">## H2 Heading</span>\n<span class=\"gu\">### H3 Heading</span>\n<span class=\"gu\">#### H4 Heading</span>\n<span class=\"gu\">##### H5 Heading</span>\n<span class=\"gu\">###### H6 Heading</span>\n</code></pre></div></div>\n\n<h2 id=\"newsletters-signup-form\">Newsletters Signup Form</h2>\n\n<form action=\"//sparanoid.us2.list-manage.com/subscribe/post?u=eef500b1fe3fe595f03a27605&amp;id=7bbabe95a9\" method=\"post\">\n  <input name=\"cm-uykhir-uykhir\" type=\"email\" placeholder=\"Your Email\" required=\"\" />\n</form>","excerpt":"Lorem lean startup ipsum product market fit customer development acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying crowded market pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor.","languages":null,"categories":["note"],"tags":["miscellaneous"]},{"title":"Custom HTML Markups","permalink":"https://jaehyunup.github.io/custom-html-markups.html","link":"https://jaehyunup.github.io/custom-html-markups.html","date":"2014-06-01T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"note-store-and-download\"><code class=\"language-plaintext highlighter-rouge\">.note</code>, <code class=\"language-plaintext highlighter-rouge\">.store</code>, and <code class=\"language-plaintext highlighter-rouge\">.download</code></h2>\n\n<p>A paragraph block with a thin border line.</p>\n\n<h3 id=\"usage\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">Download</span><span class=\"p\">](</span><span class=\"sx\">download</span><span class=\"p\">)</span> it from GitHub\n{: .download}\n\nLove this plugin? please consider <span class=\"p\">[</span><span class=\"nv\">buying me a cup of coffee</span><span class=\"p\">](</span><span class=\"sx\">donate</span><span class=\"p\">)</span>.\n{: .store}\n</code></pre></div></div>\n\n<h3 id=\"example\">Example</h3>\n\n<p class=\"download\"><a href=\"https://github.com/sparanoid/sparanoid.com/\">Download</a> it from GitHub</p>\n\n<p class=\"store\">Love this plugin? please consider buying me a cup of coffee.</p>\n\n<h2 id=\"largetype\"><code class=\"language-plaintext highlighter-rouge\">.largetype</code></h2>\n\n<p>Make normal paragraph text large enough.</p>\n\n<h3 id=\"usage-1\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">PayPal</span><span class=\"p\">](</span><span class=\"sx\">donate</span><span class=\"p\">)</span>\n{: .largetype}\n</code></pre></div></div>\n\n<h3 id=\"example-1\">Example</h3>\n\n<p class=\"largetype\"><a href=\"https://sparanoid.com/donate/\">PayPal</a></p>\n\n<h2 id=\"browser\"><code class=\"language-plaintext highlighter-rouge\">.browser</code></h2>\n\n<p>A simple browser frame using pure CSS.</p>\n\n<h3 id=\"usage-2\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>\n{: .browser}\n</code></pre></div></div>\n\n<h3 id=\"example-2\">Example</h3>\n\n<p class=\"browser\"><img src=\"https://d349cztnlupsuf.cloudfront.net/delicious.com.png\" alt=\"Delicious Preview\" class=\"no-lightense\" /></p>\n\n<h2 id=\"lightense-images\"><a href=\"https://sparanoid.com/work/lightense-images/\">Lightense Images</a></h2>\n\n<p>A simple library inspired by <a href=\"https://github.com/tholman\">Tim Holman</a> to view large images up close using simple mouse interaction, and the full screen.</p>\n\n<h3 id=\"usage-3\">Usage</h3>\n\n<p>Add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>plugin: lightense\n</code></pre></div></div>\n\n<p>Markdown markup:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/photo.jpg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Lightense Images is activated globally by default, if you want to disable this effect for specific image, you can simply apply <code class=\"language-plaintext highlighter-rouge\">.no-lightense</code> CSS class to your image or <code class=\"language-plaintext highlighter-rouge\">&lt;img&gt;</code>:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-lightense}\n</code></pre></div></div>\n\n<p>Please note that if you’re using HTML markup, you should wrap your images into a <code class=\"language-plaintext highlighter-rouge\">&lt;p&gt;</code> container.</p>\n\n<h3 id=\"example-3\">Example</h3>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/moonstruck-princess-ext-red.jpg\" alt=\"Moonstruck Princess Extended - Red\" /></p>\n\n<h2 id=\"image-sizes\">Image Sizes</h2>\n\n<p>There’re different size helpers for images. They’re available using the following CSS classes:</p>\n\n<h3 id=\"small-size\">Small Size</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-small}\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/moonstruck-princess-ext-orange.jpg\" alt=\"Moonstruck Princess Extended - orange\" class=\"size-small\" /></p>\n\n<h3 id=\"medium-size\">Medium Size</h3>\n\n<p>The medium size is the default size of images, so you don’t need additional CSS classes for it.</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/moonstruck-princess-ext-yellow.jpg\" alt=\"Moonstruck Princess Extended - Yellow\" /></p>\n\n<h3 id=\"large-size\">Large Size</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-large}\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/moonstruck-princess-ext-green.jpg\" alt=\"Moonstruck Princess Extended - Green\" class=\"size-large\" /></p>\n\n<h3 id=\"aligned-images\">Aligned Images</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-left}\n\n<span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-right}\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/moonstruck-princess-ext-blue.jpg\" alt=\"Moonstruck Princess Extended - Blue\" class=\"size-left\" /></p>\n\n<p>Aligned images are smaller images beside the text, you can just apply <code class=\"language-plaintext highlighter-rouge\">.size-left</code> or <code class=\"language-plaintext highlighter-rouge\">.size-right</code> to your images and nothing special markup required. However, that aligned images will be responded to normal large size for small desktops or mobile devices.</p>\n\n<h3 id=\"small-images\">Small Images</h3>\n\n<p>Useful for images smaller than container width.</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-resize}\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/who-can-run.png\" alt=\"Run?\" class=\"no-resize\" /></p>\n\n<h3 id=\"small-images-center\">Small Images (center)</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-resize.center}\n</code></pre></div></div>\n\n<p><img src=\"https://d349cztnlupsuf.cloudfront.net/who-can-run.png\" alt=\"Run?\" class=\"no-resize center\" /></p>","excerpt":".note, .store, and .download","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Custom Color Scheme","permalink":"https://jaehyunup.github.io/custom-color-scheme.html","link":"https://jaehyunup.github.io/custom-color-scheme.html","date":"2014-05-01T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>This is an example how to change your post color scheme for specific posts. You can simply add the following variables to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-text: \"#0029ff\"\nscheme-link: \"#ff00b4\"\nscheme-hover: \"#ff00b4\"\nscheme-code: \"#ad00ff\"\nscheme-bg: \"#00ebff\"\nscheme-hero-text: \"#00ebff\"\nscheme-hero-link: \"#00ebff\"\nscheme-hero-bg: \"#0029ff\"\n</code></pre></div></div>\n\n<p>You can also ignore other variables if you only want to change the background:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-bg: \"#00ebff\"\n</code></pre></div></div>","excerpt":"This is an example how to change your post color scheme for specific posts. You can simply add the following variables to your post front-matter field:","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Unique Post Styling via Custom CSS","permalink":"https://jaehyunup.github.io/custom-css.html","link":"https://jaehyunup.github.io/custom-css.html","date":"2014-04-01T00:00:00-07:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>This is an example how to change your post styling via CSS. You can simply add the <code class=\"language-plaintext highlighter-rouge\">css</code> option to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-text: \"#000\"\nscheme-link: \"#a73300\"\nscheme-hover: \"#ff4e00\"\nscheme-code: \"#a73300\"\ncss: |\n  body {\n    background-image: linear-gradient(to bottom, #fff500, #ff8f00);\n  }\n</code></pre></div></div>\n\n<p>Please note that syntax highlighting may look ugly with the custom background color.</p>","excerpt":"This is an example how to change your post styling via CSS. You can simply add the css option to your post front-matter field:","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"External Link Post","permalink":"https://jaehyunup.github.io/external-link-post.html","link":"https://jaehyunup.github.io/external-link-post.html","date":"2014-02-01T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>This is an example of a Tumblr-like external link post. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">link</span><span class=\"pi\">:</span> <span class=\"s\">https://sparanoid.com/</span>\n</code></pre></div></div>","excerpt":"This is an example of a Tumblr-like external link post. You can simply add the following setting to your post front-matter field:","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Custom Heading Image","permalink":"https://jaehyunup.github.io/custom-heading-image.html","link":"https://jaehyunup.github.io/custom-heading-image.html","date":"2014-02-01T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>This is an example of custom post heading image. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">heading-img</span><span class=\"pi\">:</span> <span class=\"s\">svg/heading-image.svg</span>\n<span class=\"na\">heading-img-local</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n<span class=\"na\">heading-img-width</span><span class=\"pi\">:</span> <span class=\"m\">400</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>In Almace Scaffolding v1.1.0, the original <code class=\"language-plaintext highlighter-rouge\">svg-headline*</code>, and <code class=\"language-plaintext highlighter-rouge\">img-headline*</code> options are deprecated.</p>\n</blockquote>\n\n<dl>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img</code></dt>\n  <dd>Heading image filename, if a relative URL (non-external URL) is provided, the file will be prefixed with <code class=\"language-plaintext highlighter-rouge\">site.file</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img-local</code></dt>\n  <dd>To avoid relative URL prefixed by <code class=\"language-plaintext highlighter-rouge\">site.file</code>, you can set this option to <code class=\"language-plaintext highlighter-rouge\">true</code> to prefix it with <code class=\"language-plaintext highlighter-rouge\">amsf_user_assets</code>, then you can store your images in <code class=\"language-plaintext highlighter-rouge\">_app/assets/</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img-width</code></dt>\n  <dd>Set the width of your heading image. The value will be converted to viewport unit automatically. ie. <code class=\"language-plaintext highlighter-rouge\">heading-img-width: 400</code> will be converted to <code class=\"language-plaintext highlighter-rouge\">width: 40vw</code>;</dd>\n</dl>\n\n<blockquote>\n  <p><strong>Pro Tips</strong>: Keep a <code class=\"language-plaintext highlighter-rouge\">&lt;title&gt;</code> tag for your SVG can help Safari generate correct post title for its Reader mode:</p>\n</blockquote>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;svg</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/2000/svg\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;title&gt;</span>Cool Article<span class=\"nt\">&lt;/title&gt;</span>\n…\n</code></pre></div></div>","excerpt":"This is an example of custom post heading image. You can simply add the following setting to your post front-matter field:","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"Custom Heading Background","permalink":"https://jaehyunup.github.io/custom-heading-background.html","link":"https://jaehyunup.github.io/custom-heading-background.html","date":"2014-02-01T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<p>This is an example of custom heading background. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">heading-bg</span><span class=\"pi\">:</span> <span class=\"s\">img/heading-background.jpg</span>\n<span class=\"na\">heading-bg-local</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n<span class=\"na\">heading-bg-color</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#8141b1\"</span>\n<span class=\"na\">heading-bg-size</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">100px</span><span class=\"nv\"> </span><span class=\"s\">100px\"</span>\n<span class=\"na\">heading-bg-position</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">center</span><span class=\"nv\"> </span><span class=\"s\">bottom\"</span>\n<span class=\"na\">heading-bg-repeat</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">repeat\"</span>\n<span class=\"na\">heading-bg-text</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#fff\"</span>\n</code></pre></div></div>\n\n<dl>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg</code></dt>\n  <dd>Background image filename, if a relative URL (non-external URL) is provided, the file will be prefixed with <code class=\"language-plaintext highlighter-rouge\">site.file</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-local</code></dt>\n  <dd>To avoid relative URL prefixed by <code class=\"language-plaintext highlighter-rouge\">site.file</code>, you can set this option to <code class=\"language-plaintext highlighter-rouge\">true</code> to prefix it with <code class=\"language-plaintext highlighter-rouge\">amsf_user_assets</code>, then you can store your images in <code class=\"language-plaintext highlighter-rouge\">_app/assets/</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-color</code></dt>\n  <dd>Background color, recommend setting its value matches your image color tone.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-size</code></dt>\n  <dd>Background size, default value is <code class=\"language-plaintext highlighter-rouge\">cover</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-position</code></dt>\n  <dd>Background position, default value is <code class=\"language-plaintext highlighter-rouge\">center center</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-repeat</code></dt>\n  <dd>Background repeat, default value is <code class=\"language-plaintext highlighter-rouge\">no-repeat</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-text</code></dt>\n  <dd>Text color of the heading, set it based on your background image.</dd>\n</dl>\n\n<blockquote>\n  <p>Heading image copyright info:\n© 士郎正宗・Production I.G／講談社・「攻殻機動隊」製作委員会</p>\n</blockquote>","excerpt":"This is an example of custom heading background. You can simply add the following setting to your post front-matter field:","languages":null,"categories":["note"],"tags":["curtana"]},{"title":"GitHub Pages Setup Guide","permalink":"https://jaehyunup.github.io/github-pages-setup.html","link":"https://jaehyunup.github.io/github-pages-setup.html","date":"2014-01-01T00:00:00-08:00","modified":"2020-12-28T23:47:43-08:00","author":{"name":"Jaehyun Park","url":"https://jaehyunup.github.io/","email":"bestdeveloper@kakao.com"},"content":"<h2 id=\"the-problem\">The Problem</h2>\n\n<p>In short answer: yes, but additional actions required.</p>\n\n<p>tl;dr: You can serve AMSF as a static site on GitHub Pages, but not a Jekyll site using Jekyll renderer provided by GitHub Pages.</p>\n\n<p>There’re some factors that prevent it from generating pages using GitHub Pages renderer:</p>\n\n<ul>\n  <li>Many features Almace Scaffolding provides like LiveReload, Sass support, inline SVG, and HTML minification are implemented using <a href=\"https://gruntjs.com/\">Grunt.js</a>, it’s not supported by GitHub Pages.</li>\n  <li>Almace Scaffolding uses the latest pre-release Jekyll, so not all features are supported by GitHub Pages renderers.</li>\n  <li>GItHub Pages build server <a href=\"https://help.github.com/articles/pages-don-t-build-unable-to-run-jekyll#source-setting\">overwrites the <code class=\"language-plaintext highlighter-rouge\">source</code> settings</a>. This prevents it from generating pages from current file structure.</li>\n</ul>\n\n<h2 id=\"the-solution-for-users-or-organization-sites\">The Solution for Users or Organization Sites</h2>\n\n<p>Since GitHub Pages for users or organization sites can only be served from the root directory of your master branch. You have to:</p>\n\n<ul>\n  <li>Make sure your <code class=\"language-plaintext highlighter-rouge\">baseurl</code> is set to <code class=\"language-plaintext highlighter-rouge\">\"\"</code> (empty) in your <code class=\"language-plaintext highlighter-rouge\">_config.yml</code>.</li>\n  <li>Build your site locally (<code class=\"language-plaintext highlighter-rouge\">grunt build</code>).</li>\n  <li>Use your own method, create a script, bash, whatever it works to move the generated pages to the root directory of your repository.</li>\n  <li>Upload Jekyll generated static files to your <code class=\"language-plaintext highlighter-rouge\">username.github.io</code> repository.</li>\n</ul>\n\n<p>If you’d like to keep all things under Git control, you can try the following file structure:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _amsf/ (Almace Scaffolding source code)\n├── *.html (Jekyll-generated static pages)\n└── README.md (your own readme)\n</code></pre></div></div>\n\n<p>You can see this <a href=\"https://github.com/amsf/amsf.github.io/\">live demo</a> how it actually works.</p>\n\n<h2 id=\"the-solution-for-project-sites\">The Solution for Project Sites</h2>\n\n<p>Things can be simpler if you need AMSF for your project sites since GitHub Pages supports serve your site from a subdirectory:</p>\n\n<ul>\n  <li>Make the following changes in your <code class=\"language-plaintext highlighter-rouge\">_config.yml</code>:\n    <ul>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">destination</code> to <code class=\"language-plaintext highlighter-rouge\">docs</code></li>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">baseurl</code> to the name of your repository slug, ie. <code class=\"language-plaintext highlighter-rouge\">/my-project</code>.</li>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">flatten_base</code> to <code class=\"language-plaintext highlighter-rouge\">true</code>.</li>\n    </ul>\n  </li>\n  <li>Build your site locally (<code class=\"language-plaintext highlighter-rouge\">grunt build</code>).</li>\n  <li>Push changes to GitHub</li>\n</ul>","excerpt":"The Problem","languages":null,"categories":["note"],"tags":["deployment"]}]