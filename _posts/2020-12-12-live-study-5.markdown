---
title: Class in Java
date: 2020-12-12
categories:
  - Java
tags:
  - Java
---





![스터디사진](https://github.com/jaehyunup/java_study/raw/master/20.11-ing/img/studyhalle.jpg?raw=true)
<br/>


### Q1. 클래스 정의하는 방법
클래스는 class 키워드를통해 정의할 수 있으며, 멤버필드와 메서드로 구성됩니다.
멤버필드를 private으로 접근제한한다면, getter와 setter를 이용해서 내부값에 접근할 수 있습니다.
또, 생성자와 같은 메서드를 통해 내부값의 변경을 도모할수 있습니다.
```java
public class MyClass{
    private int a;
    private long b;
    private String name;
    public void printMyName(){
        System.out.println(this.name);
    }
    public void setName(String name){
        this.name=name;
    }
    public MyClass(String name){
        this.name=name;
    }
}

public class demo{
    public static void main(String[] args){
        MyClass mc=new MyClass("재현");
        mc.printMyName();
        mc.setName("재현아니다");
        mc.printMyName();
    }
}
```
#### 🧨 결과 
```
재현
재현아니다
```

<br/>
  
### Q2. 객체 만드는 방법 (new 키워드 이해하기)  
객체는 위의 코드와같이 new 키워드를 통해 클래스를 인스턴스화하여 만들수 있습니다.  

new 키워드는 다음과 같은 특성을 가집니다.

- 객체를 만드는 데 사용됩니다.
- 런타임에 객체가 생성될 메모리를 할당합니다.
- 모든 객체는 힙 영역에서 메모리를 차지합니다.
- 객체 생성자를 호출합니다.
- 생성자를 호출하려면 단일 후위 인수가 필요합니다.  
  
생성자는 파라미터가 비어있을 수 있고, 또는 클래스에 선언된 파라미터를 포함한 생성자로 생성
할 수도 있습니다.  
<br/>  

### Q3. 메소드 정의하는 방법  
메소드는 클래스가 가지고있는 독립적인 행위로 구성되어야합니다.
위의 MyClass에서 printMyName()이라는 메소드는 현재 필드멤버인 'name'을 출력하는
행위를 하고있으며 정의는 다음과같습니다.  

```java
public void printMyName(){
    System.out.println(this.name);
}
```
자바에서는 멤버필드를 private으로 보호하는것이 일반적입니다. 그래서 getter&setter 패턴을
통해 멤버필드에 접근하는 방식을 자주 사용합니다.

```java
public void setName(String name){
    this.name=name;
}

public String getName(){
    return this.name;
}
```  
<br/>  


### Q4. 생성자 정의하는 방법
객체가 new키워드를 통해 생성될때 생성자를 호출합니다.    

class를 작성할때 별도로 생성자를 선언하지 않았다면 컴파일러에 의해 생성자가 자동으로
추가되게 되게 됩니다.    

만약 class에 생성자를 작성했다면, 해당 생성자를 실행하게 됩니다.  

우선 다양한 방법으로 직접 정의될 수 있는 생성자부터 알아보겠습니다.   


```java
/* 빈 생성자 */
public class ConstructorDemoClass{
    private String data;

    /* 1. 파라미터가 비어있는 생성자 */
    ConstructorDemoClass(){
        this.data="파라미터가 없는 생성자로 생성된 객체";
    }

    /* 2. 빈 생성자 */
    ConstructorDemoClass(String data){
        this.data=data;
    }

    /* 3. 클래스를 파라미터로 하는 생성자 */
    ConstructorDemoClass(ConstructorDemoClass object){
        this.data=object.data;
    }
    
    /* 객체의 data 멤버변수와 객체 hashcode 출력*/
    public void printData(){
        System.out.println("data="+this.data+"   [hashCode=" +this.hashCode()+"]");
    }
}
```  

위와같은 클래스를 선언하고 이를 데모할 별도의 클래스에서 데모를 수행해보겠습니다.

```java
public class demo {
    public static void main(String[] args) {
        ConstructorDemoClass c1 = new ConstructorDemoClass();
        ConstructorDemoClass c2 = new ConstructorDemoClass("생성자로 데이터삽입");
        ConstructorDemoClass c3 = new ConstructorDemoClass("c3");
        ConstructorDemoClass c4 = new ConstructorDemoClass(c3);
        c1.printData();
        c2.printData();
        c3.printData();
        c4.printData();

    }
}
```  

```
실행결과:  
data=파라미터가 없는 생성자로 생성된 객체   [hashCode=1956725890]
data=생성자로 데이터삽입   [hashCode=356573597]
data=c3   [hashCode=1735600054]
data=c3   [hashCode=21685669]
```  
  
  
이제 다른 방식으로 생성자를 작성하지않고, 컴파일러가 자동으로 생성자를 만들어주는지 확인 해보겠습니다.
```java
public class demo {
    public static void main(String[] args) {
        ConstructorDemo2Class d2 = new ConstructorDemo2Class();
        d2.printData();
    }
}

public class ConstructorDemo2Class {
    private String data;
    public void printData(){
        System.out.println("data="+this.data+"   [hashCode=" +this.hashCode()+"]");
    }
}
```
  
``` 
실행결과:
data=null   [hashCode=1956725890]
```  
생성자가 없지만, 클래스는 정상적으로 생성되었습니다. 직접 선언한 생성자로 data 기본값을
대입해줬던것과 달리 컴파일러가 자동생성해준 생성자는 그런 임의의 코드가 작성되어있지
않기 때문에 data로 null을 반환합니다. 컴파일러가 생성하는 생성자는 어떻게 작성될까요?

```java
  public class ConstructorDemo2Class {
    ConstructorDemo2Class() {
        super();
     }
  }
```

위와같이 빈 생성자로 super();를 부르고있습니다. super 키워드는 상속된 부모객체의
생성자를 부르는 키워드로, 이번장에서는 설명을 넘기겠습니다.  

<br/>

### Q5. this 키워드 이해하기  
this 키워드는 자기자신 객체의 참조를 뜻합니다.   
this 키워드의 대표적인 사용 예시는 다음과 같습니다

- 현재 클래스 인스턴스 변수를 참조하는 데 사용할 수 있습니다.
- 현재 클래스 메서드를 호출하는 데 사용할 수 있습니다.
- this()는 현재 클래스 생성자를 호출하는 데 사용할 수 있습니다.
- 메소드 호출에서 인수로 전달 될 수 있습니다.
- 생성자 호출에서 인수로 전달 될 수 있습니다.
- 메서드에서 현재 클래스 인스턴스를 반환하는 데 사용할 수 있습니다.