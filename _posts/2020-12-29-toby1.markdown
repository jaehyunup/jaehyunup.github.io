---
title: Deep Dive in Spring - 1
subtitle: 스프링을 다시 학습하며
date: 2020-12-29
categories:
  - Spring
tags:
  - Spring
  - Java
---

# Deep dive ? Spring을 제대로 공부하자  
지금껏 진행한 많은 프로젝트에 Spring을 사용했다. 하지만 누군가 Spring을 왜 사용해야하고 도대체 무슨 장점이있으며, 핵심가치가 무엇이냐? 라고 묻는다면 정확히 답할 수 있는 자신이 없었다.   

**그냥 회사에서 많이 쓰니까..**  
신입 백앤드 개발자로서 준비 해가야 한다는 이유로 그저 사용법만 알고 익숙해지려는 노력만 했을뿐이었다.

나는 누군가 만들어놓은것을 덕지덕지 처바른 코드를 긁어와서 자기 코드 관리도 제대로 못하는 코드몽키가 되기 싫다. 그래서 이제 deep dive spring 시리즈로 포스트를하면서 스프링을 더 깊이 이해하는 과정을 적어보려고 한다.
  
<br/>
  


# Spring 이란 무엇인가
Spring은 Java 기반 엔터프라이즈 애플리케이션 개발에 사용되는 애플리케이션 프레임워크이다. 스프링은 객체지향 설계와 구현에 대한 특정 모델과 기법을 강요하진 않지만, 오브젝트를 어떻게 효과적으로 설계하고 사용하고 이를 개선 해 나갈 것인가에 대한 명쾌한 기준을 마련해준다. 동시에 객체지향 설계,구현에 관한 실용적 전략과 검증된 베스트 프랙티스를 평범한 개발자도 자연스럽게 적용할 수 있도록 프레임웍 형태로 이를 제공한다.


스프링의 핵심 바탕이 되는 구성요소는 아래와 같다.

- 스프링 컨테이너  
    - 애플리케이션 컨텍스트 또는 스프링 컨테이너라고 불리우는 스프링 런타임 엔진. 애플리케이션을 구성하는 오브젝트를 생성 및 관리한다.  
- IoC/DI
    - IoC는 제어의 역전, 즉 개발자가 오브젝트를 직접 관리하는것이 아니라 제어를 관리하는 별도의 오브젝트를 통해 관리하게 하는 방식. 즉 Design Pattern을 뜻하는 단어이다. 이와 비슷하게 DI 는 Dependencies Injection (의존 관계 주입)을 뜻한다. **왜 두가지 용어가 공통적으로 묶여 사용되는걸까?** 디자인 패턴중 하나인 IoC는 매우다양한 분야에서 사용되어지고 있기 떄문에 명확함을 위해  Spring 이 제공하는 IoC 방식의 핵심인 DI(의존 관계 주입)이라는 단어를 정립했다고 한다. 즉 Spring 에서 DI라는 방식을 사용해서 IoC를 구체적으로 구현하고 있는 것이다.
- 서비스 추상화
    - 스프링을 사용하면 특정 서버, 환경, 기술에 종속되지 않고 이식성이 뛰어나다. 구체적 기술과 환경에 종속되지 않는 유연한 추상 계층을 통해 이를 가능하게 했다.
- AOP
    - 관점 지향 프로그래밍, 애플리케이션 코드에 산재해서 나타나는 부가적인 기능을 독립적으로 모듈화 한다는 프로그래밍 모델이다. AOP를 활용해 깔끔한 코드를 유지할 수 있게 해준다.
- API
    - 다양한 영역에 바로 활용할 수 있는 방대한 양의 기술 API를 제공한다. UI, 프레젠테이션 계층, 비즈니스 로직 게층, 도메인 계층, 데이터 엑세스 계층 등에서 필요한 주요기술을 스프링에서 일관된 방식으로 사용할 수 있도록 지원해주는 기능과 전략클래스를 제공한다. 즉 스프링이 제공하는 API 모델만 사용하더라도 스프링의 프로그래밍 모델을 쉽게 빠르게 적용시킬 수 있다.


Spring을 활용해서 개발을 한다는것은 이 요소들을 이해하고 활용해서 애플리케이션을 개발하는 것.  
  
<br/>  


## 스프링으로 개발한다는 것은?  
1. 클래스는 IoC/DI의 주체인 스프링 컨테이너위에서 객체로 관리되고    
2. 코드는 스프링의 프로그래밍 모델을 따라 작성하고.   
3. 엔터프라이즈 기술을 접목시킨다면 스프링이 제공하는 기술 API와 서비스를 활용할 수 있게 해준다.    
  
<br/>  
  
## 스프링을 잘 사용하려면?  
스프링의 가치를 제대로 누리며 사용하려면, 스프링을 제대로 공부해야한다. 스프링은 프레임웍이 지향하는 가치와 프로그래밍 모델을 충분히 이해하지 못하고는 제대로 활용할 수 없기 때문이다. 



